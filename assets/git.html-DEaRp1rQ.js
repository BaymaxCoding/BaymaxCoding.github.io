import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as c,c as o,a as n,d as a,e,b as t}from"./app-D3p8wuGf.js";const p={},r=t('<h1 id="git" tabindex="-1"><a class="header-anchor" href="#git"><span>git</span></a></h1><p>是目前世界上最先进的分布式版本控制系统</p><h2 id="补充说明" tabindex="-1"><a class="header-anchor" href="#补充说明"><span>补充说明</span></a></h2><p><strong>git命令</strong> 很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。</p><p>Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？</p><p>事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！</p><p>你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。</p><p>不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。</p><p>安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。</p><p>Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：</p><p>Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。</p><p>Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。</p><p>历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。</p>',13),d={href:"https://github.com/jaywcjlove/handbook/blob/master/other/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95.md",target:"_blank",rel:"noopener noreferrer"},m=t(`<h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token punctuation">[</span>--version<span class="token punctuation">]</span> <span class="token punctuation">[</span>--help<span class="token punctuation">]</span> <span class="token punctuation">[</span>-C <span class="token operator">&lt;</span>path<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-c <span class="token assign-left variable">name</span><span class="token operator">=</span>value<span class="token punctuation">]</span> <span class="token punctuation">[</span>--exec-path<span class="token punctuation">[</span><span class="token operator">=</span><span class="token operator">&lt;</span>path<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--html-path<span class="token punctuation">]</span> <span class="token punctuation">[</span>--man-path<span class="token punctuation">]</span> <span class="token punctuation">[</span>--info-path<span class="token punctuation">]</span> <span class="token punctuation">[</span>-p <span class="token operator">|</span> <span class="token parameter variable">--paginate</span> <span class="token operator">|</span> --no-pager<span class="token punctuation">]</span> <span class="token punctuation">[</span>--no-replace-objects<span class="token punctuation">]</span> <span class="token punctuation">[</span>--bare<span class="token punctuation">]</span> <span class="token punctuation">[</span>--git-dir<span class="token operator">=</span><span class="token operator">&lt;</span>path<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--work-tree<span class="token operator">=</span><span class="token operator">&lt;</span>path<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--namespace<span class="token operator">=</span><span class="token operator">&lt;</span>name<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>command<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>args<span class="token operator">&gt;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="选项" tabindex="-1"><a class="header-anchor" href="#选项"><span>选项</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">add</span>              将文件内容添加到索引
bisect           通过二进制查找引入错误的更改
branch           列出，创建或删除分支
checkout         检查分支或路径到工作树
clone            将存储库克隆到新目录中
commit           将更改记录到存储库
<span class="token function">diff</span>             显示提交，提交和工作树等之间的更改
fetch            从另一个存储库下载对象和引用
<span class="token function">grep</span>             打印匹配图案的行
init             创建一个空的Git仓库或重新初始化一个现有的
log              显示提交日志
merge            加入两个或更多的开发历史
<span class="token function">mv</span>               移动或重命名文件，目录或符号链接
pull             从另一个存储库或本地分支获取并合并
push             更新远程引用以及相关对象
rebase           转发端口本地提交到更新的上游头
reset            将当前HEAD复位到指定状态
<span class="token function">rm</span>               从工作树和索引中删除文件
show             显示各种类型的对象
status           显示工作树状态
tag              创建，列出，删除或验证使用GPG签名的标签对象
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子</span></a></h3><p>init</p><p><code>git init</code> #初始化</p><p>status</p><p><code>git status</code> #获取状态</p><p>add</p><p><code>git add file</code> # .或*代表全部添加<br><code>git rm --cached &lt;added_file_to_undo&gt;</code> # 在commit之前撤销git add操作<br><code>git reset head</code> # 好像比上面<code>git rm --cached</code>更方便</p><p>commit</p><p><code>git commit -m &quot;message&quot;</code> #此处注意乱码</p><p>remote</p><p><code>git remote add origin git@github.com:JSLite/test.git</code> #添加源</p><p>push</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master <span class="token comment"># push 同时设置默认跟踪分支  </span>
<span class="token function">git</span> push origin master  
<span class="token function">git</span> push <span class="token parameter variable">-f</span> origin master <span class="token comment"># 强制推送文件，缩写 -f（全写--force）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>clone</p><p><code>git clone git://github.com/JSLite/JSLite.js.git</code><br><code>git clone git://github.com/JSLite/JSLite.js.git mypro</code> #克隆到自定义文件夹<br><code>git clone [user@]example.com:path/to/repo.git/</code> #SSH协议还有另一种写法。</p><p>git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。<code>git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone http<span class="token punctuation">[</span>s<span class="token punctuation">]</span>://example.com/path/to/repo.git/
<span class="token function">git</span> clone ssh://example.com/path/to/repo.git/
<span class="token function">git</span> clone git://example.com/path/to/repo.git/
<span class="token function">git</span> clone /opt/git/project.git 
<span class="token function">git</span> clone file:///opt/git/project.git
<span class="token function">git</span> clone ftp<span class="token punctuation">[</span>s<span class="token punctuation">]</span>://example.com/path/to/repo.git/
<span class="token function">git</span> clone rsync://example.com/path/to/repo.git/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h2><p>首先是配置帐号信息 <code>ssh -T git@github.com</code> 测试。</p><h2 id="修改项目中的个人信息" tabindex="-1"><a class="header-anchor" href="#修改项目中的个人信息"><span>修改项目中的个人信息</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token builtin class-name">help</span> config <span class="token comment"># 获取帮助信息，查看修改个人信息的参数  </span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;小弟调调&quot;</span>           <span class="token comment"># 修改全局名字</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;wowohoo@qq.com&quot;</span>  <span class="token comment"># 修改全局邮箱</span>
<span class="token function">git</span> config <span class="token parameter variable">--list</span>         <span class="token comment"># 查看配置的信息  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置自动换行" tabindex="-1"><a class="header-anchor" href="#配置自动换行"><span>配置自动换行</span></a></h3><p>自动转换坑太大，提交到git是自动将换行符转换为lf</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> core.autocrlf input
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="常见使用场景" tabindex="-1"><a class="header-anchor" href="#常见使用场景"><span>常见使用场景</span></a></h2><h3 id="创建ssh密钥" tabindex="-1"><a class="header-anchor" href="#创建ssh密钥"><span>创建SSH密钥</span></a></h3><p>这个密钥用来跟 github 通信，在本地终端里生成然后上传到 github</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">&#39;wowohoo@qq.com&#39;</span> <span class="token comment"># 生成密钥  </span>
ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">&quot;wowohoo@qq.com&quot;</span> <span class="token parameter variable">-f</span> ~/.ssh/ww_rsa <span class="token comment"># 指定生成目录文件名字</span>
<span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com <span class="token comment"># 测试是否成功  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多账号ssh配置" tabindex="-1"><a class="header-anchor" href="#多账号ssh配置"><span>多账号ssh配置</span></a></h3><p><strong>1.生成指定名字的密钥</strong></p><p><code>ssh-keygen -t rsa -C &quot;邮箱地址&quot; -f ~/.ssh/jslite_rsa</code><br> 会生成 <code>jslite_rsa</code> 和 <code>jslite_rsa.pub</code> 这两个文件</p><p><strong>2.密钥复制到托管平台上</strong></p><p><code>vim ~/.ssh/jslite_rsa.pub</code> 打开公钥文件 <code>jslite_rsa.pub</code> ，并把内容复制至代码托管平台上</p><p><strong>3.修改config文件</strong></p><p><code>vim ~/.ssh/config</code> #修改config文件，如果没有创建 <code>config</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Host jslite.github.com
  HostName github.com
  User <span class="token function">git</span>
  IdentityFile ~/.ssh/jslite_rsa

Host work.github.com
  HostName github.com
  <span class="token comment"># Port 服务器open-ssh端口（默认：22,默认时一般不写此行）</span>
  <span class="token comment"># PreferredAuthentications 配置登录时用什么权限认证 </span>
  <span class="token comment">#                          publickey|password publickey|keyboard-interactive等</span>
  User <span class="token function">git</span>
  IdentityFile ~/.ssh/work_rsa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Host</code> 这里是个别名可以随便命名</li><li><code>HostName</code> 一般是网站如：<code>git@ss.github.com:username/repo.git</code> 填写 <code>github.com</code></li><li><code>User</code> 通常填写<code>git</code></li><li><code>IdentityFile</code> 使用的公钥文件地址</li></ul><p><strong>4.测试</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@jslite.github.com  <span class="token comment"># \`@\`后面跟上定义的Host  </span>
<span class="token function">ssh</span> <span class="token parameter variable">-T</span> work.github.com        <span class="token comment"># 通过别名测试</span>
<span class="token function">ssh</span> <span class="token parameter variable">-i</span> ~/公钥文件地址 Host别名  <span class="token comment"># 如 ssh -i ~/.ssh/work_rsa work.github.com</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5.使用</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 原来的写法</span>
<span class="token function">git</span> clone git@github.com:<span class="token operator">&lt;</span>jslite的用户名<span class="token operator">&gt;</span>/learngit.git
<span class="token comment"># 现在的写法</span>
<span class="token function">git</span> clone git@jslite.github.com:<span class="token operator">&lt;</span>jslite的用户名<span class="token operator">&gt;</span>/learngit.git
<span class="token function">git</span> clone git@work.github.com:<span class="token operator">&lt;</span>work的用户名<span class="token operator">&gt;</span>/learngit.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5.注意</strong></p><p>如果你修改了id_rsa的名字，你需要将ssh key添加到SSH agent中，如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ssh-add ~/.ssh/jslite_rsa
ssh-add <span class="token parameter variable">-l</span>  <span class="token comment"># 查看所有的key</span>
ssh-add <span class="token parameter variable">-D</span>  <span class="token comment"># 删除所有的key</span>
ssh-add <span class="token parameter variable">-d</span>  ~/.ssh/jslite_rsa <span class="token comment"># 删除指定的key</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="免密码登录远程服务器" tabindex="-1"><a class="header-anchor" href="#免密码登录远程服务器"><span>免密码登录远程服务器</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-P</span> <span class="token string">&#39;&#39;</span> <span class="token parameter variable">-f</span> ~/.ssh/aliyunserver.key
ssh-copy-id <span class="token parameter variable">-i</span> ~/.ssh/aliyunserver.key.pub root@192.168.182.112 <span class="token comment"># 这里需要输入密码一次</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>编辑 <code>~/.ssh/config</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Host aliyun1
  HostName <span class="token number">192.168</span>.182.112
  User root
  PreferredAuthentications publickey
  IdentityFile ~/.ssh/aliyunserver.key
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面配置完了，可以通过命令登录，不需要输入IP地址和密码 <code>ssh aliyun1</code></p><h3 id="https协议下提交代码免密码" tabindex="-1"><a class="header-anchor" href="#https协议下提交代码免密码"><span>https协议下提交代码免密码</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/username/rep.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过上面方式克隆可能需要密码，解决办法：进入当前克隆的项目 <code>vi rep/.git/config</code> 编辑 <code>config</code>, 按照下面方式修改，你就可以提交代码不用输入密码了。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>core<span class="token punctuation">]</span>
 repositoryformatversion <span class="token operator">=</span> <span class="token number">0</span>
 filemode <span class="token operator">=</span> <span class="token boolean">true</span>
 bare <span class="token operator">=</span> <span class="token boolean">false</span>
 logallrefupdates <span class="token operator">=</span> <span class="token boolean">true</span>
 ignorecase <span class="token operator">=</span> <span class="token boolean">true</span>
 precomposeunicode <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">[</span>remote <span class="token string">&quot;origin&quot;</span><span class="token punctuation">]</span>
- url <span class="token operator">=</span> https://github.com/username/rep.git
+ url <span class="token operator">=</span> https://用户名:密码@github.com/username/rep.git
 fetch <span class="token operator">=</span> +refs/heads/*:refs/remotes/origin/*
<span class="token punctuation">[</span>branch <span class="token string">&quot;master&quot;</span><span class="token punctuation">]</span>
 remote <span class="token operator">=</span> origin
 merge <span class="token operator">=</span> refs/heads/master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文件推向3个git库" tabindex="-1"><a class="header-anchor" href="#文件推向3个git库"><span>文件推向3个git库</span></a></h3><p><strong>1. 增加3个远程库地址</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/JSLite/JSLite.git  
<span class="token function">git</span> remote set-url <span class="token parameter variable">--add</span> origin https://gitlab.com/wang/JSLite.js.git  
<span class="token function">git</span> remote set-url <span class="token parameter variable">--add</span> origin https://oschina.net/wang/JSLite.js.git  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 删除其中一个 set-url 地址</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>usage: <span class="token function">git</span> remote set-url <span class="token punctuation">[</span>--push<span class="token punctuation">]</span> <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>newurl<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>oldurl<span class="token operator">&gt;</span><span class="token punctuation">]</span>
   or: <span class="token function">git</span> remote set-url <span class="token parameter variable">--add</span> <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>newurl<span class="token operator">&gt;</span>
   or: <span class="token function">git</span> remote set-url <span class="token parameter variable">--delete</span> <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>url<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>git remote set-url --delete origin https://oschina.net/wang/JSLite.js.git</code></p><p><strong>3.推送代码</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin master
<span class="token function">git</span> push <span class="token parameter variable">-f</span> origin master  <span class="token comment"># 强制推送  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4.拉代码</strong></p><p>只能拉取 <code>origin</code> 里的一个url地址，这个fetch-url<br> 默认为你添加的到 <code>origin</code>的第一个地址</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> pull origin master   
<span class="token function">git</span> pull <span class="token parameter variable">--all</span> <span class="token comment"># 获取远程所有内容包括tag  </span>
<span class="token function">git</span> pull origin next:master <span class="token comment"># 取回origin主机的next分支，与本地的master分支合并  </span>
<span class="token function">git</span> pull origin next <span class="token comment"># 远程分支是与当前分支合并  </span>

<span class="token comment"># 上面一条命令等同于下面两条命令   </span>
<span class="token function">git</span> fetch origin  
<span class="token function">git</span> merge origin/next  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致git pull不知不觉删除了本地分支。<br> 但是，你可以改变这个行为，加上参数 -p 就会在本地删除远程已经删除的分支。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> pull <span class="token parameter variable">-p</span>
<span class="token comment"># 等同于下面的命令</span>
$ <span class="token function">git</span> fetch <span class="token parameter variable">--prune</span> origin 
$ <span class="token function">git</span> fetch <span class="token parameter variable">-p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5.更改pull</strong></p><p>只需要更改config文件里，那三个url的顺序即可，fetch-url会直接对应排行第一的那个utl连接。</p><h3 id="修改远程仓库地址" tabindex="-1"><a class="header-anchor" href="#修改远程仓库地址"><span>修改远程仓库地址</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> remote remove origin  <span class="token comment"># 删除该远程路径  </span>
<span class="token function">git</span> remote <span class="token function">add</span> origin git@jslite.github.com:JSLite/JSLite.git  <span class="token comment"># 添加远程路径 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="撤销远程记录" tabindex="-1"><a class="header-anchor" href="#撤销远程记录"><span>撤销远程记录</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD~1 <span class="token comment"># 撤销一条记录   </span>
<span class="token function">git</span> push <span class="token parameter variable">-f</span> origin HEAD:master <span class="token comment"># 同步到远程仓库  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="放弃本地的文件修改" tabindex="-1"><a class="header-anchor" href="#放弃本地的文件修改"><span>放弃本地的文件修改</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> FETCH_HEAD <span class="token comment"># FETCH_HEAD表示上一次成功git pull之后形成的commit点。然后git pull</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>git reset --hard FETCH_HEAD</code> 出现错误</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> pull
You are not currently on a branch, so I cannot use any
<span class="token string">&#39;branch.&lt;branchname&gt;.merge&#39;</span> <span class="token keyword">in</span> your configuration file.
Please specify <span class="token function">which</span> remote branch you want to use on the <span class="token builtin class-name">command</span>
line and try again <span class="token punctuation">(</span>e.g. <span class="token string">&#39;git pull &lt;repository&gt; &lt;refspec&gt;&#39;</span><span class="token punctuation">)</span>.
See git-pull<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> FOR details.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方法：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> temp <span class="token comment"># 新建+切换到temp分支 </span>
<span class="token function">git</span> checkout master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="最简单放弃本地修改内容" tabindex="-1"><a class="header-anchor" href="#最简单放弃本地修改内容"><span>最简单放弃本地修改内容</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 如果有的修改以及加入暂存区的话</span>
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> 
<span class="token comment"># 还原所有修改，不会删除新增的文件</span>
<span class="token function">git</span> checkout <span class="token builtin class-name">.</span> 
<span class="token comment"># 下面命令会删除新增的文件</span>
<span class="token function">git</span> clean <span class="token parameter variable">-xdf</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过存储暂存区stash，在删除暂存区的方法放弃本地修改。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> stash <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> stash drop 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="回滚到某个commit提交" tabindex="-1"><a class="header-anchor" href="#回滚到某个commit提交"><span>回滚到某个commit提交</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> revert HEAD~1 <span class="token comment"># 撤销一条记录 会弹出 commit 编辑</span>
<span class="token function">git</span> push <span class="token comment"># 提交回滚</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="回退到某一个版本" tabindex="-1"><a class="header-anchor" href="#回退到某一个版本"><span>回退到某一个版本</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> <span class="token operator">&lt;</span>hash<span class="token operator">&gt;</span>
<span class="token comment"># 例如 git reset --hard a3hd73r</span>
<span class="token comment"># --hard代表丢弃工作区的修改，让工作区与版本代码一模一样，与之对应，</span>
<span class="token comment"># --soft参数代表保留工作区的修改。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="去掉某个commit" tabindex="-1"><a class="header-anchor" href="#去掉某个commit"><span>去掉某个commit</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 实质是新建了一个与原来完全相反的commit，抵消了原来commit的效果</span>
<span class="token function">git</span> revert <span class="token operator">&lt;</span>commit-hash<span class="token operator">&gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="新建一个空分支" tabindex="-1"><a class="header-anchor" href="#新建一个空分支"><span>新建一个空分支</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 这种方式新建的分支(gh-pages)是没有 commit 记录的</span>
<span class="token function">git</span> checkout <span class="token parameter variable">--orphan</span> gh-pages
<span class="token comment"># 删除新建的gh-pages分支原本的内容，如果不删除，提交将作为当前分支的第一个commit</span>
<span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token builtin class-name">.</span>
<span class="token comment"># 查看一下状态 有可能上面一条命令，没有删除还没有提交的的文件</span>
<span class="token function">git</span> state 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="合并多个commit" tabindex="-1"><a class="header-anchor" href="#合并多个commit"><span>合并多个commit</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 这个命令，将最近4个commit合并为1个，HEAD代表当前版本。</span>
<span class="token comment"># 将进入VIM界面，你可以修改提交信息。</span>
<span class="token function">git</span> rebase <span class="token parameter variable">-i</span> HEAD~4 
<span class="token comment"># 可以看到其中分为两个部分，上方未注释的部分是填写要执行的指令，</span>
<span class="token comment"># 而下方注释的部分则是指令的提示说明。指令部分中由前方的命令名称、commit hash 和 commit message 组成</span>
<span class="token comment"># 当前我们只要知道 pick 和 squash 这两个命令即可。</span>
<span class="token comment"># --&gt; pick 的意思是要会执行这个 commit</span>
<span class="token comment"># --&gt; squash 的意思是这个 commit 会被合并到前一个commit</span>

<span class="token comment"># 我们将 需要保留的 这个 commit 前方的命令改成 squash 或 s，然后输入:wq以保存并退出</span>
<span class="token comment"># 这是我们会看到 commit message 的编辑界面</span>

<span class="token comment"># 其中, 非注释部分就是两次的 commit message, 你要做的就是将这两个修改成新的 commit message。</span>
<span class="token comment"># </span>
<span class="token comment"># 输入wq保存并推出, 再次输入git log查看 commit 历史信息，你会发现这两个 commit 已经合并了。</span>
<span class="token comment"># 将修改强制推送到前端</span>
<span class="token function">git</span> push <span class="token parameter variable">-f</span> origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修改远程commit记录" tabindex="-1"><a class="header-anchor" href="#修改远程commit记录"><span>修改远程Commit记录</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">--amend</span>
<span class="token comment"># amend只能修改没有提交到线上的，最后一次commit记录</span>
<span class="token function">git</span> rebase <span class="token parameter variable">-i</span> HEAD~3
<span class="token comment"># 表示要修改当前版本的倒数第三次状态</span>
<span class="token comment"># 将要更改的记录行首单词 pick 改为 edit</span>
pick 96dc3f9 doc: Update quick-start.md
pick f1cce8a test<span class="token punctuation">(</span>Transition<span class="token punctuation">)</span>:Add transition <span class="token builtin class-name">test</span> <span class="token punctuation">(</span><span class="token comment">#47)</span>
pick <span class="token number">6293516</span> feat<span class="token punctuation">(</span>Divider<span class="token punctuation">)</span>: Add Divider component.
<span class="token comment"># Rebase eeb03a4..6293516 onto eeb03a4 (3 commands)</span>
<span class="token comment">#</span>
<span class="token comment"># Commands:</span>
<span class="token comment"># p, pick = use commit</span>
<span class="token comment"># r, reword = use commit, but edit the commit message</span>
<span class="token comment"># e, edit = use commit, but stop for amending</span>
<span class="token comment"># s, squash = use commit, but meld into previous commit</span>
<span class="token comment"># f, fixup = like &quot;squash&quot;, but discard this commit&#39;s log message</span>
<span class="token comment"># x, exec = run command (the rest of the line) using shell</span>
<span class="token comment"># d, drop = remove commit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保存并退出，会弹出下面提示</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># You can amend the commit now, with</span>
<span class="token comment"># </span>
<span class="token comment">#   git commit --amend</span>
<span class="token comment"># </span>
<span class="token comment"># Once you are satisfied with your changes, run</span>
<span class="token comment"># </span>
<span class="token comment">#   git rebase --continue</span>

<span class="token comment"># 通过这条命令进入编辑页面更改commit，保存退出</span>
<span class="token function">git</span> commit <span class="token parameter variable">--amend</span>
<span class="token comment"># 保存退出确认修改，继续执行 rebase, </span>
<span class="token function">git</span> rebase <span class="token parameter variable">--continue</span>
<span class="token comment"># 如果修改多条记录反复执行上面两条命令直到完成所有修改</span>

<span class="token comment"># 最后，确保别人没有提交进行push，最好不要加 -f 强制推送</span>
<span class="token function">git</span> push <span class="token parameter variable">-f</span> origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="添加忽略文件" tabindex="-1"><a class="header-anchor" href="#添加忽略文件"><span>添加忽略文件</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> node_modules/ <span class="token operator">&gt;&gt;</span> .gitignore
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="利用commit关闭一个issue" tabindex="-1"><a class="header-anchor" href="#利用commit关闭一个issue"><span>利用commit关闭一个issue</span></a></h3><p>这个功能在Github上可以玩儿，Gitlab上特别老的版本不能玩儿哦，那么如何跟随着commit关闭一个issue呢? 在confirm merge的时候可以使用一下命令来关闭相关issue:</p><p><code>fixes #xxx</code>、 <code>fixed #xxx</code>、 <code>fix #xxx</code>、 <code>closes #xxx</code>、 <code>close #xxx</code>、 <code>closed #xxx</code>、</p><h3 id="同步fork的上游仓库" tabindex="-1"><a class="header-anchor" href="#同步fork的上游仓库"><span>同步fork的上游仓库</span></a></h3>`,106),u={href:"https://help.github.com/articles/syncing-a-fork/",target:"_blank",rel:"noopener noreferrer"},v={href:"http://www.miss77.net/549.html",target:"_blank",rel:"noopener noreferrer"},h=t(`<p><strong>设置添加多个远程仓库地址。</strong></p><p>在同步之前，需要创建一个远程点指向上游仓库(repo).如果你已经派生了一个原始仓库，可以按照如下方法做。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> remote <span class="token parameter variable">-v</span>
<span class="token comment"># List the current remotes （列出当前远程仓库）</span>
<span class="token comment"># origin  https://github.com/user/repo.git (fetch)</span>
<span class="token comment"># origin  https://github.com/user/repo.git (push)</span>
$ <span class="token function">git</span> remote <span class="token function">add</span> upstream https://github.com/otheruser/repo.git
<span class="token comment"># Set a new remote (设置一个新的远程仓库)</span>
$ <span class="token function">git</span> remote <span class="token parameter variable">-v</span>
<span class="token comment"># Verify new remote (验证新的原唱仓库)</span>
<span class="token comment"># origin    https://github.com/user/repo.git (fetch)</span>
<span class="token comment"># origin    https://github.com/user/repo.git (push)</span>
<span class="token comment"># upstream  https://github.com/otheruser/repo.git (fetch)</span>
<span class="token comment"># upstream  https://github.com/otheruser/repo.git (push)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>同步更新仓库内容</strong></p><p>同步上游仓库到你的仓库需要执行两步：首先你需要从远程拉去，之后你需要合并你希望的分支到你的本地副本分支。从上游的存储库中提取分支以及各自的提交内容。 <code>master</code> 将被存储在本地分支机构 <code>upstream/master</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch upstream
<span class="token comment"># remote: Counting objects: 75, done.</span>
<span class="token comment"># remote: Compressing objects: 100% (53/53), done.</span>
<span class="token comment"># remote: Total 62 (delta 27), reused 44 (delta 9)</span>
<span class="token comment"># Unpacking objects: 100% (62/62), done.</span>
<span class="token comment"># From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY</span>
<span class="token comment">#  * [new branch]      master     -&gt; upstream/master</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>检查你的 fork&#39;s 本地 <code>master</code> 分支</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout master
<span class="token comment"># Switched to branch &#39;master&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>合并来自 <code>upstream/master</code> 的更改到本地 master 分支上。 这使你的前 fork&#39;s <code>master</code> 分支与上游资源库同步，而不会丢失你本地修改。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> merge upstream/master
<span class="token comment"># Updating a422352..5fdff0f</span>
<span class="token comment"># Fast-forward</span>
<span class="token comment">#  README                    |    9 -------</span>
<span class="token comment">#  README.md                 |    7 ++++++</span>
<span class="token comment">#  2 files changed, 7 insertions(+), 9 deletions(-)</span>
<span class="token comment">#  delete mode 100644 README</span>
<span class="token comment">#  create mode 100644 README.md</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="批量修改历史commit中的名字和邮箱" tabindex="-1"><a class="header-anchor" href="#批量修改历史commit中的名字和邮箱"><span>批量修改历史commit中的名字和邮箱</span></a></h3><p><strong>1.克隆仓库</strong></p><p>注意参数，这个不是普通的clone，clone下来的仓库并不能参与开发</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone <span class="token parameter variable">--bare</span> https://github.com/user/repo.git
<span class="token builtin class-name">cd</span> repo.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.命令行中运行代码</strong></p><p>OLD_EMAIL原来的邮箱<br> CORRECT_NAME更正的名字<br> CORRECT_EMAIL更正的邮箱</p><p>将下面代码复制放到命令行中执行</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> filter-branch <span class="token parameter variable">-f</span> --env-filter <span class="token string">&#39;
OLD_EMAIL=&quot;wowohoo@qq.com&quot;
CORRECT_NAME=&quot;小弟调调&quot;
CORRECT_EMAIL=&quot;更正的邮箱@qq.com&quot;
if [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]
then
    export GIT_COMMITTER_NAME=&quot;$CORRECT_NAME&quot;
    export GIT_COMMITTER_EMAIL=&quot;$CORRECT_EMAIL&quot;
fi
if [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]
then
    export GIT_AUTHOR_NAME=&quot;$CORRECT_NAME&quot;
    export GIT_AUTHOR_EMAIL=&quot;$CORRECT_EMAIL&quot;
fi
&#39;</span> --tag-name-filter <span class="token function">cat</span> -- <span class="token parameter variable">--branches</span> <span class="token parameter variable">--tags</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行过程</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Rewrite 160d4df2689ff6df3820563bfd13b5f1fb9ba832 <span class="token punctuation">(</span><span class="token number">479</span>/508<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">16</span> seconds passed, remaining <span class="token number">0</span> predicted<span class="token punctuation">)</span>
Ref <span class="token string">&#39;refs/heads/dev&#39;</span> was rewritten
Ref <span class="token string">&#39;refs/heads/master&#39;</span> was rewritten
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.同步到远程仓库</strong></p><p>同步到push远程git仓库</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token parameter variable">--force</span> <span class="token parameter variable">--tags</span> origin <span class="token string">&#39;refs/heads/*&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我还遇到了如下面错误，lab默认给master分支加了保护，不允许强制覆盖。<code>Project(项目)</code>-&gt;<code>Setting</code>-&gt;<code>Repository</code> 菜单下面的<code>Protected branches</code>把master的保护去掉就可以了。修改完之后，建议把master的保护再加回来，毕竟强推不是件好事。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>remote: GitLab: You are not allowed to force push code to a protected branch on this project.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当上面的push 不上去的时候，先 <code>git pull</code> 确保最新代码</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> pull  --allow-unrelated-histories
<span class="token comment"># 或者指定分枝</span>
<span class="token function">git</span> pull origin master --allow-unrelated-histories
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看某个文件历史" tabindex="-1"><a class="header-anchor" href="#查看某个文件历史"><span>查看某个文件历史</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline 文件名  <span class="token comment"># 列出文件的所有改动历史  </span>
<span class="token function">git</span> show c178bf49   <span class="token comment"># 某次的改动的修改记录  </span>
<span class="token function">git</span> log <span class="token parameter variable">-p</span> c178bf49 <span class="token comment"># 某次的改动的修改记录  </span>
<span class="token function">git</span> blame 文件名     <span class="token comment"># 显示文件的每一行是在那个版本最后修改。  </span>
<span class="token function">git</span> whatchanged 文件名  <span class="token comment"># 显示某个文件的每个版本提交信息：提交日期，提交人员，版本号，提交备注（没有修改细节）  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="打造自己的git命令" tabindex="-1"><a class="header-anchor" href="#打造自己的git命令"><span>打造自己的git命令</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> alias.st status
<span class="token function">git</span> config <span class="token parameter variable">--global</span> alias.br branch
<span class="token function">git</span> config <span class="token parameter variable">--global</span> alias.co checkout
<span class="token function">git</span> config <span class="token parameter variable">--global</span> alias.ci commit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置好后再输入git命令的时候就不用再输入一大段了，例如我们要查看状态，只需：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> st
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="中文乱码的解决方案" tabindex="-1"><a class="header-anchor" href="#中文乱码的解决方案"><span>中文乱码的解决方案</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> core.quotepath <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="新建仓库" tabindex="-1"><a class="header-anchor" href="#新建仓库"><span>新建仓库</span></a></h2><h3 id="init" tabindex="-1"><a class="header-anchor" href="#init"><span>init</span></a></h3><p><code>git init</code> #初始化</p><h3 id="status" tabindex="-1"><a class="header-anchor" href="#status"><span>status</span></a></h3><p><code>git status</code> #获取状态</p><h3 id="add" tabindex="-1"><a class="header-anchor" href="#add"><span>add</span></a></h3><p><code>git add file</code> # .或*代表全部添加<br><code>git rm --cached &lt;added_file_to_undo&gt;</code> # 在commit之前撤销git add操作<br><code>git reset head</code> # 好像比上面<code>git rm --cached</code>更方便</p><h3 id="commit" tabindex="-1"><a class="header-anchor" href="#commit"><span>commit</span></a></h3><p><code>git commit -m &quot;message&quot;</code> #此处注意乱码</p><h3 id="remote" tabindex="-1"><a class="header-anchor" href="#remote"><span>remote</span></a></h3><p><code>git remote add origin git@github.com:JSLite/test.git</code> #添加源</p><h3 id="push" tabindex="-1"><a class="header-anchor" href="#push"><span>push</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master <span class="token comment"># push同事设置默认跟踪分支  </span>
<span class="token function">git</span> push origin master  
<span class="token function">git</span> push <span class="token parameter variable">-f</span> origin master <span class="token comment"># 强制推送文件，缩写 -f（全写--force）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="clone" tabindex="-1"><a class="header-anchor" href="#clone"><span>clone</span></a></h2><p><code>git clone git://github.com/JSLite/JSLite.js.git</code><br><code>git clone git://github.com/JSLite/JSLite.js.git mypro</code> #克隆到自定义文件夹<br><code>git clone [user@]example.com:path/to/repo.git/</code> #SSH协议还有另一种写法。</p><p>git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。<code>git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone http<span class="token punctuation">[</span>s<span class="token punctuation">]</span>://example.com/path/to/repo.git/
<span class="token function">git</span> clone ssh://example.com/path/to/repo.git/
<span class="token function">git</span> clone git://example.com/path/to/repo.git/
<span class="token function">git</span> clone /opt/git/project.git 
<span class="token function">git</span> clone file:///opt/git/project.git
<span class="token function">git</span> clone ftp<span class="token punctuation">[</span>s<span class="token punctuation">]</span>://example.com/path/to/repo.git/
<span class="token function">git</span> clone rsync://example.com/path/to/repo.git/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="本地" tabindex="-1"><a class="header-anchor" href="#本地"><span>本地</span></a></h2><h3 id="help" tabindex="-1"><a class="header-anchor" href="#help"><span>help</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token builtin class-name">help</span> config <span class="token comment"># 获取帮助信息  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="add-1" tabindex="-1"><a class="header-anchor" href="#add-1"><span>add</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> *   <span class="token comment"># 跟踪新文件   </span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-u</span> <span class="token punctuation">[</span>path<span class="token punctuation">]</span>   <span class="token comment"># 添加[指定路径下]已跟踪文件   </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rm" tabindex="-1"><a class="header-anchor" href="#rm"><span>rm</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">rm</span> *<span class="token operator">&amp;</span><span class="token function">git</span> <span class="token function">rm</span> *          <span class="token comment"># 移除文件  </span>
<span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> *            <span class="token comment"># 移除文件  </span>
<span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cached</span> *      <span class="token comment"># 取消跟踪  </span>
<span class="token function">git</span> <span class="token function">mv</span> file_from file_to  <span class="token comment"># 重命名跟踪文件  </span>
<span class="token function">git</span> log   <span class="token comment"># 查看提交记录  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="commit-1" tabindex="-1"><a class="header-anchor" href="#commit-1"><span>commit</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token comment">#提交更新   </span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;message&#39;</span> <span class="token comment">#提交说明   </span>
<span class="token function">git</span> commit <span class="token parameter variable">-a</span> <span class="token comment">#跳过使用暂存区域，把所有已经跟踪过的文件暂存起来一并提交   </span>
<span class="token function">git</span> commit <span class="token parameter variable">--amend</span> <span class="token comment">#修改最后一次提交   </span>
<span class="token function">git</span> commit log <span class="token comment">#查看所有提交，包括没有push的commit    </span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;#133&quot;</span> <span class="token comment">#关联issue 任意位置带上# 符号加上issue号码  </span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;fix #133&quot;</span> commit关闭issue  
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;概要描述&#39;</span><span class="token string">$&#39;<span class="token entity" title="\\n">\\n</span><span class="token entity" title="\\n">\\n</span>&#39;</span>&#39;1.详细描述<span class="token string">&#39;$&#39;</span><span class="token punctuation">\\</span>n<span class="token string">&#39;&#39;</span><span class="token number">2</span>.详细描述&#39; <span class="token comment">#提交简要描述和详细描述  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reset" tabindex="-1"><a class="header-anchor" href="#reset"><span>reset</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> reset HEAD *  <span class="token comment"># 取消已经暂存的文件   </span>
<span class="token function">git</span> reset <span class="token parameter variable">--mixed</span> HEAD * <span class="token comment"># 同上   </span>
<span class="token function">git</span> reset <span class="token parameter variable">--soft</span> HEAD *  <span class="token comment"># 重置到指定状态，不会修改索引区和工作树   </span>
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD *  <span class="token comment"># 重置到指定状态，会修改索引区和工作树   </span>
<span class="token function">git</span> reset -- files *     <span class="token comment"># 重置index区文件   </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="revert" tabindex="-1"><a class="header-anchor" href="#revert"><span>revert</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> revert HEAD   <span class="token comment"># 撤销前一次操作   </span>
<span class="token function">git</span> revert HEAD~  <span class="token comment"># 撤销前前一次操作   </span>
<span class="token function">git</span> revert commit <span class="token comment"># 撤销指定操作   </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="checkout" tabindex="-1"><a class="header-anchor" href="#checkout"><span>checkout</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout -- <span class="token function">file</span>  <span class="token comment"># 取消对文件的修改（从暂存区——覆盖worktree file）  </span>
<span class="token function">git</span> checkout branch<span class="token operator">|</span>tag<span class="token operator">|</span>commit -- file_name  <span class="token comment"># 从仓库取出file覆盖当前分支   </span>
<span class="token function">git</span> checkout HEAD~1 <span class="token punctuation">[</span>文件<span class="token punctuation">]</span>  <span class="token comment"># 将会更新 working directory 去匹配某次 commit   </span>
<span class="token function">git</span> checkout -- <span class="token builtin class-name">.</span>          <span class="token comment"># 从暂存区取出文件覆盖工作区   </span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> gh-pages  0c304c9  <span class="token comment"># 这个表示 从当前分支 commit 哈希值为 0c304c9 的节点，分一个新的分支gh-pages出来，并切换到 gh-pages   </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="diff" tabindex="-1"><a class="header-anchor" href="#diff"><span>diff</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">diff</span> <span class="token function">file</span>     <span class="token comment"># 查看指定文件的差异   </span>
<span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--stat</span>   <span class="token comment"># 查看简单的diff结果   </span>
<span class="token function">git</span> <span class="token function">diff</span>  <span class="token comment"># 比较Worktree和Index之间的差异   </span>
<span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--cached</span>   <span class="token comment"># 比较Index和HEAD之间的差异   </span>
<span class="token function">git</span> <span class="token function">diff</span> HEAD       <span class="token comment"># 比较Worktree和HEAD之间的差异   </span>
<span class="token function">git</span> <span class="token function">diff</span> branch     <span class="token comment"># 比较Worktree和branch之间的差异   </span>
<span class="token function">git</span> <span class="token function">diff</span> branch1 branch2  <span class="token comment"># 比较两次分支之间的差异   </span>
<span class="token function">git</span> <span class="token function">diff</span> commit commit    <span class="token comment"># 比较两次提交之间的差异   </span>
<span class="token function">git</span> <span class="token function">diff</span> master<span class="token punctuation">..</span>test   <span class="token comment"># 上面这条命令只显示两个分支间的差异  </span>
<span class="token function">git</span> <span class="token function">diff</span> master<span class="token punctuation">..</span>.test    <span class="token comment"># 你想找出‘master’,‘test’的共有 父分支和&#39;test&#39;分支之间的差异，你用3个‘.&#39;来取代前面的两个&#39;.&#39;  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stash" tabindex="-1"><a class="header-anchor" href="#stash"><span>stash</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> stash <span class="token comment"># 将工作区现场（已跟踪文件）储藏起来，等以后恢复后继续工作。   </span>
<span class="token function">git</span> stash list  <span class="token comment"># 查看保存的工作现场   </span>
<span class="token function">git</span> stash apply <span class="token comment"># 恢复工作现场   </span>
<span class="token function">git</span> stash drop  <span class="token comment"># 删除stash内容   </span>
<span class="token function">git</span> stash pop   <span class="token comment"># 恢复的同时直接删除stash内容   </span>
<span class="token function">git</span> stash apply stash@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span> <span class="token comment"># 恢复指定的工作现场，当你保存了不只一份工作现场时。   </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="merge" tabindex="-1"><a class="header-anchor" href="#merge"><span>merge</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> merge <span class="token parameter variable">--squash</span> <span class="token builtin class-name">test</span> <span class="token comment"># 合并压缩，将test上的commit压缩为一条   </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="cherry-pick" tabindex="-1"><a class="header-anchor" href="#cherry-pick"><span>cherry-pick</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> cherry-pick commit    <span class="token comment"># 拣选合并，将commit合并到当前分支   </span>
<span class="token function">git</span> cherry-pick <span class="token parameter variable">-n</span> commit <span class="token comment"># 拣选多个提交，合并完后可以继续拣选下一个提交   </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rebase" tabindex="-1"><a class="header-anchor" href="#rebase"><span>rebase</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase master   <span class="token comment"># 将master分之上超前的提交，变基到当前分支  </span>
<span class="token function">git</span> rebase <span class="token parameter variable">--onto</span> master 169a6  <span class="token comment"># 限制回滚范围，rebase当前分支从169a6以后的提交  </span>
<span class="token function">git</span> rebase <span class="token parameter variable">--interactive</span> <span class="token comment"># 交互模式，修改commit   </span>
<span class="token function">git</span> rebase <span class="token parameter variable">--continue</span>    <span class="token comment"># 处理完冲突继续合并   </span>
<span class="token function">git</span> rebase <span class="token parameter variable">--skip</span>        <span class="token comment"># 跳过   </span>
<span class="token function">git</span> rebase <span class="token parameter variable">--abort</span>       <span class="token comment"># 取消合并    </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分支branch" tabindex="-1"><a class="header-anchor" href="#分支branch"><span>分支branch</span></a></h2><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除"><span>删除</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin :branchName  <span class="token comment"># 删除远程分支  </span>
<span class="token function">git</span> push origin <span class="token parameter variable">--delete</span> new <span class="token comment"># 删除远程分支new   </span>
<span class="token function">git</span> branch <span class="token parameter variable">-d</span> branchName     <span class="token comment"># 删除本地分支，强制删除用-D  </span>
<span class="token function">git</span> branch <span class="token parameter variable">-d</span> <span class="token builtin class-name">test</span>      <span class="token comment"># 删除本地test分支   </span>
<span class="token function">git</span> branch <span class="token parameter variable">-D</span> <span class="token builtin class-name">test</span>      <span class="token comment"># 强制删除本地test分支   </span>
<span class="token function">git</span> remote prune origin <span class="token comment"># 远程删除了，本地还能看到远程存在，这条命令删除远程不存在的分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="提交" tabindex="-1"><a class="header-anchor" href="#提交"><span>提交</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin branchName <span class="token comment"># 提交分支到远程origin主机中  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="拉取" tabindex="-1"><a class="header-anchor" href="#拉取"><span>拉取</span></a></h3><p><code>git fetch -p</code> #拉取远程分支时，自动清理 远程分支已删除，本地还存在的对应同名分支。</p><h3 id="分支合并" tabindex="-1"><a class="header-anchor" href="#分支合并"><span>分支合并</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> merge branchName      <span class="token comment"># 合并分支 - 将分支branchName和当前所在分支合并   </span>
<span class="token function">git</span> merge origin/master   <span class="token comment"># 在本地分支上合并远程分支。   </span>
<span class="token function">git</span> rebase origin/master  <span class="token comment"># 在本地分支上合并远程分支。   </span>
<span class="token function">git</span> merge <span class="token builtin class-name">test</span>            <span class="token comment"># 将test分支合并到当前分支   </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="重命名" tabindex="-1"><a class="header-anchor" href="#重命名"><span>重命名</span></a></h3><p><code>git branch -m old new</code> #重命名分支</p><h3 id="查看" tabindex="-1"><a class="header-anchor" href="#查看"><span>查看</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> branch      <span class="token comment"># 列出本地分支   </span>
<span class="token function">git</span> branch <span class="token parameter variable">-r</span>   <span class="token comment"># 列出远端分支   </span>
<span class="token function">git</span> branch <span class="token parameter variable">-a</span>   <span class="token comment"># 列出所有分支   </span>
<span class="token function">git</span> branch <span class="token parameter variable">-v</span>   <span class="token comment"># 查看各个分支最后一个提交对象的信息   </span>
<span class="token function">git</span> branch <span class="token parameter variable">--merge</span>      <span class="token comment"># 查看已经合并到当前分支的分支   </span>
<span class="token function">git</span> branch --no-merge   <span class="token comment"># 查看为合并到当前分支的分支   </span>
<span class="token function">git</span> remote show origin  <span class="token comment"># 可以查看remote地址，远程分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="新建" tabindex="-1"><a class="header-anchor" href="#新建"><span>新建</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token builtin class-name">test</span> <span class="token comment"># 新建test分支  </span>
<span class="token function">git</span> branch newBrach 3defc69 <span class="token comment"># 指定哈希3defc69，新建分支名字为newBrach</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> newBrach origin/master <span class="token comment"># 取回远程主机的更新以后，在它的基础上创建一个新的分支  </span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> newBrach 3defc69 <span class="token comment"># 以哈希值3defc69，新建 newBrach 分支，并切换到该分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="连接" tabindex="-1"><a class="header-anchor" href="#连接"><span>连接</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> branch --set-upstream dev origin/dev     <span class="token comment"># 将本地dev分支与远程dev分支之间建立链接  </span>
<span class="token function">git</span> branch --set-upstream master origin/next <span class="token comment"># 手动建立追踪关系  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分支切换" tabindex="-1"><a class="header-anchor" href="#分支切换"><span>分支切换</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token builtin class-name">test</span>     <span class="token comment"># 切换到test分支   </span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token builtin class-name">test</span>  <span class="token comment"># 新建+切换到test分支   </span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token builtin class-name">test</span> dev <span class="token comment"># 基于dev新建test分支，并切换   </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="远端" tabindex="-1"><a class="header-anchor" href="#远端"><span>远端</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch <span class="token operator">&lt;</span>远程主机名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>分支名<span class="token operator">&gt;</span>   <span class="token comment"># fetch取回所有分支（branch）的更新  </span>
<span class="token function">git</span> fetch origin remotebranch<span class="token punctuation">[</span>:localbranch<span class="token punctuation">]</span>   <span class="token comment">#  从远端拉去分支[到本地指定分支]   </span>
<span class="token function">git</span> merge origin/branch   <span class="token comment"># 合并远端上指定分支   </span>
<span class="token function">git</span> pull origin remotebranch:localbranch  <span class="token comment">#  拉去远端分支到本地分支   </span>
<span class="token function">git</span> push origin branch    <span class="token comment"># 将当前分支，推送到远端上指定分支   </span>
<span class="token function">git</span> push origin localbranch:remotebranch  <span class="token comment"># 推送本地指定分支，到远端上指定分支   </span>
<span class="token function">git</span> push origin :remotebranch   <span class="token comment"># 删除远端指定分支   </span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token punctuation">[</span>--track<span class="token punctuation">]</span> <span class="token builtin class-name">test</span> origin/dev <span class="token comment"># 基于远端dev分支，新建本地test分支[同时设置跟踪]  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="submodule" tabindex="-1"><a class="header-anchor" href="#submodule"><span>submodule</span></a></h2><p>克隆项目同时克隆submodule</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/jaywcjlove/handbook.git <span class="token parameter variable">--depth</span><span class="token operator">=</span><span class="token number">1</span> --recurse-submodules
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>克隆项目，之后再手动克隆 submodule 子项目</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> submodule <span class="token function">add</span> <span class="token parameter variable">--force</span> <span class="token string">&#39;仓库地址&#39;</span> <span class="token string">&#39;路径&#39;</span>
<span class="token comment"># 其中，仓库地址是指子模块仓库地址，路径指将子模块放置在当前工程下的路径。</span>
<span class="token comment"># 注意：路径不能以 / 结尾（会造成修改不生效）、不能是现有工程已有的目录（不能順利 Clone）</span>
<span class="token function">git</span> submodule init <span class="token comment"># 初始化submodule</span>
<span class="token function">git</span> submodule update <span class="token comment"># 更新submodule(必须在根目录执行命令)</span>
<span class="token function">git</span> submodule update <span class="token parameter variable">--init</span> <span class="token parameter variable">--recursive</span>  <span class="token comment"># 下载的工程带有submodule</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当使用<code>git clone</code>下来的工程中带有submodule时，初始的时候，submodule的内容并不会自动下载下来的，此时，只需执行如下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> submodule foreach <span class="token function">git</span> pull  <span class="token comment"># submodule 里有其他的 submodule 一次更新</span>
<span class="token function">git</span> submodule foreach <span class="token function">git</span> pull origin master <span class="token comment"># submodule更新</span>

<span class="token function">git</span> submodule foreach <span class="token parameter variable">--recursive</span> <span class="token function">git</span> submodule init
<span class="token function">git</span> submodule foreach <span class="token parameter variable">--recursive</span> <span class="token function">git</span> submodule update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="删除文件" tabindex="-1"><a class="header-anchor" href="#删除文件"><span>删除文件</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> node_modules/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="remote-1" tabindex="-1"><a class="header-anchor" href="#remote-1"><span>remote</span></a></h2><p>git是一个分布式代码管理工具，所以可以支持多个仓库，在git里，服务器上的仓库在本地称之为remote。个人开发时，多源用的可能不多，但多源其实非常有用。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> origin1 git@github.com:yanhaijing/data.js.git  
<span class="token function">git</span> remote    <span class="token comment"># 显示全部源  </span>
<span class="token function">git</span> remote <span class="token parameter variable">-v</span> <span class="token comment"># 显示全部源+详细信息  </span>
<span class="token function">git</span> remote <span class="token function">rename</span> origin1 origin2 <span class="token comment"># 重命名  </span>
<span class="token function">git</span> remote <span class="token function">rm</span> origin    <span class="token comment"># 删除  </span>
<span class="token function">git</span> remote show origin  <span class="token comment"># 查看指定源的全部信息  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="标签tag" tabindex="-1"><a class="header-anchor" href="#标签tag"><span>标签tag</span></a></h2><p>当开发到一定阶段时，给程序打标签是非常棒的功能。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> tag <span class="token parameter variable">-a</span> v0.1 <span class="token parameter variable">-m</span> <span class="token string">&#39;my version 1.4&#39;</span> <span class="token comment"># 新建带注释标签   </span>
<span class="token function">git</span> push origin <span class="token parameter variable">--tags</span>              <span class="token comment"># 一次性推送所有分支 </span>
<span class="token function">git</span> push origin v1.5                <span class="token comment"># 推送单个tag到origin源上 </span>
<span class="token function">git</span> tag <span class="token parameter variable">-v</span> v1.4.2.1                 <span class="token comment"># 验证标签，验证已经签署的标签</span>
<span class="token function">git</span> show v1.5                       <span class="token comment"># 看到对应的 GPG 签</span>

<span class="token function">git</span> tag        <span class="token comment"># 列出现有标签   </span>
<span class="token function">git</span> tag v0gi.1 <span class="token comment"># 新建标签   </span>
<span class="token function">git</span> checkout tagname   <span class="token comment"># 切换到标签       </span>
<span class="token function">git</span> tag <span class="token parameter variable">-d</span> v0.1 <span class="token comment"># 删除标签   </span>
<span class="token function">git</span> push origin :refs/tags/v0.1 <span class="token comment"># 删除远程标签   </span>
<span class="token function">git</span> pull <span class="token parameter variable">--all</span> <span class="token comment"># 获取远程所有内容包括tag  </span>
<span class="token function">git</span> --git-dir<span class="token operator">=</span><span class="token string">&#39;&lt;绝对地址&gt;/.git&#39;</span> describe <span class="token parameter variable">--tags</span> HEAD <span class="token comment"># 查看本地版本信息  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="日志log" tabindex="-1"><a class="header-anchor" href="#日志log"><span>日志log</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> config format.pretty oneline  <span class="token comment">#显示历史记录时，每个提交的信息只显示一行   </span>
<span class="token function">git</span> config color.ui <span class="token boolean">true</span> <span class="token comment">#彩色的 git 输出   </span>
<span class="token function">git</span> log <span class="token comment">#查看提交日志，从最近的提交开始显示  </span>
<span class="token function">git</span> log <span class="token parameter variable">--reverse</span> <span class="token comment">#查看提交日志，从最远的提交开始显示</span>
<span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline <span class="token comment">#单行显示提交日志   </span>
<span class="token function">git</span> log <span class="token parameter variable">--graph</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline --abbrev-commit   
<span class="token function">git</span> log <span class="token parameter variable">-num</span> <span class="token comment">#显示第几条log（倒数）   </span>
<span class="token function">git</span> reflog <span class="token comment">#查看所有分支的所有操作记录   </span>
<span class="token function">git</span> log <span class="token parameter variable">--since</span><span class="token operator">=</span><span class="token number">1</span>.day <span class="token comment">#一天内的提交；你可以给出各种时间格式，比如说具体的某一天（“2008-01-15”），或者是多久以前（“2 years 1 day 3 minutes ago”）。   </span>
<span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span><span class="token string">&quot;%h - %s&quot;</span> <span class="token parameter variable">--author</span><span class="token operator">=</span>自己的名字 <span class="token comment">#查看自己的日志   </span>
<span class="token function">git</span> log <span class="token parameter variable">-p</span> <span class="token parameter variable">-2</span> <span class="token comment">#展开两次更新显示每次提交的内容差异   </span>
<span class="token function">git</span> log <span class="token parameter variable">--stat</span> <span class="token comment">#要快速浏览其他协作者提交的更新都作了哪些改动   </span>
<span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span>format:<span class="token string">&quot;%h - %an, %ar : %s&quot;</span>#定制要显示的记录格式   
<span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span>format:<span class="token string">&#39;%h : %s&#39;</span> --date-order <span class="token parameter variable">--graph</span> <span class="token comment"># 拓扑顺序展示   </span>
<span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span>format:<span class="token string">&#39;%h : %s - %ad&#39;</span> <span class="token parameter variable">--date</span><span class="token operator">=</span>short <span class="token comment">#日期YYYY-MM-DD显示   </span>
<span class="token function">git</span> log <span class="token operator">&lt;</span>last tag<span class="token operator">&gt;</span> HEAD <span class="token parameter variable">--pretty</span><span class="token operator">=</span>format:%s <span class="token comment"># 只显示commit   </span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> format.pretty <span class="token string">&#39;%h : %s - %ad&#39;</span> <span class="token parameter variable">--date</span><span class="token operator">=</span>short <span class="token comment">#日期YYYY-MM-DD显示 写入全局配置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>选项</th><th>说明</th><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>%H</td><td>提交对象（commit）的完整哈希字串</td><td>%ad</td><td>作者修订日期（可以用 -date= 选项定制格式）</td></tr><tr><td>%h</td><td>提交对象的简短哈希字串</td><td>%ar</td><td>作者修订日期，按多久以前的方式显示</td></tr><tr><td>%T</td><td>树对象（tree）的完整哈希字串</td><td>%cn</td><td>提交者(committer)的名字</td></tr><tr><td>%t</td><td>树对象的简短哈希字串</td><td>%ce</td><td>提交者的电子邮件地址</td></tr><tr><td>%P</td><td>父对象（parent）的完整哈希字串</td><td>%cd</td><td>提交日期</td></tr><tr><td>%p</td><td>父对象的简短哈希字串</td><td>%cr</td><td>提交日期，按多久以前的方式显示</td></tr><tr><td>%an</td><td>作者（author）的名字</td><td>%s</td><td>提交说明</td></tr><tr><td>%ae</td><td>作者的电子邮件地址</td><td>-</td><td>-</td></tr></tbody></table>`,116),b={href:"https://git-scm.com/docs/git-log#_pretty_formats",target:"_blank",rel:"noopener noreferrer"},g=t(`<h2 id="重写历史" tabindex="-1"><a class="header-anchor" href="#重写历史"><span>重写历史</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">--amend</span>    <span class="token comment"># 改变最近一次提交  </span>
<span class="token function">git</span> rebase <span class="token parameter variable">-i</span> HEAD~3  <span class="token comment"># 修改最近三次的提交说明，或者其中任意一次  </span>
<span class="token function">git</span> commit <span class="token parameter variable">--amend</span>    <span class="token comment"># 保存好了，这些指示很明确地告诉了你该干什么  </span>
<span class="token function">git</span> rebase <span class="token parameter variable">--continue</span> <span class="token comment"># 修改提交说明，退出编辑器。  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pick f7f3f6d changed my name a bit
pick 310154e updated README formatting and added blame
pick a5f4a0d added cat-file
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改成</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>pick 310154e updated README formatting and added blame
pick f7f3f6d changed my name a bit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除仓库" tabindex="-1"><a class="header-anchor" href="#删除仓库"><span>删除仓库</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>cd ..
rm -rf repo.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,7),k={href:"https://help.github.com/articles/changing-author-info/",target:"_blank",rel:"noopener noreferrer"},f=t(`<h2 id="其它" tabindex="-1"><a class="header-anchor" href="#其它"><span>其它</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token builtin class-name">help</span> *  <span class="token comment"># 获取命令的帮助信息  </span>
<span class="token function">git</span> status  <span class="token comment"># 获取当前的状态，非常有用，因为git会提示接下来的能做的操作  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="报错问题解决" tabindex="-1"><a class="header-anchor" href="#报错问题解决"><span>报错问题解决</span></a></h2><p><strong>1. <code>git fatal: protocol error: bad line length character: No s</code></strong></p><p>解决办法：更换remote地址为 <code>http/https</code> 的</p><p><strong>2. <code>The requested URL returned error: 403 Forbidden while accessing</code></strong></p><p>解决github push错误的办法：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#vim 编辑器打开 当前项目中的config文件</span>
<span class="token function">vim</span> .git/config

<span class="token comment">#修改</span>
<span class="token punctuation">[</span>remote <span class="token string">&quot;origin&quot;</span><span class="token punctuation">]</span>  
    url <span class="token operator">=</span> https://github.com/jaywcjlove/example.git  

<span class="token comment">#为下面代码</span>
<span class="token punctuation">[</span>remote <span class="token string">&quot;origin&quot;</span><span class="token punctuation">]</span>  
    url <span class="token operator">=</span> https://jaywcjlove@github.com/jaywcjlove/example.git  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. git status 显示中文问题</strong></p><p>在查看状态的时候 git status 如果是中文就显示下面的情况</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">\\</span><span class="token number">344</span><span class="token punctuation">\\</span><span class="token number">272</span><span class="token punctuation">\\</span><span class="token number">247</span><span class="token punctuation">\\</span><span class="token number">345</span><span class="token punctuation">\\</span><span class="token number">223</span><span class="token punctuation">\\</span><span class="token number">201</span><span class="token punctuation">\\</span><span class="token number">351</span><span class="token punctuation">\\</span><span class="token number">234</span><span class="token punctuation">\\</span><span class="token number">200</span><span class="token punctuation">\\</span><span class="token number">346</span><span class="token punctuation">\\</span><span class="token number">261</span><span class="token punctuation">\\</span><span class="token number">202</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解决这个问题方法是：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> core.quotepath <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,14),x={href:"http://git-scm.com/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://try.github.io",target:"_blank",rel:"noopener noreferrer"},y=n("strong",null,"Github 15分钟学习Git",-1),w={href:"http://gitref.org/zh/index.html",target:"_blank",rel:"noopener noreferrer"},L={href:"http://www.mceiba.com/tool/git-cheat-sheet.html",target:"_blank",rel:"noopener noreferrer"},E={href:"http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/",target:"_blank",rel:"noopener noreferrer"},q={href:"http://gitbook.liuhui998.com/index.html",target:"_blank",rel:"noopener noreferrer"},A={href:"http://git-scm.com/book/en/v2",target:"_blank",rel:"noopener noreferrer"},H={href:"http://marklodato.github.io/visual-git-guide/index-zh-cn.html",target:"_blank",rel:"noopener noreferrer"},G={href:"http://rogerdudler.github.io/git-guide/index.zh.html",target:"_blank",rel:"noopener noreferrer"},D={href:"http://pcottle.github.io/learnGitBranching/",target:"_blank",rel:"noopener noreferrer"},T={href:"http://rogerdudler.github.io/git-guide/index.zh.html",target:"_blank",rel:"noopener noreferrer"},j={href:"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000",target:"_blank",rel:"noopener noreferrer"},S={href:"http://www.worldhello.net/gotgithub/",target:"_blank",rel:"noopener noreferrer"},C={href:"http://www.open-open.com/lib/view/open1328069609436.html",target:"_blank",rel:"noopener noreferrer"},R={href:"http://git.oschina.net/progit/",target:"_blank",rel:"noopener noreferrer"},M={href:"https://github.com/blog/2019-how-to-undo-almost-anything-with-git",target:"_blank",rel:"noopener noreferrer"},I={href:"http://www.runoob.com/git/git-tutorial.html",target:"_blank",rel:"noopener noreferrer"},B={href:"https://gold.xitu.io/post/5842f9b861ff4b005889ade6",target:"_blank",rel:"noopener noreferrer"},N={href:"http://www.kancloud.cn/kancloud/igit/46710",target:"_blank",rel:"noopener noreferrer"},O={href:"http://way.oschina.io/2016/12/15/notes/GitAdvance/?utm_source=gank.io&utm_medium=email",target:"_blank",rel:"noopener noreferrer"};function P(J,$){const s=l("ExternalLinkIcon");return c(),o("div",null,[r,n("p",null,[n("a",d,[a("Git常用命令清单"),e(s)])]),m,n("p",null,[n("a",u,[a("Github教程同步fork教程"),e(s)]),a("，"),n("a",v,[a("在Github上同步一个分支(fork)"),e(s)])]),h,n("p",null,[n("a",b,[a("Pretty Formats"),e(s)])]),g,n("p",null,[n("a",k,[a("Github官方教程"),e(s)])]),f,n("ul",null,[n("li",null,[n("a",x,[a("Git官网"),e(s)])]),n("li",null,[n("a",_,[y,e(s)])]),n("li",null,[n("a",w,[a("Git参考手册"),e(s)])]),n("li",null,[n("a",L,[a("Git简明手册"),e(s)])]),n("li",null,[n("a",E,[a("Git Magic"),e(s)])]),n("li",null,[n("a",q,[a("Git Community Book 中文版"),e(s)])]),n("li",null,[n("a",A,[a("Pro Git"),e(s)])]),n("li",null,[n("a",H,[a("图解Git"),e(s)])]),n("li",null,[n("a",G,[a("git-简明指南"),e(s)])]),n("li",null,[n("a",D,[a("learnGitBranching 在线学习工具"),e(s)])]),n("li",null,[n("a",T,[a("初级教程"),e(s)])]),n("li",null,[n("a",j,[a("廖雪峰的Git教程"),e(s)])]),n("li",null,[n("a",S,[a("蒋鑫老师将带你入github的大门"),e(s)])]),n("li",null,[n("a",C,[a("git详解"),e(s)])]),n("li",null,[n("a",R,[a("oschina教程"),e(s)])]),n("li",null,[n("a",M,[a("How to undo (almost) anything with Git撤销一切，汇总各种回滚撤销的场景，加强学习。"),e(s)])]),n("li",null,[n("a",I,[a("Git 教程 | 菜鸟教程runoob.com"),e(s)])]),n("li",null,[n("a",B,[a("Git 本地仓库和裸仓库"),e(s)])]),n("li",null,[n("a",N,[a("沉浸式学 Git"),e(s)])]),n("li",null,[n("a",O,[a("Git进阶用法，主要是rebase高级用法"),e(s)])])])])}const Y=i(p,[["render",P],["__file","git.html.vue"]]),U=JSON.parse('{"path":"/command/linux/git.html","title":"git","lang":"zh-CN","frontmatter":{"description":"git 是目前世界上最先进的分布式版本控制系统 补充说明 git命令 很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。 Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？ 事实...","head":[["meta",{"property":"og:url","content":"https://baymaxcoding.github.io/command/linux/git.html"}],["meta",{"property":"og:site_name","content":"BaymaxCoding"}],["meta",{"property":"og:title","content":"git"}],["meta",{"property":"og:description","content":"git 是目前世界上最先进的分布式版本控制系统 补充说明 git命令 很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。 Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？ 事实..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T04:24:50.000Z"}],["meta",{"property":"article:author","content":"BaymaxCoding"}],["meta",{"property":"article:modified_time","content":"2024-04-12T04:24:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"git\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T04:24:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BaymaxCoding\\",\\"url\\":\\"https://baymaxcoding.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"补充说明","slug":"补充说明","link":"#补充说明","children":[{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"选项","slug":"选项","link":"#选项","children":[]},{"level":3,"title":"例子","slug":"例子","link":"#例子","children":[]}]},{"level":2,"title":"配置","slug":"配置","link":"#配置","children":[]},{"level":2,"title":"修改项目中的个人信息","slug":"修改项目中的个人信息","link":"#修改项目中的个人信息","children":[{"level":3,"title":"配置自动换行","slug":"配置自动换行","link":"#配置自动换行","children":[]}]},{"level":2,"title":"常见使用场景","slug":"常见使用场景","link":"#常见使用场景","children":[{"level":3,"title":"创建SSH密钥","slug":"创建ssh密钥","link":"#创建ssh密钥","children":[]},{"level":3,"title":"多账号ssh配置","slug":"多账号ssh配置","link":"#多账号ssh配置","children":[]},{"level":3,"title":"免密码登录远程服务器","slug":"免密码登录远程服务器","link":"#免密码登录远程服务器","children":[]},{"level":3,"title":"https协议下提交代码免密码","slug":"https协议下提交代码免密码","link":"#https协议下提交代码免密码","children":[]},{"level":3,"title":"文件推向3个git库","slug":"文件推向3个git库","link":"#文件推向3个git库","children":[]},{"level":3,"title":"修改远程仓库地址","slug":"修改远程仓库地址","link":"#修改远程仓库地址","children":[]},{"level":3,"title":"撤销远程记录","slug":"撤销远程记录","link":"#撤销远程记录","children":[]},{"level":3,"title":"放弃本地的文件修改","slug":"放弃本地的文件修改","link":"#放弃本地的文件修改","children":[]},{"level":3,"title":"最简单放弃本地修改内容","slug":"最简单放弃本地修改内容","link":"#最简单放弃本地修改内容","children":[]},{"level":3,"title":"回滚到某个commit提交","slug":"回滚到某个commit提交","link":"#回滚到某个commit提交","children":[]},{"level":3,"title":"回退到某一个版本","slug":"回退到某一个版本","link":"#回退到某一个版本","children":[]},{"level":3,"title":"去掉某个commit","slug":"去掉某个commit","link":"#去掉某个commit","children":[]},{"level":3,"title":"新建一个空分支","slug":"新建一个空分支","link":"#新建一个空分支","children":[]},{"level":3,"title":"合并多个commit","slug":"合并多个commit","link":"#合并多个commit","children":[]},{"level":3,"title":"修改远程Commit记录","slug":"修改远程commit记录","link":"#修改远程commit记录","children":[]},{"level":3,"title":"添加忽略文件","slug":"添加忽略文件","link":"#添加忽略文件","children":[]},{"level":3,"title":"利用commit关闭一个issue","slug":"利用commit关闭一个issue","link":"#利用commit关闭一个issue","children":[]},{"level":3,"title":"同步fork的上游仓库","slug":"同步fork的上游仓库","link":"#同步fork的上游仓库","children":[]},{"level":3,"title":"批量修改历史commit中的名字和邮箱","slug":"批量修改历史commit中的名字和邮箱","link":"#批量修改历史commit中的名字和邮箱","children":[]},{"level":3,"title":"查看某个文件历史","slug":"查看某个文件历史","link":"#查看某个文件历史","children":[]},{"level":3,"title":"打造自己的git命令","slug":"打造自己的git命令","link":"#打造自己的git命令","children":[]},{"level":3,"title":"中文乱码的解决方案","slug":"中文乱码的解决方案","link":"#中文乱码的解决方案","children":[]}]},{"level":2,"title":"新建仓库","slug":"新建仓库","link":"#新建仓库","children":[{"level":3,"title":"init","slug":"init","link":"#init","children":[]},{"level":3,"title":"status","slug":"status","link":"#status","children":[]},{"level":3,"title":"add","slug":"add","link":"#add","children":[]},{"level":3,"title":"commit","slug":"commit","link":"#commit","children":[]},{"level":3,"title":"remote","slug":"remote","link":"#remote","children":[]},{"level":3,"title":"push","slug":"push","link":"#push","children":[]}]},{"level":2,"title":"clone","slug":"clone","link":"#clone","children":[]},{"level":2,"title":"本地","slug":"本地","link":"#本地","children":[{"level":3,"title":"help","slug":"help","link":"#help","children":[]},{"level":3,"title":"add","slug":"add-1","link":"#add-1","children":[]},{"level":3,"title":"rm","slug":"rm","link":"#rm","children":[]},{"level":3,"title":"commit","slug":"commit-1","link":"#commit-1","children":[]},{"level":3,"title":"reset","slug":"reset","link":"#reset","children":[]},{"level":3,"title":"revert","slug":"revert","link":"#revert","children":[]},{"level":3,"title":"checkout","slug":"checkout","link":"#checkout","children":[]},{"level":3,"title":"diff","slug":"diff","link":"#diff","children":[]},{"level":3,"title":"stash","slug":"stash","link":"#stash","children":[]},{"level":3,"title":"merge","slug":"merge","link":"#merge","children":[]},{"level":3,"title":"cherry-pick","slug":"cherry-pick","link":"#cherry-pick","children":[]},{"level":3,"title":"rebase","slug":"rebase","link":"#rebase","children":[]}]},{"level":2,"title":"分支branch","slug":"分支branch","link":"#分支branch","children":[{"level":3,"title":"删除","slug":"删除","link":"#删除","children":[]},{"level":3,"title":"提交","slug":"提交","link":"#提交","children":[]},{"level":3,"title":"拉取","slug":"拉取","link":"#拉取","children":[]},{"level":3,"title":"分支合并","slug":"分支合并","link":"#分支合并","children":[]},{"level":3,"title":"重命名","slug":"重命名","link":"#重命名","children":[]},{"level":3,"title":"查看","slug":"查看","link":"#查看","children":[]},{"level":3,"title":"新建","slug":"新建","link":"#新建","children":[]},{"level":3,"title":"连接","slug":"连接","link":"#连接","children":[]},{"level":3,"title":"分支切换","slug":"分支切换","link":"#分支切换","children":[]}]},{"level":2,"title":"远端","slug":"远端","link":"#远端","children":[]},{"level":2,"title":"submodule","slug":"submodule","link":"#submodule","children":[]},{"level":2,"title":"删除文件","slug":"删除文件","link":"#删除文件","children":[]},{"level":2,"title":"remote","slug":"remote-1","link":"#remote-1","children":[]},{"level":2,"title":"标签tag","slug":"标签tag","link":"#标签tag","children":[]},{"level":2,"title":"日志log","slug":"日志log","link":"#日志log","children":[]},{"level":2,"title":"重写历史","slug":"重写历史","link":"#重写历史","children":[{"level":3,"title":"删除仓库","slug":"删除仓库","link":"#删除仓库","children":[]}]},{"level":2,"title":"其它","slug":"其它","link":"#其它","children":[]},{"level":2,"title":"报错问题解决","slug":"报错问题解决","link":"#报错问题解决","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1712895890000,"updatedTime":1712895890000,"contributors":[{"name":"BaymaxCoding","email":"BRemail2324996822@163.com","commits":1}]},"readingTime":{"minutes":25.5,"words":7651},"filePathRelative":"command/linux/git.md","localizedDate":"2024年4月12日","autoDesc":true}');export{Y as comp,U as data};
