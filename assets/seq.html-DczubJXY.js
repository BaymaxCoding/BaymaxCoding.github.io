import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as n,b as e}from"./app-D3p8wuGf.js";const t={},i=e(`<h1 id="seq" tabindex="-1"><a class="header-anchor" href="#seq"><span>seq</span></a></h1><p>以指定增量从首数开始打印数字到尾数</p><h2 id="补充说明" tabindex="-1"><a class="header-anchor" href="#补充说明"><span>补充说明</span></a></h2><p><strong>seq命令</strong> 用于产生从某个数到另外一个数之间的所有整数。</p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">seq</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span><span class="token punctuation">..</span>. 尾数
<span class="token function">seq</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span><span class="token punctuation">..</span>. 首数 尾数
<span class="token function">seq</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span><span class="token punctuation">..</span>. 首数 增量 尾数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="选项" tabindex="-1"><a class="header-anchor" href="#选项"><span>选项</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>-f, <span class="token parameter variable">--format</span><span class="token operator">=</span>格式        使用printf 样式的浮点格式
-s, <span class="token parameter variable">--separator</span><span class="token operator">=</span>字符串   使用指定字符串分隔数字（默认使用：<span class="token punctuation">\\</span>n）
-w, --equal-width        在列前添加0 使得宽度相同
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h3><p><strong>-f选项：指定格式</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#seq -f&quot;%3g&quot; 9 11</span>
<span class="token number">9</span>
<span class="token number">10</span>
<span class="token number">11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>%</code>后面指定数字的位数 默认是<code>%g</code>，<code>%3g</code>那么数字位数不足部分是空格。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#sed -f&quot;%03g&quot; 9 11</span>
<span class="token comment">#seq -f&quot;str%03g&quot; 9 11</span>
str009
str010
str011
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的话数字位数不足部分是0，<code>%</code>前面制定字符串。</p><p><strong>-w选项：指定输出数字同宽</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">seq</span> <span class="token parameter variable">-w</span> <span class="token number">98</span> <span class="token number">101</span>
098
099
<span class="token number">100</span>
<span class="token number">101</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不能和<code>-f</code>一起用，输出是同宽的。</p><p><strong>-s选项：指定分隔符（默认是回车）</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">seq</span> -s<span class="token string">&quot; &quot;</span> -f<span class="token string">&quot;str%03g&quot;</span> <span class="token number">9</span> <span class="token number">11</span>
str009 str010 str011
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>要指定<code>/t</code>做为分隔符号：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">seq</span> -s<span class="token string">&quot;<span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;/t&quot;</span><span class="token variable">\`</span></span>&quot;</span> <span class="token number">9</span> <span class="token number">11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>指定<code>\\n</code>作为分隔符号：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">seq</span> -s<span class="token string">&quot;<span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span>&quot;</span><span class="token variable">\`</span></span>&quot;</span> <span class="token number">9</span> <span class="token number">11</span>
<span class="token number">19293949596979899910911</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>得到的是个错误结果，不过一般也没有这个必要，它默认的就是回车作为分隔符。</p>`,24),l=[i];function o(c,p){return a(),n("div",null,l)}const u=s(t,[["render",o],["__file","seq.html.vue"]]),m=JSON.parse('{"path":"/command/linux/seq.html","title":"seq","lang":"zh-CN","frontmatter":{"description":"seq 以指定增量从首数开始打印数字到尾数 补充说明 seq命令 用于产生从某个数到另外一个数之间的所有整数。 语法 选项 实例 -f选项：指定格式 %后面指定数字的位数 默认是%g，%3g那么数字位数不足部分是空格。 这样的话数字位数不足部分是0，%前面制定字符串。 -w选项：指定输出数字同宽 不能和-f一起用，输出是同宽的。 -s选项：指定分隔符（...","head":[["meta",{"property":"og:url","content":"https://baymaxcoding.github.io/command/linux/seq.html"}],["meta",{"property":"og:site_name","content":"BaymaxCoding"}],["meta",{"property":"og:title","content":"seq"}],["meta",{"property":"og:description","content":"seq 以指定增量从首数开始打印数字到尾数 补充说明 seq命令 用于产生从某个数到另外一个数之间的所有整数。 语法 选项 实例 -f选项：指定格式 %后面指定数字的位数 默认是%g，%3g那么数字位数不足部分是空格。 这样的话数字位数不足部分是0，%前面制定字符串。 -w选项：指定输出数字同宽 不能和-f一起用，输出是同宽的。 -s选项：指定分隔符（..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T04:24:50.000Z"}],["meta",{"property":"article:author","content":"BaymaxCoding"}],["meta",{"property":"article:modified_time","content":"2024-04-12T04:24:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"seq\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T04:24:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BaymaxCoding\\",\\"url\\":\\"https://baymaxcoding.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"补充说明","slug":"补充说明","link":"#补充说明","children":[{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"选项","slug":"选项","link":"#选项","children":[]},{"level":3,"title":"实例","slug":"实例","link":"#实例","children":[]}]}],"git":{"createdTime":1712895890000,"updatedTime":1712895890000,"contributors":[{"name":"BaymaxCoding","email":"BRemail2324996822@163.com","commits":1}]},"readingTime":{"minutes":1.11,"words":333},"filePathRelative":"command/linux/seq.md","localizedDate":"2024年4月12日","autoDesc":true}');export{u as comp,m as data};
