import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as s,b as n}from"./app-D3p8wuGf.js";const t={},i=n(`<h1 id="base64" tabindex="-1"><a class="header-anchor" href="#base64"><span>base64</span></a></h1><p>base64 编码/解码文件或标准输入输出</p><h3 id="描述" tabindex="-1"><a class="header-anchor" href="#描述"><span>描述</span></a></h3><p>base64将<code>文件</code>或<code>标准输入</code>编码或解码为标准输出;</p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>base64 <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">[</span>FILE<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>-d, <span class="token parameter variable">--decode</span>         <span class="token comment"># 解码</span>
-i, --ignore-garbage <span class="token comment"># 解码时，忽略非字母字符</span>
-w, <span class="token parameter variable">--wrap</span><span class="token operator">=</span>COLS      <span class="token comment"># 在指定的字符数后自动换行(默认为76), 0 为禁用自动换行</span>

<span class="token parameter variable">--help</span>      <span class="token comment"># 显示此帮助说明并退出</span>
<span class="token parameter variable">--version</span>   <span class="token comment"># 输出版本信息并退出</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h3><p>编码字符串</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">printf</span> foo<span class="token operator">|</span>base64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编码文件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>base64 <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解码</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">printf</span> Zm9v<span class="token operator">|</span>base64 <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解码文件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>base64 <span class="token parameter variable">-d</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,17),l=[i];function d(r,o){return e(),s("div",null,l)}const m=a(t,[["render",d],["__file","base64.html.vue"]]),h=JSON.parse('{"path":"/command/linux/base64.html","title":"base64","lang":"zh-CN","frontmatter":{"description":"base64 base64 编码/解码文件或标准输入输出 描述 base64将文件或标准输入编码或解码为标准输出; 语法 参数 实例 编码字符串 编码文件 解码 解码文件","head":[["meta",{"property":"og:url","content":"https://baymaxcoding.github.io/command/linux/base64.html"}],["meta",{"property":"og:site_name","content":"BaymaxCoding"}],["meta",{"property":"og:title","content":"base64"}],["meta",{"property":"og:description","content":"base64 base64 编码/解码文件或标准输入输出 描述 base64将文件或标准输入编码或解码为标准输出; 语法 参数 实例 编码字符串 编码文件 解码 解码文件"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T04:24:50.000Z"}],["meta",{"property":"article:author","content":"BaymaxCoding"}],["meta",{"property":"article:modified_time","content":"2024-04-12T04:24:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"base64\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T04:24:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BaymaxCoding\\",\\"url\\":\\"https://baymaxcoding.github.io/\\"}]}"]]},"headers":[{"level":3,"title":"描述","slug":"描述","link":"#描述","children":[]},{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":3,"title":"实例","slug":"实例","link":"#实例","children":[]}],"git":{"createdTime":1712895890000,"updatedTime":1712895890000,"contributors":[{"name":"BaymaxCoding","email":"BRemail2324996822@163.com","commits":1}]},"readingTime":{"minutes":0.48,"words":145},"filePathRelative":"command/linux/base64.md","localizedDate":"2024年4月12日","autoDesc":true}');export{m as comp,h as data};
