import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as s,f as n,b as t}from"./app-D3p8wuGf.js";const r={},i=t(`<h1 id="arp" tabindex="-1"><a class="header-anchor" href="#arp"><span>arp</span></a></h1><p>arp 命令用于显示和修改 IP 到 MAC 转换表</p><h2 id="补充说明" tabindex="-1"><a class="header-anchor" href="#补充说明"><span>补充说明</span></a></h2><p><strong>arp 命令</strong> 是 Address Resolution Protocol，地址解析协议，是通过解析网络层地址来找寻数据链路层地址的一个网络协议包中极其重要的网络传输协议。而该命令可以显示和修改 arp 协议解析表中的缓冲数据。</p><p>这个核心协议模块实现RFC826中定义的 Address Resolution Protocol [译注：即TCP/IP的第三层到第一层的地址转换协议]，用于在直接相连的网络中换第二层硬件地址和 Ipv4 协议地址之间的转换。 用户除非想对其进行配置，否则一般不会直接操作这个模块。</p><p>实际上，它提供对核心中其它协议的服务。</p><p>用户进程可以使用 packet(7) 的 sockets，收到 ARP 包（译注：一译分组）。 还有一种机制是使用 netlink(7) sockets，在用户空间管理 ARP 缓存的机制。我们也可以通过 ioctl (2) 控制任意 PF_INET socket上的 ARP 表</p><p>ARP 模块维护一个硬件地址到协议地址映射的缓存。这个缓存有大小限制，所以不常用的和旧的记录（Entry）将被垃圾收集器清除（garbage-collected），垃圾收集器永远不能删除标为永久的记录。我们可以使用ioctls直接操纵缓冲， 并且其性状可以用下面定义的 sysctl 调节。</p><p>如果在限定的时间（见下面的sysctl）内，一条现存映射没有肯定反馈时， 则认为相邻层的缓存记录失效。 为了再次向目标发送数据，ARP将首先试着询问本地arp进程 app_solicit 次，获取更新了的 MAC（介质访问控制）地址。 如果失败，并且旧的MAC地址是已知的，则发送 ucast_solicit 次的 unicast probe。如果仍然失败，则将向网络广播一个新的ARP请求,此时要 有待发送数据的队列</p><p>如果 Linux 接到一个地址请求，而且该地址指向 Linux 转发的地址，并且接收接口打开了代理 arp 时，Linux 将自动添加一条非永久的代理 arp 记录；如果存在拒绝到目标的路由，则不添加代理 arp 记录。</p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>arp（选项）（参数）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="选项" tabindex="-1"><a class="header-anchor" href="#选项"><span>选项</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token parameter variable">-a</span> <span class="token comment"># 主机 ：显示 arp 缓冲区的所有条目；</span>
<span class="token parameter variable">-H</span> <span class="token comment"># 地址类型 ：指定 arp 指令使用的地址类型；</span>
<span class="token parameter variable">-d</span> <span class="token comment"># 主机 ：从 arp 缓冲区中删除指定主机的 arp 条目；</span>
<span class="token parameter variable">-D</span> <span class="token comment"># 使用指定接口的硬件地址；</span>
<span class="token parameter variable">-e</span> <span class="token comment"># 以 Linux 的显示风格显示 arp 缓冲区中的条目；</span>
<span class="token parameter variable">-i</span> <span class="token comment"># 接口 ：指定要操作 arp 缓冲区的网络接口；</span>
<span class="token parameter variable">-s</span> <span class="token comment"># 主机 MAC 地址 ：设置指定的主机的 IP 地址与 MAC 地址的静态映射；</span>
<span class="token parameter variable">-n</span> <span class="token comment"># 以数字方式显示 arp 缓冲区中的条目；</span>
<span class="token parameter variable">-v</span> <span class="token comment"># 显示详细的 arp 缓冲区条目，包括缓冲区条目的统计信息；</span>
<span class="token parameter variable">-f</span> <span class="token comment"># 文件 ：设置主机的 IP 地址与 MAC 地址的静态映射。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h3><p>主机：查询 arp 缓冲区中指定主机的 arp 条目。</p><h3 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h3><p>显示arp 缓冲区内容</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># arp -v</span>
Address                  HWtype  HWaddress           Flags Mask            Iface
<span class="token number">192.168</span>.0.134            ether   00:21:5E:C7:4D:88   C                     eth1
<span class="token number">115.238</span>.144.129          ether   <span class="token number">38</span>:22:D6:2F:B2:F1   C                     eth0
Entries: <span class="token number">2</span>      Skipped: <span class="token number">0</span>      Found: <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加静态 arp 映射</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>arp <span class="token parameter variable">-s</span> IP MAC-ADDRESS
arp <span class="token parameter variable">-s</span> <span class="token number">192.168</span>.1.1 00:b1:b2:b3:b4:b5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>删除 arp 缓存条目</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>arp <span class="token parameter variable">-d</span> <span class="token number">192.168</span>.1.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,23);function p(l,o){return e(),s("div",null,[i,n(" Linux 命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ ")])}const m=a(r,[["render",p],["__file","arp.html.vue"]]),u=JSON.parse('{"path":"/command/linux/arp.html","title":"arp","lang":"zh-CN","frontmatter":{"description":"arp arp 命令用于显示和修改 IP 到 MAC 转换表 补充说明 arp 命令 是 Address Resolution Protocol，地址解析协议，是通过解析网络层地址来找寻数据链路层地址的一个网络协议包中极其重要的网络传输协议。而该命令可以显示和修改 arp 协议解析表中的缓冲数据。 这个核心协议模块实现RFC826中定义的 Addres...","head":[["meta",{"property":"og:url","content":"https://baymaxcoding.github.io/command/linux/arp.html"}],["meta",{"property":"og:site_name","content":"BaymaxCoding"}],["meta",{"property":"og:title","content":"arp"}],["meta",{"property":"og:description","content":"arp arp 命令用于显示和修改 IP 到 MAC 转换表 补充说明 arp 命令 是 Address Resolution Protocol，地址解析协议，是通过解析网络层地址来找寻数据链路层地址的一个网络协议包中极其重要的网络传输协议。而该命令可以显示和修改 arp 协议解析表中的缓冲数据。 这个核心协议模块实现RFC826中定义的 Addres..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T04:24:50.000Z"}],["meta",{"property":"article:author","content":"BaymaxCoding"}],["meta",{"property":"article:modified_time","content":"2024-04-12T04:24:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"arp\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T04:24:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BaymaxCoding\\",\\"url\\":\\"https://baymaxcoding.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"补充说明","slug":"补充说明","link":"#补充说明","children":[{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"选项","slug":"选项","link":"#选项","children":[]},{"level":3,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":3,"title":"实例","slug":"实例","link":"#实例","children":[]}]}],"git":{"createdTime":1712895890000,"updatedTime":1712895890000,"contributors":[{"name":"BaymaxCoding","email":"BRemail2324996822@163.com","commits":1}]},"readingTime":{"minutes":2.95,"words":886},"filePathRelative":"command/linux/arp.md","localizedDate":"2024年4月12日","autoDesc":true}');export{m as comp,u as data};
