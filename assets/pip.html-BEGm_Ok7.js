import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as t,c as l,a,d as e,e as p,b as r}from"./app-CHACLx4z.js";const d={},o=r(`<h1 id="pip" tabindex="-1"><a class="header-anchor" href="#pip"><span>pip</span></a></h1><p>Python 编程语言中的包管理器，用于安装和管理第三方 Python 模块</p><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token operator">&lt;</span>命令<span class="token operator">&gt;</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="选项" tabindex="-1"><a class="header-anchor" href="#选项"><span>选项</span></a></h2><p>命令</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">install</span>                     安装包。
download                    下载包。
uninstall                   卸载包。
freeze                      以requirements格式输出已安装的包。
inspect                     检查 Python 环境。
list                        列出已安装的包。
show                        显示有关已安装包的信息。
check                       验证已安装的包是否具有兼容的依赖关系。
config                      管理本地和全局配置。
search                      在 PyPI 搜索包。
cache                       检查和管理 pip 的wheel缓存。
index                       检查从软件包索引中获取的信息。
wheel                       从你的要求构建wheels。
<span class="token builtin class-name">hash</span>                        计算包存档的哈希值。
completion                  用于命令完成的辅助命令。
debug                       显示用于调试的有用信息。
<span class="token builtin class-name">help</span>                        显示命令的帮助信息。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通用选项</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>-h, <span class="token parameter variable">--help</span>                  显示帮助。
<span class="token parameter variable">--debug</span>                     允许未处理的异常传播到主要子例程之外，而不是将其记录到stderr。
<span class="token parameter variable">--isolated</span>                  在隔离模式下运行 pip，忽略环境变量和用户配置。
--require-virtualenv        允许 pip 仅在虚拟环境中运行；否则退出并显示错误。
<span class="token parameter variable">--python</span> <span class="token operator">&lt;</span>python<span class="token operator">&gt;</span>           使用指定的 Python 解释器运行 pip。
-v, <span class="token parameter variable">--verbose</span>               提供更多输出。该选项是可叠加的，最多可使用3次。
-V, <span class="token parameter variable">--version</span>               显示版本并退出。
-q, <span class="token parameter variable">--quiet</span>                 提供更少的输出。该选项是可叠加的，最多可使用3次（对应 WARNING、ERROR 和 CRITICAL 日志级别）。
<span class="token parameter variable">--log</span> <span class="token operator">&lt;</span>path<span class="token operator">&gt;</span>                要附加日志的路径。
--no-input                  禁用输入提示。
--keyring-provider <span class="token operator">&lt;</span>keyring_provider<span class="token operator">&gt;</span>
                            如果允许用户输入，则启用通过 keyring 库进行凭据查找。指定要使用的机制<span class="token punctuation">[</span>disabled, import, subprocess<span class="token punctuation">]</span>。（默认: disabled）
<span class="token parameter variable">--proxy</span> <span class="token operator">&lt;</span>proxy<span class="token operator">&gt;</span>             指定代理，格式为 scheme://<span class="token punctuation">[</span>user:passwd@<span class="token punctuation">]</span>proxy.server:port。
<span class="token parameter variable">--retries</span> <span class="token operator">&lt;</span>retries<span class="token operator">&gt;</span>         每个连接应尝试的最大次数（默认5次）。
<span class="token parameter variable">--timeout</span> <span class="token operator">&lt;</span>sec<span class="token operator">&gt;</span>             设置套接字超时（默认15秒）。
--exists-action <span class="token operator">&lt;</span>action<span class="token operator">&gt;</span>    当路径已经存在时的默认操作：<span class="token punctuation">(</span>s<span class="token punctuation">)</span>切换，<span class="token punctuation">(</span>i<span class="token punctuation">)</span>忽略，<span class="token punctuation">(</span>w<span class="token punctuation">)</span>擦除，<span class="token punctuation">(</span>b<span class="token punctuation">)</span>备份，<span class="token punctuation">(</span>a<span class="token punctuation">)</span>中止。
--trusted-host <span class="token operator">&lt;</span>hostname<span class="token operator">&gt;</span>   将此主机或主机:端口对标记为可信，即使它没有有效或任何 HTTPS。
<span class="token parameter variable">--cert</span> <span class="token operator">&lt;</span>path<span class="token operator">&gt;</span>               PEM编码的CA证书包的路径。如果提供，将覆盖默认值。有关更多信息，请参阅 pip 文档中的 <span class="token string">&#39;SSL证书验证&#39;</span>。
--client-cert <span class="token operator">&lt;</span>path<span class="token operator">&gt;</span>        SSL客户端证书的路径，一个包含私钥和PEM格式的证书的单个文件。
--cache-dir <span class="token operator">&lt;</span>dir<span class="token operator">&gt;</span>           在 <span class="token operator">&lt;</span>dir<span class="token operator">&gt;</span> 中存储缓存数据。
--no-cache-dir              禁用缓存。
--disable-pip-version-check
                            不定期检查 PyPI 是否有可下载的 pip 新版本。与 --no-index 隐含。
--no-color                  抑制有色输出。
--no-python-version-warning
                            对即将不受支持的 Python 沉默弃用警告。
--use-feature <span class="token operator">&lt;</span>feature<span class="token operator">&gt;</span>     启用可能不向后兼容的新功能。
--use-deprecated <span class="token operator">&lt;</span>feature<span class="token operator">&gt;</span>  启用在将来将被删除的已弃用功能。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h3><p>Pip 是 Python 的包管理工具，通常随着 Python 的安装一起安装。确保你的 Python 版本是 3.4 或更高版本。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Ubuntu系统</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> python3-pip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># CentOS</span>
<span class="token function">sudo</span> yum <span class="token function">install</span> python3-pip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要更新 Pip，可以运行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>python <span class="token parameter variable">-m</span> pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>检查 <code>pip</code> 是否已安装</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>确保您使用的是最新版本的 <code>pip</code>，您可以运行以下命令来<strong>升级</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>python <span class="token parameter variable">-m</span> pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="安装包" tabindex="-1"><a class="header-anchor" href="#安装包"><span>安装包</span></a></h2><p>通过 Pip 安装 Python 包非常简单。使用以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> <span class="token operator">&lt;</span>package_name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如，安装一个名为 <code>requests</code> 的包：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> requests
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="卸载包" tabindex="-1"><a class="header-anchor" href="#卸载包"><span>卸载包</span></a></h2><p>要卸载已安装的包，使用以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip uninstall package_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如，卸载 <code>requests</code> 包：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip uninstall requests
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="查看已安装的包" tabindex="-1"><a class="header-anchor" href="#查看已安装的包"><span>查看已安装的包</span></a></h2><p>你可以使用以下命令查看当前环境中已安装的所有包及其版本：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="导出和导入依赖关系" tabindex="-1"><a class="header-anchor" href="#导出和导入依赖关系"><span>导出和导入依赖关系</span></a></h2><p>使用 <code>pip freeze</code> 命令可以将当前环境中的所有包及其版本导出到一个文本文件，通常命名为 <code>requirements.txt</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip freeze <span class="token operator">&gt;</span> requirements.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要在另一个环境中安装相同的依赖，可以使用以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="安装特定版本的包" tabindex="-1"><a class="header-anchor" href="#安装特定版本的包"><span>安装特定版本的包</span></a></h2><p>如果需要安装特定版本的包，可以在包名后面添加版本号：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> <span class="token assign-left variable">package_name</span><span class="token operator">==</span><span class="token number">1.2</span>.3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="搜索包" tabindex="-1"><a class="header-anchor" href="#搜索包"><span>搜索包</span></a></h2><p>要搜索可用的 Python 包，可以使用 <code>pip search</code> 命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip search package_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="安装开发版本" tabindex="-1"><a class="header-anchor" href="#安装开发版本"><span>安装开发版本</span></a></h2><p>有时你可能需要安装包的开发版本。通常，开发版本存储在版本控制系统中（如 GitHub）：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> git+https://github.com/user/repo.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将安装存储库的最新版本。</p><p>以上是一些常用的 Pip 命令，希望这个简要教程能够帮助你更好地使用 Python 包管理工具。</p><h2 id="官网" tabindex="-1"><a class="header-anchor" href="#官网"><span>官网</span></a></h2>`,49),c={href:"https://pypi.org/project/pip/",target:"_blank",rel:"noopener noreferrer"};function u(v,h){const n=i("ExternalLinkIcon");return t(),l("div",null,[o,a("p",null,[e("更多安装使用方法可以访问官网学习："),a("a",c,[e("https://pypi.org/project/pip/"),p(n)])])])}const g=s(d,[["render",u],["__file","pip.html.vue"]]),k=JSON.parse('{"path":"/command/linux/pip.html","title":"pip","lang":"zh-CN","frontmatter":{"description":"pip Python 编程语言中的包管理器，用于安装和管理第三方 Python 模块 语法 选项 命令 通用选项 安装 Pip 是 Python 的包管理工具，通常随着 Python 的安装一起安装。确保你的 Python 版本是 3.4 或更高版本。 如果需要更新 Pip，可以运行以下命令： 检查 pip 是否已安装 确保您使用的是最新版本的 pip...","head":[["meta",{"property":"og:url","content":"https://baymaxcoding.github.io/command/linux/pip.html"}],["meta",{"property":"og:site_name","content":"BaymaxCoding"}],["meta",{"property":"og:title","content":"pip"}],["meta",{"property":"og:description","content":"pip Python 编程语言中的包管理器，用于安装和管理第三方 Python 模块 语法 选项 命令 通用选项 安装 Pip 是 Python 的包管理工具，通常随着 Python 的安装一起安装。确保你的 Python 版本是 3.4 或更高版本。 如果需要更新 Pip，可以运行以下命令： 检查 pip 是否已安装 确保您使用的是最新版本的 pip..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T04:24:50.000Z"}],["meta",{"property":"article:author","content":"BaymaxCoding"}],["meta",{"property":"article:modified_time","content":"2024-04-12T04:24:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"pip\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T04:24:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BaymaxCoding\\",\\"url\\":\\"https://baymaxcoding.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":2,"title":"选项","slug":"选项","link":"#选项","children":[{"level":3,"title":"安装","slug":"安装","link":"#安装","children":[]}]},{"level":2,"title":"安装包","slug":"安装包","link":"#安装包","children":[]},{"level":2,"title":"卸载包","slug":"卸载包","link":"#卸载包","children":[]},{"level":2,"title":"查看已安装的包","slug":"查看已安装的包","link":"#查看已安装的包","children":[]},{"level":2,"title":"导出和导入依赖关系","slug":"导出和导入依赖关系","link":"#导出和导入依赖关系","children":[]},{"level":2,"title":"安装特定版本的包","slug":"安装特定版本的包","link":"#安装特定版本的包","children":[]},{"level":2,"title":"搜索包","slug":"搜索包","link":"#搜索包","children":[]},{"level":2,"title":"安装开发版本","slug":"安装开发版本","link":"#安装开发版本","children":[]},{"level":2,"title":"官网","slug":"官网","link":"#官网","children":[]}],"git":{"createdTime":1712895890000,"updatedTime":1712895890000,"contributors":[{"name":"BaymaxCoding","email":"BRemail2324996822@163.com","commits":1}]},"readingTime":{"minutes":3.94,"words":1182},"filePathRelative":"command/linux/pip.md","localizedDate":"2024年4月12日","autoDesc":true}');export{g as comp,k as data};
