import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,b as e}from"./app-DOGW-9XX.js";const t={},p=e(`<h1 id="ltrace" tabindex="-1"><a class="header-anchor" href="#ltrace"><span>ltrace</span></a></h1><p>用来跟踪进程调用库函数的情况</p><h2 id="补充说明" tabindex="-1"><a class="header-anchor" href="#补充说明"><span>补充说明</span></a></h2><p><strong>ltrace命令</strong> 是用来跟踪进程调用库函数的情况。</p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ltrace <span class="token punctuation">[</span>option <span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token punctuation">[</span>command <span class="token punctuation">[</span>arg <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="选项" tabindex="-1"><a class="header-anchor" href="#选项"><span>选项</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token parameter variable">-a</span> 对齐具体某个列的返回值。
<span class="token parameter variable">-c</span> 计算时间和调用，并在程序退出时打印摘要。
<span class="token parameter variable">-C</span> 解码低级别名称（内核级）为用户级名称。
<span class="token parameter variable">-d</span> 打印调试信息。
<span class="token parameter variable">-e</span> 改变跟踪的事件。
<span class="token parameter variable">-f</span> 跟踪子进程。
<span class="token parameter variable">-h</span> 打印帮助信息。
<span class="token parameter variable">-i</span> 打印指令指针，当库调用时。
<span class="token parameter variable">-l</span> 只打印某个库中的调用。
<span class="token parameter variable">-L</span> 不打印库调用。
-n, <span class="token parameter variable">--indent</span><span class="token operator">=</span>NR 对每个调用级别嵌套以NR个空格进行缩进输出。
-o, <span class="token parameter variable">--output</span><span class="token operator">=</span>file 把输出定向到文件。
<span class="token parameter variable">-p</span> PID 附着在值为PID的进程号上进行ltrace。
<span class="token parameter variable">-r</span> 打印相对时间戳。
<span class="token parameter variable">-s</span> STRLEN 设置打印的字符串最大长度。
<span class="token parameter variable">-S</span> 显示系统调用。
-t, -tt, <span class="token parameter variable">-ttt</span> 打印绝对时间戳。
<span class="token parameter variable">-T</span> 输出每个调用过程的时间开销。
<span class="token parameter variable">-u</span> USERNAME 使用某个用户id或组ID来运行命令。
-V, <span class="token parameter variable">--version</span> 打印版本信息，然后退出。
<span class="token parameter variable">-x</span> NAME treat the global NAME like a library subroutine.（求翻译）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h3><p>最基本应用，不带任何参数：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>guest@localhost tmp<span class="token punctuation">]</span>$ ltrace ./a.out
__libc_start_main<span class="token punctuation">(</span>0x80484aa, <span class="token number">1</span>, 0xbfc07744, 0x8048550, 0x8048540 <span class="token operator">&lt;</span>unfinished <span class="token punctuation">..</span>.<span class="token operator">&gt;</span>
printf<span class="token punctuation">(</span><span class="token string">&quot;no1:%d <span class="token entity" title="\\t">\\t</span> no2:%d <span class="token entity" title="\\t">\\t</span> diff:%d<span class="token entity" title="\\n">\\n</span>&quot;</span>, <span class="token number">10</span>, <span class="token number">6</span>, 4no1:10 no2:6 diff:4 <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">24</span>
printf<span class="token punctuation">(</span><span class="token string">&quot;no1:%d <span class="token entity" title="\\t">\\t</span> no2:%d <span class="token entity" title="\\t">\\t</span> diff:%d<span class="token entity" title="\\n">\\n</span>&quot;</span>, <span class="token number">9</span>, <span class="token number">7</span>, 2no1:9 no2:7 diff:2 <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">23</span>
printf<span class="token punctuation">(</span><span class="token string">&quot;no1:%d <span class="token entity" title="\\t">\\t</span> no2:%d <span class="token entity" title="\\t">\\t</span> diff:%d<span class="token entity" title="\\n">\\n</span>&quot;</span>, <span class="token number">8</span>, <span class="token number">8</span>, 0no1:8 no2:8 diff:0 <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">23</span>
--- SIGFPE <span class="token punctuation">(</span>Floating point exception<span class="token punctuation">)</span> ---
+++ killed by SIGFPE +++
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出调用时间开销：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>guest@localhost tmp<span class="token punctuation">]</span>$ ltrace <span class="token parameter variable">-T</span> ./a.out
__libc_start_main<span class="token punctuation">(</span>0x80484aa, <span class="token number">1</span>, 0xbf81d394, 0x8048550, 0x8048540 <span class="token operator">&lt;</span>unfinished <span class="token punctuation">..</span>.<span class="token operator">&gt;</span>
printf<span class="token punctuation">(</span><span class="token string">&quot;no1:%d <span class="token entity" title="\\t">\\t</span> no2:%d <span class="token entity" title="\\t">\\t</span> diff:%d<span class="token entity" title="\\n">\\n</span>&quot;</span>, <span class="token number">10</span>, <span class="token number">6</span>, 4no1:10 no2:6 diff:4 <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">24</span> <span class="token operator">&lt;</span><span class="token number">0.00097</span><span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>
printf<span class="token punctuation">(</span><span class="token string">&quot;no1:%d <span class="token entity" title="\\t">\\t</span> no2:%d <span class="token entity" title="\\t">\\t</span> diff:%d<span class="token entity" title="\\n">\\n</span>&quot;</span>, <span class="token number">9</span>, <span class="token number">7</span>, 2no1:9 no2:7 diff:2 <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">23</span> <span class="token operator">&lt;</span><span class="token number">0.00015</span><span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span>
printf<span class="token punctuation">(</span><span class="token string">&quot;no1:%d <span class="token entity" title="\\t">\\t</span> no2:%d <span class="token entity" title="\\t">\\t</span> diff:%d<span class="token entity" title="\\n">\\n</span>&quot;</span>, <span class="token number">8</span>, <span class="token number">8</span>, 0no1:8 no2:8 diff:0 <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">23</span> <span class="token operator">&lt;</span><span class="token number">0.00015</span><span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>
--- SIGFPE <span class="token punctuation">(</span>Floating point exception<span class="token punctuation">)</span> ---
+++ killed by SIGFPE +++
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显示系统调用：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>guest@localhost tmp<span class="token punctuation">]</span>$ ltrace <span class="token parameter variable">-S</span> ./a.out
SYS_brk<span class="token punctuation">(</span>NULL<span class="token punctuation">)</span> <span class="token operator">=</span> 0x9e20000
SYS_access<span class="token punctuation">(</span>0xa4710f, <span class="token number">4</span>, 0xa4afc0, <span class="token number">0</span>, 0xa4b644<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
SYS_open<span class="token punctuation">(</span><span class="token string">&quot;/etc/ld.so.preload&quot;</span>, <span class="token number">0</span>, 02<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span>
SYS_fstat64<span class="token punctuation">(</span><span class="token number">3</span>, 0xbfbd7a94, 0xa4afc0, -1, <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
SYS_mmap2<span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">17</span>, <span class="token number">3</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> 0xb7f2a000
SYS_close<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
SYS_open<span class="token punctuation">(</span><span class="token string">&quot;/lib/libcwait.so&quot;</span>, <span class="token number">0</span>, 00<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span>
SYS_read<span class="token punctuation">(</span><span class="token number">3</span>, <span class="token string">&quot;<span class="token entity" title="\\177">\\177</span>ELF<span class="token entity" title="\\001">\\001</span><span class="token entity" title="\\001">\\001</span><span class="token entity" title="\\001">\\001</span>&quot;</span>, <span class="token number">512</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">512</span>
SYS_fstat64<span class="token punctuation">(</span><span class="token number">3</span>, 0xbfbd76fc, 0xa4afc0, <span class="token number">4</span>, 0xa4b658<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
SYS_mmap2<span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">4096</span>, <span class="token number">3</span>, <span class="token number">34</span>, -1<span class="token punctuation">)</span> <span class="token operator">=</span> 0xb7f29000
SYS_mmap2<span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">5544</span>, <span class="token number">5</span>, <span class="token number">2050</span>, <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> 0x423000
SYS_mmap2<span class="token punctuation">(</span>0x424000, <span class="token number">4096</span>, <span class="token number">3</span>, <span class="token number">2066</span>, <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> 0x424000
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.省去若干行
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),l=[p];function o(i,c){return a(),s("div",null,l)}const d=n(t,[["render",o],["__file","ltrace.html.vue"]]),k=JSON.parse('{"path":"/command/linux/ltrace.html","title":"ltrace","lang":"zh-CN","frontmatter":{"description":"ltrace 用来跟踪进程调用库函数的情况 补充说明 ltrace命令 是用来跟踪进程调用库函数的情况。 语法 选项 实例 最基本应用，不带任何参数： 输出调用时间开销： 显示系统调用：","head":[["meta",{"property":"og:url","content":"https://baymaxcoding.github.io/command/linux/ltrace.html"}],["meta",{"property":"og:site_name","content":"BaymaxCoding"}],["meta",{"property":"og:title","content":"ltrace"}],["meta",{"property":"og:description","content":"ltrace 用来跟踪进程调用库函数的情况 补充说明 ltrace命令 是用来跟踪进程调用库函数的情况。 语法 选项 实例 最基本应用，不带任何参数： 输出调用时间开销： 显示系统调用："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T04:24:50.000Z"}],["meta",{"property":"article:author","content":"BaymaxCoding"}],["meta",{"property":"article:modified_time","content":"2024-04-12T04:24:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ltrace\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T04:24:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BaymaxCoding\\",\\"url\\":\\"https://baymaxcoding.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"补充说明","slug":"补充说明","link":"#补充说明","children":[{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"选项","slug":"选项","link":"#选项","children":[]},{"level":3,"title":"实例","slug":"实例","link":"#实例","children":[]}]}],"git":{"createdTime":1712895890000,"updatedTime":1712895890000,"contributors":[{"name":"BaymaxCoding","email":"BRemail2324996822@163.com","commits":1}]},"readingTime":{"minutes":1.9,"words":570},"filePathRelative":"command/linux/ltrace.md","localizedDate":"2024年4月12日","autoDesc":true}');export{d as comp,k as data};
