import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,o as i,c as l,a as s,d as t,e as c,b as o}from"./app-DOGW-9XX.js";const d={},r=o(`<h1 id="fishshell" tabindex="-1"><a class="header-anchor" href="#fishshell"><span>fishshell</span></a></h1><p>比 bash 更好用的 shell</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Ubuntu 和 Debian 的安装方法。</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> fish
<span class="token comment"># Mac 的安装方法。</span>
brew <span class="token function">install</span> fish
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="启动与帮助" tabindex="-1"><a class="header-anchor" href="#启动与帮助"><span>启动与帮助</span></a></h2><p>由于 <code>Fish</code> 的语法与 <code>Bash</code> 有很大差异，<code>Bash</code> 脚本一般不兼容。因此，建议不要将 <code>Fish</code> 设为默认 <code>Shell</code>，而是每次手动启动它。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 安装完成后，就可以启动 Fish。</span>
$ fish
<span class="token comment"># 使用过程中，如果需要帮助，可以输入 help 命令</span>
$ <span class="token builtin class-name">help</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="彩色显示" tabindex="-1"><a class="header-anchor" href="#彩色显示"><span>彩色显示</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 无效命令为红色</span>
$ mkd
<span class="token comment"># 有效命令为蓝色</span>
$ <span class="token function">mkdir</span>
<span class="token comment"># 有效路径会有下划线。如果没有下划线，你就知道这个路径不存在。</span>
$ <span class="token function">cat</span> ~/somefi 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自动建议" tabindex="-1"><a class="header-anchor" href="#自动建议"><span>自动建议</span></a></h2><p>Fish 会自动在光标后面给出建议，表示可能的选项，颜色为灰色。如果采纳建议，可以按下 <code>→</code> 或 <code>Control + F</code> 。如果只采纳一部分，可以按下 <code>Alt + →</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ /bin/hostname <span class="token comment"># 命令建议</span>
$ <span class="token function">grep</span> --ignore-case <span class="token comment"># 参数建议</span>
$ <span class="token function">ls</span> node_modules <span class="token comment"># 路径建议</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自动补全" tabindex="-1"><a class="header-anchor" href="#自动补全"><span>自动补全</span></a></h2><p>输入命令时，<code>Fish</code> 会自动显示匹配的上一条历史记录。如果没有匹配的历史记录，<code>Fish</code> 会猜测可能的结果，自动补全各种输入。比如，输入 <code>pyt</code> 再按下 <code>Tab</code> ，就会自动补全为 <code>python</code> 命令。</p><p><code>Fish</code> 还可以自动补全 <code>Git</code> 分支。</p><h2 id="脚本语法" tabindex="-1"><a class="header-anchor" href="#脚本语法"><span>脚本语法</span></a></h2><h3 id="if-语句" tabindex="-1"><a class="header-anchor" href="#if-语句"><span>if 语句</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token function">grep</span> fish /etc/shells
    <span class="token builtin class-name">echo</span> Found fish
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token function">grep</span> <span class="token function">bash</span> /etc/shells
    <span class="token builtin class-name">echo</span> Found <span class="token function">bash</span>
<span class="token keyword">else</span>
    <span class="token builtin class-name">echo</span> Got nothing
end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="switch-语句" tabindex="-1"><a class="header-anchor" href="#switch-语句"><span>switch 语句</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>switch <span class="token punctuation">(</span>uname<span class="token punctuation">)</span>
<span class="token keyword">case</span> Linux
    <span class="token builtin class-name">echo</span> Hi Tux<span class="token operator">!</span>
<span class="token keyword">case</span> Darwin
    <span class="token builtin class-name">echo</span> Hi Hexley<span class="token operator">!</span>
<span class="token keyword">case</span> FreeBSD NetBSD DragonFly
    <span class="token builtin class-name">echo</span> Hi Beastie<span class="token operator">!</span>
<span class="token keyword">case</span> <span class="token string">&#39;*&#39;</span>
    <span class="token builtin class-name">echo</span> Hi, stranger<span class="token operator">!</span>
end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="while-循环" tabindex="-1"><a class="header-anchor" href="#while-循环"><span>while 循环</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">while</span> <span class="token boolean">true</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;Loop forever&quot;</span>
end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for-循环" tabindex="-1"><a class="header-anchor" href="#for-循环"><span>for 循环</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> *.txt
    <span class="token function">cp</span> <span class="token variable">$file</span> <span class="token variable">$file</span>.bak
end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h3><p><code>Fish</code> 的函数用来封装命令，或者为现有的命令起别名。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">function</span> ll
    <span class="token function">ls</span> <span class="token parameter variable">-lhG</span> <span class="token variable">$argv</span>
end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码定义了一个 <code>ll</code> 函数。命令行执行这个函数以后，就可以用 <code>ll</code> 命令替代 <code>ls -lhG</code>。其中，变量 <code>$argv</code> 表示函数的参数。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">function</span> <span class="token function">ls</span>
    <span class="token builtin class-name">command</span> <span class="token function">ls</span> <span class="token parameter variable">-hG</span> <span class="token variable">$argv</span>
end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码重新定义 <code>ls</code> 命令。注意，函数体内的 <code>ls</code> 之前，要加上 <code>command</code>，否则会因为无限循环而报错。</p><h3 id="提示符" tabindex="-1"><a class="header-anchor" href="#提示符"><span>提示符</span></a></h3><p><code>fish_prompt</code> 函数用于定义命令行提示符（prompt）。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">function</span> fish_prompt
  set_color purple
  <span class="token function">date</span> <span class="token string">&quot;+%m/%d/%y&quot;</span>
  set_color FF0
  <span class="token builtin class-name">echo</span> <span class="token punctuation">(</span>pwd<span class="token punctuation">)</span> <span class="token string">&#39;&gt;&#39;</span>
  set_color normal
end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上面的函数以后，你的命令行提示符就会变成下面这样。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>02/06/13
/home/tutorial &gt; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h2><p>Fish 的配置文件是 <code>~/.config/fish/config.fish</code>，每次 <code>Fish</code> 启动，就会自动加载这个文件。Fish 还提供 Web 界面配置该文件。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ fish_config <span class="token comment"># 浏览器打开 Web 界面配置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Running Commands: 兼容 bash 等shell的命令执行方式<br> Getting Help: <code>help/man cmd -&gt; browser/terminal</code><br> Syntax Highlighting: 实时检查命令是否正确<br> Wildcards: 支持缩写 <code>*</code> 递归 匹配<br> Pipes and Redirections: 使用 <code>^</code> 代表 stderr<br> Autosuggestions: 自动建议, 可以使用 <code>Ctrl-f / -&gt;</code> 来补全<br> Tab Completions: 更强大的 tab 补全<br> Variables: 使用 set 设置<br> Exit Status: 使用 <code>echo $status</code> 替代 <code>$?</code><br> Exports (Shell Variables)<br> Lists: all variables in fish are really lists<br> Command Substitutions: 使用 <code>(cmd)</code> 来执行命令, 而不是 反引号、<code>$()</code><br> Combiners (And, Or, Not): 不支持使用符合来表示逻辑运算<br> Functions：使用 <code>$argv</code> 替代 <code>$1</code><br> Conditionals (If, Else, Switch) / Functions / Loops: 更人性化的写法(参考 py)<br> Prompt: <code>function fish_prompt</code> 实现<br> Startup (Where&#39;s .bashrc?): <code>~/.config/fish/config.fish</code>，更好的方式是 autoloading-function、universal-variables<br> Autoloading Functions: <code> ~/.config/fish/functions/.</code><br> Universal Variables：a variable whose value is shared across all instances of fish</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> name <span class="token string">&#39;czl&#39;</span> <span class="token comment"># 设置变量，替代 name=czl</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$name</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$status</span> <span class="token comment"># exit status，替代 $?</span>
<span class="token function">env</span> <span class="token comment"># 环境变量</span>
<span class="token builtin class-name">set</span> <span class="token parameter variable">-x</span> MyVariable SomeValue <span class="token comment"># 替代 export</span>
<span class="token builtin class-name">set</span> <span class="token parameter variable">-e</span> MyVariable
<span class="token builtin class-name">set</span> <span class="token environment constant">PATH</span> <span class="token environment constant">$PATH</span> /usr/local/bin <span class="token comment"># 使用 lists 记录 PATH</span>
<span class="token builtin class-name">set</span> <span class="token parameter variable">-U</span> fish_user_paths /usr/local/bin <span class="token variable">$fish_user_paths</span> <span class="token comment"># 永久生效</span>
<span class="token function">touch</span> <span class="token string">&quot;testing_&quot;</span><span class="token punctuation">(</span>date +%s<span class="token punctuation">)</span><span class="token string">&quot;.txt&quot;</span> <span class="token comment"># command subtitution，替代 \`date +%s\`</span>
<span class="token function">cp</span> file.txt file.txt.bak<span class="token punctuation">;</span> and <span class="token builtin class-name">echo</span> <span class="token string">&#39;back success&#39;</span><span class="token punctuation">;</span> or <span class="token builtin class-name">echo</span> <span class="token string">&#39;back fail&#39;</span> <span class="token comment"># combiner</span>
functions <span class="token comment"># 列出 fish 下定义的函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,41),p={href:"http://fishshell.com",target:"_blank",rel:"noopener noreferrer"};function h(u,m){const n=a("ExternalLinkIcon");return i(),l("div",null,[r,s("ul",null,[s("li",null,[s("a",p,[t("fish-shell官网"),c(n)])])])])}const k=e(d,[["render",h],["__file","fishshell.html.vue"]]),g=JSON.parse('{"path":"/command/linux/fishshell.html","title":"fishshell","lang":"zh-CN","frontmatter":{"description":"fishshell 比 bash 更好用的 shell 安装 启动与帮助 由于 Fish 的语法与 Bash 有很大差异，Bash 脚本一般不兼容。因此，建议不要将 Fish 设为默认 Shell，而是每次手动启动它。 彩色显示 自动建议 Fish 会自动在光标后面给出建议，表示可能的选项，颜色为灰色。如果采纳建议，可以按下 → 或 Control +...","head":[["meta",{"property":"og:url","content":"https://baymaxcoding.github.io/command/linux/fishshell.html"}],["meta",{"property":"og:site_name","content":"BaymaxCoding"}],["meta",{"property":"og:title","content":"fishshell"}],["meta",{"property":"og:description","content":"fishshell 比 bash 更好用的 shell 安装 启动与帮助 由于 Fish 的语法与 Bash 有很大差异，Bash 脚本一般不兼容。因此，建议不要将 Fish 设为默认 Shell，而是每次手动启动它。 彩色显示 自动建议 Fish 会自动在光标后面给出建议，表示可能的选项，颜色为灰色。如果采纳建议，可以按下 → 或 Control +..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T04:24:50.000Z"}],["meta",{"property":"article:author","content":"BaymaxCoding"}],["meta",{"property":"article:modified_time","content":"2024-04-12T04:24:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"fishshell\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T04:24:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BaymaxCoding\\",\\"url\\":\\"https://baymaxcoding.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"启动与帮助","slug":"启动与帮助","link":"#启动与帮助","children":[]},{"level":2,"title":"彩色显示","slug":"彩色显示","link":"#彩色显示","children":[]},{"level":2,"title":"自动建议","slug":"自动建议","link":"#自动建议","children":[]},{"level":2,"title":"自动补全","slug":"自动补全","link":"#自动补全","children":[]},{"level":2,"title":"脚本语法","slug":"脚本语法","link":"#脚本语法","children":[{"level":3,"title":"if 语句","slug":"if-语句","link":"#if-语句","children":[]},{"level":3,"title":"switch 语句","slug":"switch-语句","link":"#switch-语句","children":[]},{"level":3,"title":"while 循环","slug":"while-循环","link":"#while-循环","children":[]},{"level":3,"title":"for 循环","slug":"for-循环","link":"#for-循环","children":[]},{"level":3,"title":"函数","slug":"函数","link":"#函数","children":[]},{"level":3,"title":"提示符","slug":"提示符","link":"#提示符","children":[]}]},{"level":2,"title":"配置","slug":"配置","link":"#配置","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1712895890000,"updatedTime":1712895890000,"contributors":[{"name":"BaymaxCoding","email":"BRemail2324996822@163.com","commits":1}]},"readingTime":{"minutes":3.06,"words":918},"filePathRelative":"command/linux/fishshell.md","localizedDate":"2024年4月12日","autoDesc":true}');export{k as comp,g as data};
