import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,b as n}from"./app-CHACLx4z.js";const t={},i=n(`<h1 id="lftp" tabindex="-1"><a class="header-anchor" href="#lftp"><span>lftp</span></a></h1><p>优秀的文件客户端程序</p><h2 id="补充说明" tabindex="-1"><a class="header-anchor" href="#补充说明"><span>补充说明</span></a></h2><p><strong>lftp命令</strong> 是一款优秀的文件客户端程序，它支持ftp、SETP、HTTP和FTPs等多种文件传输协议。lftp支持tab自动补全，记不得命令双击tab键，就可以看到可能的选项了。</p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>lftp<span class="token punctuation">(</span>选项<span class="token punctuation">)</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="选项" tabindex="-1"><a class="header-anchor" href="#选项"><span>选项</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>-f：指定lftp指令要执行的脚本文件；
-c：执行指定的命令后退出；
--help：显示帮助信息；
--version：显示指令的版本号。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h3><p>站点：要访问的站点的ip地址或者域名。</p><h3 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h3><p><strong>登录ftp</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>lftp 用户名:密码@ftp地址:传送端口（默认21）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以先不带用户名登录，然后在接口界面下用login命令来用指定账号登录，密码不显示。</p><p><strong>查看文件与改变目录</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ls</span>
<span class="token builtin class-name">cd</span> 对应ftp目录
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>下载</strong></p><p>get当然是可以的，还可以：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mget <span class="token parameter variable">-c</span> *.pdf    <span class="token comment">#把所有的pdf文件以允许断点续传的方式下载。</span>
mirror aaa/      <span class="token comment">#将aaa目录整个的下载下来，子目录也会自动复制。</span>
pget <span class="token parameter variable">-c</span> <span class="token parameter variable">-n</span> <span class="token number">10</span> file.dat   <span class="token comment">#以最多10个线程以允许断点续传的方式下载file.dat，可以通过设置pget:default-n的值而使用默认值。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>上传</strong></p><p>同样的put、mput都是对文件的操作，和下载类似。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mirror <span class="token parameter variable">-R</span> 本地目录名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将本地目录以迭代（包括子目录）的方式反向上传到ftp site。</p><p><strong>模式设置</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> ftp:charset gbk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>远程ftp site用gbk编码，对应的要设置为utf8,只要替换gbk为utf8即可。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> file:charset utf8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>本地的charset设定为utf8,如果你是gbk，相应改掉。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> ftp:passive-mode <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用被动模式登录，有些site要求必须用被动模式或者主动模式才可以登录，这个开关就是设置这个的。0代表不用被动模式。</p><p><strong>书签</strong></p><p>其实命令行也可以有书签，在lftp终端提示符下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>bookmark <span class="token function">add</span> ustc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>就可以把当前正在浏览的ftp site用ustc作为标签储存起来。以后在shell终端下，直接<code>lftp ustc</code>就可以自动填好用户名和密码，进入对应的目录了。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>bookmark edit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>会调用编辑器手动修改书签。当然，也可以看到，这个书签其实就是个简单的文本文件。密码，用户名都可以看到。</p><p><strong>配置文件</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">vim</span> /etc/lftp.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一般，我会添加这几行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> ftp:charset gbk
<span class="token builtin class-name">set</span> file:charset utf8
<span class="token builtin class-name">set</span> pget:default-n <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，就不用每次进入都要打命令了。其他的set可以自己tab然后help来看。</p>`,41),l=[i];function d(p,r){return a(),s("div",null,l)}const u=e(t,[["render",d],["__file","lftp.html.vue"]]),m=JSON.parse('{"path":"/command/linux/lftp.html","title":"lftp","lang":"zh-CN","frontmatter":{"description":"lftp 优秀的文件客户端程序 补充说明 lftp命令 是一款优秀的文件客户端程序，它支持ftp、SETP、HTTP和FTPs等多种文件传输协议。lftp支持tab自动补全，记不得命令双击tab键，就可以看到可能的选项了。 语法 选项 参数 站点：要访问的站点的ip地址或者域名。 实例 登录ftp 也可以先不带用户名登录，然后在接口界面下用login命...","head":[["meta",{"property":"og:url","content":"https://baymaxcoding.github.io/command/linux/lftp.html"}],["meta",{"property":"og:site_name","content":"BaymaxCoding"}],["meta",{"property":"og:title","content":"lftp"}],["meta",{"property":"og:description","content":"lftp 优秀的文件客户端程序 补充说明 lftp命令 是一款优秀的文件客户端程序，它支持ftp、SETP、HTTP和FTPs等多种文件传输协议。lftp支持tab自动补全，记不得命令双击tab键，就可以看到可能的选项了。 语法 选项 参数 站点：要访问的站点的ip地址或者域名。 实例 登录ftp 也可以先不带用户名登录，然后在接口界面下用login命..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T04:24:50.000Z"}],["meta",{"property":"article:author","content":"BaymaxCoding"}],["meta",{"property":"article:modified_time","content":"2024-04-12T04:24:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"lftp\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T04:24:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BaymaxCoding\\",\\"url\\":\\"https://baymaxcoding.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"补充说明","slug":"补充说明","link":"#补充说明","children":[{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"选项","slug":"选项","link":"#选项","children":[]},{"level":3,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":3,"title":"实例","slug":"实例","link":"#实例","children":[]}]}],"git":{"createdTime":1712895890000,"updatedTime":1712895890000,"contributors":[{"name":"BaymaxCoding","email":"BRemail2324996822@163.com","commits":1}]},"readingTime":{"minutes":2.24,"words":671},"filePathRelative":"command/linux/lftp.md","localizedDate":"2024年4月12日","autoDesc":true}');export{u as comp,m as data};
