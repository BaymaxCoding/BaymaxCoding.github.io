import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as i,c as l,a,d as s,e,b as r}from"./app-DOGW-9XX.js";const c={},o=r(`<h3 id="平面转换-2d转换" tabindex="-1"><a class="header-anchor" href="#平面转换-2d转换"><span>平面转换-2D转换</span></a></h3><p>为元素添加动态效果，配合过渡使用</p><p>改变盒子在平面内的形态（位移，旋转，缩放，倾斜）</p><p>transform：</p><h4 id="属性-平移" tabindex="-1"><a class="header-anchor" href="#属性-平移"><span>属性-平移</span></a></h4><p>translate（x移动距离,y移动距离）</p><p>距离可写像素，百分比（参照盒子自身的尺寸），正负值，</p><p>只写一个值的时候沿着x轴移动， 也可以使用translatex（）或者translatey（）</p><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-27_18-32-46.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="属性-旋转" tabindex="-1"><a class="header-anchor" href="#属性-旋转"><span>属性-旋转</span></a></h4><p>rotate（旋转角度deg） deg为单位</p><p>正负值为顺时针或者逆时针</p><h4 id="原点变换-缩放-旋转" tabindex="-1"><a class="header-anchor" href="#原点变换-缩放-旋转"><span>原点变换（缩放，旋转）</span></a></h4><p>默认旋转原点是盒子的中心通过transform-origin ：x y 改变原点位置常用就是方位名词，也可以取像素、百分比，谁转在谁身上加属性，比如按盒子底部中间去旋转 属性就是 center bottom</p><h4 id="属性-多重转换" tabindex="-1"><a class="header-anchor" href="#属性-多重转换"><span>属性-多重转换</span></a></h4><p>也就是transform的复合属性 ，先平移，再旋转</p><p>transform: translate(800px) rotate(360deg)</p><p>注意1，旋转会改变坐标轴向，也就是x轴会随着旋转的度数转一圈，如果此时复合属性中先旋转后平移的话就会造成，x轴在转，同时也在平移造成盒子由内到外的旋转，因为多重转换以第一个属性的轴为准，所以一般涉及平移和旋转的操作，平移参数要写旋转参数前头</p><p>注意2 ，属性不能分开写，因为后面写的css会覆盖前面的css，层叠性</p><h4 id="属性-缩放" tabindex="-1"><a class="header-anchor" href="#属性-缩放"><span>属性-缩放</span></a></h4><p>如果修改宽高触发的话，会从左上角缩放，效果不对，应该以中心点缩放</p><p>scale（缩放倍数）x，y等比缩放 /scale（X轴倍数，Y轴倍数）</p><p>中间值为1 ，大于放大小于缩小</p><h4 id="属性-倾斜" tabindex="-1"><a class="header-anchor" href="#属性-倾斜"><span>属性-倾斜</span></a></h4><p>skew(xxdeg) ，取值角度</p><h4 id="属性-渐变" tabindex="-1"><a class="header-anchor" href="#属性-渐变"><span>属性-渐变</span></a></h4><p>一般用于盒子背景</p><p>分为线性渐变/径向渐变</p><h5 id="线性渐变" tabindex="-1"><a class="header-anchor" href="#线性渐变"><span>线性渐变</span></a></h5><p>background-image：linear-gradient（渐变方向，颜色1 终点位置，颜色2 终点位置....）</p><p>终点位置可写可不写，取值为%</p><p>渐变方向可写to+方位名词/角度度数</p><p>渐变默认由上到下</p><p>linear-gradient（to right,xx 80%,xx 20%）</p><p>transparent 透明关键字可作为颜色</p><h5 id="径向渐变" tabindex="-1"><a class="header-anchor" href="#径向渐变"><span>径向渐变</span></a></h5><p>一般用于提升按钮立体</p><p>radial-gradient（半径 at 圆心位置，颜色1 终点位置，颜色2 终点位置....）</p><p>半径的取值可以是两条，变为椭圆渐变</p><p>圆心取值可为像素、百分比、方位名词</p><h3 id="空间转换x-y-z" tabindex="-1"><a class="header-anchor" href="#空间转换x-y-z"><span>空间转换X，Y，Z</span></a></h3><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-28_21-02-37.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>z轴的方向和视线的方向相同</p><h4 id="空间-平移" tabindex="-1"><a class="header-anchor" href="#空间-平移"><span>空间-平移</span></a></h4><p>默认状态无法观察 z轴的平移效果，因为电脑也是平面的</p><p>transform: translate3d(x,y,z) 三个值缺一不可</p><p>transform: translatex()</p><p>transform:translatey()</p><p>transform:translatez()</p><p>参数可取像素，正负值都可以或者百分比参照盒子的大小计算</p><h5 id="视距perspective" tabindex="-1"><a class="header-anchor" href="#视距perspective"><span>视距perspective</span></a></h5><p>指定观察者与z=0平面距离，为元素添加透视效果（近大远小，近实远虚）</p><p>参数直接加给父级（必须直接父级），取值范围最佳为800-1200</p><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-28_21-11-10.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="空间-旋转" tabindex="-1"><a class="header-anchor" href="#空间-旋转"><span>空间-旋转</span></a></h4><p>一定要配合视距属性使用才有正常的视觉效果</p><p>transform:rotateZ()</p><p>rotateZ的旋转和正常旋转一样，因为都是在中心点</p><p>transform:rotateX()</p><p>transform:rotateY()</p><p>注意，旋转会改变坐标轴方向，如果一个平面以x轴旋转90度，那么他的视距z就会变道上面，根据z轴可以推断x，y轴的方向做平移等操作</p><h5 id="左手法则" tabindex="-1"><a class="header-anchor" href="#左手法则"><span>左手法则</span></a></h5><p>用于根据原型图，判断旋转取值的正负</p><p>左手握住旋转轴，拇指指坐标轴正数方向，其他四个手指的弯曲方向即为正值方向，反之为负值</p><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-28_21-50-29.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="拓展-不常用" tabindex="-1"><a class="header-anchor" href="#拓展-不常用"><span>拓展（不常用）</span></a></h5><p>rotate3d（x,y,z,角度度数），用来设置自定义旋转轴的位置以及旋转的角度</p><p>x,y,z 取值为0-1之间的数字</p><h4 id="立体呈现" tabindex="-1"><a class="header-anchor" href="#立体呈现"><span>立体呈现</span></a></h4><p>transform-style 该参数加给父级，取值flat为子级处为平面中preserve-3d子级处于3d空间中</p><p>作用：设置子元素位于3d空间中还是平面空间中</p><p>注意，每个盒子都有自己的坐标轴，互相不影响</p><p>操作步骤</p><ol><li>父元素添加transform-style:preserve-3d</li><li>子级定位</li><li>调整盒子的位置（位移或者旋转）</li></ol><h4 id="空间-缩放" tabindex="-1"><a class="header-anchor" href="#空间-缩放"><span>空间-缩放</span></a></h4><p>transform:scale(x,y,z);</p><p>transform:scaleX();</p><p>transform:scaleY();</p><p>transform:scaleZ();</p><p>参数同平面缩放</p><h3 id="动画-animation" tabindex="-1"><a class="header-anchor" href="#动画-animation"><span>动画-animation</span></a></h3><p>过度和动画的区别</p><p>过渡实现两个状态间的变化过程</p><p>动画，实现多个状态间的变化过程，动画过程可控（重复播放，最终画面，是否暂停）</p><h4 id="定义动画" tabindex="-1"><a class="header-anchor" href="#定义动画"><span>定义动画</span></a></h4><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@keyframes</span> 动画名称</span><span class="token punctuation">{</span>
    <span class="token selector">from</span><span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
    <span class="token selector">to</span><span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token atrule"><span class="token rule">@keyframes</span> 动画名称</span><span class="token punctuation">{</span>
    <span class="token selector">0%</span><span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
    <span class="token selector">10%</span><span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
    <span class="token selector">...
    100%</span><span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一种写法控制两个状态</p><p>第二个写法控制过程中的状态，其中百分比表示动画时长的百分比</p><p>animation：动画名称 动画时长，谁的动画属性就加给谁</p><h4 id="属性" tabindex="-1"><a class="header-anchor" href="#属性"><span>属性</span></a></h4><p>animation:动画名称 动画时长 速度曲线 延迟时间 重复次数 动画方向 执行完毕时的状态</p><p>取值不分前后顺序，动画名称 动画时长必填</p><p>如有两个时间值，第一个表示时长，第二个表示延迟</p><p>速度曲线可取 linear匀速，steps（2）分部展示 参数可变，一般用于精灵图动画</p><p>重复次数 infinite的话就是无限播放</p><p>动画方向 alternate 反向</p><p>完成时的状态 forwards结束时的状态，backwards开始时的状态（默认）</p><h5 id="拆分属性写法" tabindex="-1"><a class="header-anchor" href="#拆分属性写法"><span>拆分属性写法</span></a></h5><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-29_10-09-03.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="无缝动画实现" tabindex="-1"><a class="header-anchor" href="#无缝动画实现"><span>无缝动画实现</span></a></h4><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-29_10-23-21.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如图， 框中只能显示三张图片一共7张，每张图片宽为200px，实现滚动动画的话需要往左动画1400px，但动画完成后框中会留三张图片的宽度，所以根据框中可以承载内容的宽度再去复制内容的开头，也就是如图再去复制开头三张照片做填充，项目中根据实际情况填充</p><h4 id="逐帧动画" tabindex="-1"><a class="header-anchor" href="#逐帧动画"><span>逐帧动画</span></a></h4><p>看起来平滑的是补间动画，看起来一跳一跳的就是逐帧动画</p><p>利用动画的速度曲线steps（）实现</p><h5 id="精灵动画" tabindex="-1"><a class="header-anchor" href="#精灵动画"><span>精灵动画</span></a></h5><ol><li>准备显示区域</li><li>定义动画 移动背景，移动的距离=精灵图的宽度</li><li>使用动画steps（N），n与小图的个数相同</li></ol><h4 id="多组动画" tabindex="-1"><a class="header-anchor" href="#多组动画"><span>多组动画</span></a></h4><p>animation:动画1，动画2,....;</p><p>每组动画包含名称 时长 等必要参数中间用空格隔开，动画间用，号</p><p>省略from，比如盒子的默认位置就是translate（0），动画要移动到800px的位置，那么可以直接to{}</p><h3 id="移动适配" tabindex="-1"><a class="header-anchor" href="#移动适配"><span>移动适配</span></a></h3><ul><li><p>rem</p></li><li><p>vw</p></li></ul><p>缩放比计算 就是除以对应缩放比如1920 /150</p><p>物理分辨率 实体硬件的大小</p><p>逻辑分辨率 操作系统调节的大小，一般参考逻辑分辨率开发</p><h4 id="视口" tabindex="-1"><a class="header-anchor" href="#视口"><span>视口</span></a></h4><ul><li>手机屏幕尺寸不同，网页宽度均为100%</li><li>网页的宽度与逻辑分辨率尺寸相同</li></ul><p>注意：移动端默认分辨率的宽和逻辑宽不一致，pc一致</p><p>为了匹配移动端与逻辑宽，使用视口标签来约束html尺寸</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>自动生成的，不用管，认识就行</p><p>width=device-width ： 视口宽度=设备宽度</p><p>initial-scale=1.0 缩放1倍（不缩放）</p><h4 id="二倍图" tabindex="-1"><a class="header-anchor" href="#二倍图"><span>二倍图</span></a></h4><p>防止图片在高分辨率屏幕下失真</p><p>目前参考iphone6/7/8</p><p>看宽度 1倍图逻辑分辨率375，2倍图物理分辨率750</p><h4 id="适配方案" tabindex="-1"><a class="header-anchor" href="#适配方案"><span>适配方案</span></a></h4><ul><li><p>宽度适配</p><p>宽度自适应，高度为像素单位，百分比布局和flex布局</p></li><li><p>等比适配</p><p>rem</p><p>vw</p></li></ul><h4 id="rem适配" tabindex="-1"><a class="header-anchor" href="#rem适配"><span>rem适配</span></a></h4><p>rem 单位为相对单位</p><p>rem单位相对于html标签的字号计算结果也就是根字号</p><p>1rem=1html字号大小</p><h5 id="媒体查询" tabindex="-1"><a class="header-anchor" href="#媒体查询"><span>媒体查询</span></a></h5><p>能够检查视口的宽度，编写差异化的css</p><p>当某个条件成立，执行对应的css</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span>媒体特性<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
    <span class="token selector">选择器</span><span class="token punctuation">{</span>
        属性
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现根据不同的视口宽度，配置不同的属性</p><h5 id="不同视口宽度设置html字号多少合适" tabindex="-1"><a class="header-anchor" href="#不同视口宽度设置html字号多少合适"><span>不同视口宽度设置html字号多少合适？</span></a></h5><p>rem布局方案中，将网页分成10份，html标签的字号为视口宽度的十分之一</p><p>如视口宽度375 ，html字号为37.5px</p><p>320 就是32px</p><p>414就是41.4</p><h5 id="rem-flexible-js" tabindex="-1"><a class="header-anchor" href="#rem-flexible-js"><span>rem-flexible.js</span></a></h5><p>淘宝开发的用来一个适配移动端的js库</p><p>核心原理，根据不用的视口宽度给网页中html根节点设置不同的font-size</p><p>body标签中最下面引入js</p><h5 id="关于设计稿中的像素与rem转换" tabindex="-1"><a class="header-anchor" href="#关于设计稿中的像素与rem转换"><span>关于设计稿中的像素与rem转换</span></a></h5><ol><li><p>确定基准根字号（html），设计稿宽度，确定参考设备宽度（视口），确定基准根字号（十分之一视口宽度）</p></li><li><p>rem单位尺寸=px单位数值/基准根字号</p><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-29_14-17-19.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ol><h3 id="less" tabindex="-1"><a class="header-anchor" href="#less"><span>less</span></a></h3><p>css预处理器，扩充了css语言，使css具备一定的逻辑能力，计算能力</p><p>注意：浏览器不识别less代码，目前阶段需要引入对应的css</p><p>使用插件保存less后生成对应的css文件</p><p>vscode插件easy less</p><h4 id="less注释" tabindex="-1"><a class="header-anchor" href="#less注释"><span>less注释</span></a></h4><p>单行</p><p>// ctrl+/</p><p>块注释</p><p>/* */ Shift+alt+a</p><p>单行注释不会生成到css，因为css不支持//注释</p><h4 id="运算" tabindex="-1"><a class="header-anchor" href="#运算"><span>运算</span></a></h4><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-29_14-35-17.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果写了多个单位，以第一个为准</p><h4 id="嵌套" tabindex="-1"><a class="header-anchor" href="#嵌套"><span>嵌套</span></a></h4><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-29_14-40-03.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-29_14-43-00.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>&amp;符号在谁的括号中表示谁，配合hover或者nth-child结构伪类使用</p><h4 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h4><p>定义 @名称：数据；</p><p>使用 属性：@名称</p><h4 id="导入" tabindex="-1"><a class="header-anchor" href="#导入"><span>导入</span></a></h4><p>导入less公共样式文件</p><p>可以省略后缀名</p><p>@import 路径</p><h4 id="导出" tabindex="-1"><a class="header-anchor" href="#导出"><span>导出</span></a></h4><p>第一行添加</p><p>//out: 路径</p><p>如果是文件夹，最后要加/</p><p>禁用导出 //out:false</p><h3 id="vw适配-可以直接实现移动适配效果" tabindex="-1"><a class="header-anchor" href="#vw适配-可以直接实现移动适配效果"><span>vw适配（可以直接实现移动适配效果）</span></a></h3><p>相对视口的尺寸计算结果</p><p>vw：viewport width</p><p>1vw =1/100 视口宽度</p><p>vh viewport height</p><p>1vh = 1/100 视口高度</p><h4 id="vm和vh计算" tabindex="-1"><a class="header-anchor" href="#vm和vh计算"><span>vm和vh计算</span></a></h4><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-29_20-27-36.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="vh单位问题" tabindex="-1"><a class="header-anchor" href="#vh单位问题"><span>vh单位问题</span></a></h4><p>vw和vh不能混用，会导致盒子变形，一般常用vw</p><h3 id="移动端项目" tabindex="-1"><a class="header-anchor" href="#移动端项目"><span>移动端项目</span></a></h3><p>可以不做搜索优化也就是logo不需要包在h1标签里</p><h4 id="img图片直接铺满父级盒子的小技巧" tabindex="-1"><a class="header-anchor" href="#img图片直接铺满父级盒子的小技巧"><span>img图片直接铺满父级盒子的小技巧</span></a></h4><p>除了改和父级一样的宽高，还可以采用这种方法完美的铺满盒子，使用图片等比例完美的展现出来</p><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-29_21-46-33.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="响应式网页" tabindex="-1"><a class="header-anchor" href="#响应式网页"><span>响应式网页</span></a></h3><p>一套代码，适配多端，不管屏幕多大，手机还是电脑都能完美展示</p><h4 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h4><ul><li><p>媒体查询</p><p>检测宽度 改变样式，太麻烦</p></li><li><p>bootstrap框架</p></li></ul><h5 id="媒体查询-1" tabindex="-1"><a class="header-anchor" href="#媒体查询-1"><span>媒体查询</span></a></h5><p>max-width就是 &lt;=</p><p>min-width就是&gt;=</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>200px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>
    <span class="token selector">选择器</span><span class="token punctuation">{</span>
        参数
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token atrule"><span class="token rule">@media</span> 关键词 媒体类型 <span class="token keyword">and</span> （媒体特性）</span><span class="token punctuation">{</span>
    <span class="token selector">选择器</span><span class="token punctuation">{</span>
        参数
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

关键字and not only
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-30_14-13-58.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-30_14-14-27.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>注意书写顺序，因为css的特性层叠性，后面的会覆盖前面的样式</p><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-30_13-54-32.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="媒体查询-外部css-满足某些条件媒体样式比较多考虑这种方法" tabindex="-1"><a class="header-anchor" href="#媒体查询-外部css-满足某些条件媒体样式比较多考虑这种方法"><span>媒体查询-外部css，满足某些条件媒体样式比较多考虑这种方法</span></a></h5><p>媒体查询作为一个css文件，单独引入,css里直接写样式，媒体查询条件放在link标签中，符合媒体条件的应用该css样式</p><p>逻辑符 媒体类型 and （媒体特性） ：这是完整的写法一般只用一个括号写条件</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(max-width:768px)<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style.css<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="bootstrap" tabindex="-1"><a class="header-anchor" href="#bootstrap"><span>bootstrap</span></a></h4><p>twitter公司的前端框架，框架？ 人家编写好的代码，按人家的要求使用</p><p>bootstrap.min.css 压缩后的，格式乱，但是体积小（生产用这个）</p><p>bootstrap.css 完整格式的，两个文件一样，只是格式不一样（这个学习的时候用）</p><p>版心居中类container</p><h5 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h5><p>直接引入css，调用对应选择器实现效果</p><h5 id="栅格系统" tabindex="-1"><a class="header-anchor" href="#栅格系统"><span>栅格系统</span></a></h5><p>是将网页宽度分为12份，每个盒子占用对应的份数</p><p>例如一行四个盒子，那么每个盒子占的就是3份</p><p>bootstrap已经分好了宽度的响应区间 6个响应区间</p><p>row里面有flex布局</p><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-30_14-43-09.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>vscdoe显示类名插件</p><p>IntelliSense for CSS class names ...</p><p>这里开发项目有个小，关于盒子边距与背景填充的问题，看代码最后一个案例</p><h5 id="全局样式" tabindex="-1"><a class="header-anchor" href="#全局样式"><span>全局样式</span></a></h5><p>看官网</p>`,229),d={href:"https://v5.bootcss.com/docs/layout/containers/",target:"_blank",rel:"noopener noreferrer"},h=a("h5",{id:"组件components",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#组件components"},[a("span",null,"组件components")])],-1),g=a("p",null,"引入css",-1),m=a("p",null,"引入js（看是否依赖js，简单区别有动态功能的）",-1),u=a("p",null,"复制结构应用",-1),b=a("h5",{id:"字体图标",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#字体图标"},[a("span",null,"字体图标")])],-1),v=a("p",null,"官网图标库，引入css使用",-1),f={href:"https://icons.bootcss.com/#install",target:"_blank",rel:"noopener noreferrer"};function x(_,k){const n=t("ExternalLinkIcon");return i(),l("div",null,[o,a("p",null,[a("a",d,[s("Containers · Bootstrap v5 中文文档 v5.3 | Bootstrap 中文网 (bootcss.com)"),e(n)])]),h,g,m,u,b,v,a("p",null,[a("a",f,[s("Bootstrap 图标库 · Bootstrap 官方开源图标（icon）库 (bootcss.com)"),e(n)])])])}const j=p(c,[["render",x],["__file","web-04.html.vue"]]),w=JSON.parse('{"path":"/posts/web/html/web-04.html","title":"CSS（三）平面转换、动画、移动适配、less、bootstrap","lang":"zh-CN","frontmatter":{"title":"CSS（三）平面转换、动画、移动适配、less、bootstrap","date":"2024-03-26T00:00:00.000Z","category":["前端"],"tag":["HTML"],"description":"平面转换-2D转换 为元素添加动态效果，配合过渡使用 改变盒子在平面内的形态（位移，旋转，缩放，倾斜） transform： 属性-平移 translate（x移动距离,y移动距离） 距离可写像素，百分比（参照盒子自身的尺寸），正负值， 只写一个值的时候沿着x轴移动， 也可以使用translatex（）或者translatey（） 属性-旋转 rota...","head":[["meta",{"property":"og:url","content":"https://baymaxcoding.github.io/posts/web/html/web-04.html"}],["meta",{"property":"og:site_name","content":"BaymaxCoding"}],["meta",{"property":"og:title","content":"CSS（三）平面转换、动画、移动适配、less、bootstrap"}],["meta",{"property":"og:description","content":"平面转换-2D转换 为元素添加动态效果，配合过渡使用 改变盒子在平面内的形态（位移，旋转，缩放，倾斜） transform： 属性-平移 translate（x移动距离,y移动距离） 距离可写像素，百分比（参照盒子自身的尺寸），正负值， 只写一个值的时候沿着x轴移动， 也可以使用translatex（）或者translatey（） 属性-旋转 rota..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-27_18-32-46.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T04:24:50.000Z"}],["meta",{"property":"article:author","content":"BaymaxCoding"}],["meta",{"property":"article:tag","content":"HTML"}],["meta",{"property":"article:published_time","content":"2024-03-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T04:24:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CSS（三）平面转换、动画、移动适配、less、bootstrap\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-27_18-32-46.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-28_21-02-37.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-28_21-11-10.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-28_21-50-29.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-29_10-09-03.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-29_10-23-21.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-29_14-17-19.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-29_14-35-17.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-29_14-40-03.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-29_14-43-00.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-29_20-27-36.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-29_21-46-33.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-30_14-13-58.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-30_14-14-27.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-30_13-54-32.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/Snipaste_2023-11-30_14-43-09.png\\"],\\"datePublished\\":\\"2024-03-26T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-12T04:24:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BaymaxCoding\\",\\"url\\":\\"https://baymaxcoding.github.io/\\"}]}"]]},"headers":[{"level":3,"title":"平面转换-2D转换","slug":"平面转换-2d转换","link":"#平面转换-2d转换","children":[]},{"level":3,"title":"空间转换X，Y，Z","slug":"空间转换x-y-z","link":"#空间转换x-y-z","children":[]},{"level":3,"title":"动画-animation","slug":"动画-animation","link":"#动画-animation","children":[]},{"level":3,"title":"移动适配","slug":"移动适配","link":"#移动适配","children":[]},{"level":3,"title":"less","slug":"less","link":"#less","children":[]},{"level":3,"title":"vw适配（可以直接实现移动适配效果）","slug":"vw适配-可以直接实现移动适配效果","link":"#vw适配-可以直接实现移动适配效果","children":[]},{"level":3,"title":"移动端项目","slug":"移动端项目","link":"#移动端项目","children":[]},{"level":3,"title":"响应式网页","slug":"响应式网页","link":"#响应式网页","children":[]}],"git":{"createdTime":1712895890000,"updatedTime":1712895890000,"contributors":[{"name":"BaymaxCoding","email":"BRemail2324996822@163.com","commits":1}]},"readingTime":{"minutes":10.78,"words":3235},"filePathRelative":"posts/web/html/web-04.md","localizedDate":"2024年3月26日","autoDesc":true}');export{j as comp,w as data};
