import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,b as n}from"./app-DOGW-9XX.js";const t={},c=n(`<h1 id="gcc" tabindex="-1"><a class="header-anchor" href="#gcc"><span>gcc</span></a></h1><p>基于C/C++的编译器</p><h2 id="补充说明" tabindex="-1"><a class="header-anchor" href="#补充说明"><span>补充说明</span></a></h2><p><strong>gcc命令</strong> 使用GNU推出的基于 <code>C/C++</code> 的编译器，是开放源代码领域应用最广泛的编译器，具有功能强大，编译代码支持性能优化等特点。现在很多程序员都应用 <code>GCC</code>，怎样才能更好的应用 <code>GCC</code>。目前，<code>GCC</code> 可以用来编译 <code>C/C++</code>、<code>FORTRAN</code>、<code>JAVA</code>、<code>OBJC</code>、<code>ADA</code>等语言的程序，可根据需要选择安装支持的语言。</p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gcc<span class="token punctuation">(</span>选项<span class="token punctuation">)</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="选项" tabindex="-1"><a class="header-anchor" href="#选项"><span>选项</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>-o：指定生成的输出文件；
-E：仅执行编译预处理；
-S：将C代码转换为汇编代码；
-wall：显示警告信息；
-c：仅执行编译操作，不进行连接操作。
-l：用来指定程序要链接的库，-l参数紧接着就是库名
-I：寻找头文件的目录
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h3><p>C源文件：指定C语言源代码文件。</p><h3 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h3><p><strong>常用编译命令选项</strong></p><p>假设源程序文件名为test.c</p><p><strong>无选项编译链接</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gcc test.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将 <code>test.c</code> 预处理、汇编、编译并链接形成可执行文件。这里未指定输出文件，默认输出为 <code>a.out</code>。</p><p><strong>选项 -o</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gcc test.c <span class="token parameter variable">-o</span> <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将 <code>test.c</code> 预处理、汇编、编译并链接形成可执行文件 <code>test</code>。<code>-o</code> 选项用来指定输出文件的文件名。</p><p><strong>选项 -E</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-E</span> test.c <span class="token parameter variable">-o</span> test.i
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将 <code>test.c</code> 预处理输出 <code>test.i</code> 文件。</p><p><strong>选项 -S</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-S</span> test.i
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将预处理输出文件 <code>test.i</code> 汇编成 <code>test.s</code> 文件。</p><p><strong>选项 -c</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-c</span> test.s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将汇编输出文件 <code>test.s</code> 编译输出 <code>test.o</code> 文件。</p><p><strong>无选项链接</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gcc test.o <span class="token parameter variable">-o</span> <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将编译输出文件 <code>test.o</code> 链接成最终可执行文件 <code>test</code>。</p><p><strong>选项 -O</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-O1</span> test.c <span class="token parameter variable">-o</span> <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用编译优化级别1编译程序。级别为1~3，级别越大优化效果越好，但编译时间越长。</p><p><strong>多源文件的编译方法</strong></p><p>如果有多个源文件，基本上有两种编译方法：</p><p>假设有两个源文件为 <code>test.c</code> 和 <code>testfun.c</code></p><p><strong>多个文件一起编译</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gcc testfun.c test.c <span class="token parameter variable">-o</span> <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将 <code>testfun.c</code> 和 <code>test.c</code> 分别编译后链接成 <code>test</code> 可执行文件。</p><p><strong>分别编译各个源文件，之后对编译后输出的目标文件链接。</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-c</span> testfun.c    <span class="token comment">#将testfun.c编译成testfun.o</span>
gcc <span class="token parameter variable">-c</span> test.c       <span class="token comment">#将test.c编译成test.o</span>
gcc testfun.o test.o <span class="token parameter variable">-o</span> <span class="token builtin class-name">test</span>   <span class="token comment">#将testfun.o和test.o链接成test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上两种方法相比较，第一中方法编译时需要所有文件重新编译，而第二种方法可以只重新编译修改的文件，未修改的文件不用重新编译。</p><p><strong>加载动态链接库</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gcc hello.c <span class="token parameter variable">-lpthread</span> <span class="token parameter variable">-o</span> hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>手动添加文件头路径</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gcc hello.c <span class="token parameter variable">-lpthread</span> <span class="token parameter variable">-I</span> /lib64/ <span class="token parameter variable">-o</span> hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,47),d=[c];function i(l,o){return a(),s("div",null,d)}const m=e(t,[["render",i],["__file","gcc.html.vue"]]),g=JSON.parse('{"path":"/command/linux/gcc.html","title":"gcc","lang":"zh-CN","frontmatter":{"description":"gcc 基于C/C++的编译器 补充说明 gcc命令 使用GNU推出的基于 C/C++ 的编译器，是开放源代码领域应用最广泛的编译器，具有功能强大，编译代码支持性能优化等特点。现在很多程序员都应用 GCC，怎样才能更好的应用 GCC。目前，GCC 可以用来编译 C/C++、FORTRAN、JAVA、OBJC、ADA等语言的程序，可根据需要选择安装支持的...","head":[["meta",{"property":"og:url","content":"https://baymaxcoding.github.io/command/linux/gcc.html"}],["meta",{"property":"og:site_name","content":"BaymaxCoding"}],["meta",{"property":"og:title","content":"gcc"}],["meta",{"property":"og:description","content":"gcc 基于C/C++的编译器 补充说明 gcc命令 使用GNU推出的基于 C/C++ 的编译器，是开放源代码领域应用最广泛的编译器，具有功能强大，编译代码支持性能优化等特点。现在很多程序员都应用 GCC，怎样才能更好的应用 GCC。目前，GCC 可以用来编译 C/C++、FORTRAN、JAVA、OBJC、ADA等语言的程序，可根据需要选择安装支持的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T04:24:50.000Z"}],["meta",{"property":"article:author","content":"BaymaxCoding"}],["meta",{"property":"article:modified_time","content":"2024-04-12T04:24:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"gcc\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T04:24:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BaymaxCoding\\",\\"url\\":\\"https://baymaxcoding.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"补充说明","slug":"补充说明","link":"#补充说明","children":[{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"选项","slug":"选项","link":"#选项","children":[]},{"level":3,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":3,"title":"实例","slug":"实例","link":"#实例","children":[]}]}],"git":{"createdTime":1712895890000,"updatedTime":1712895890000,"contributors":[{"name":"BaymaxCoding","email":"BRemail2324996822@163.com","commits":1}]},"readingTime":{"minutes":2.29,"words":687},"filePathRelative":"command/linux/gcc.md","localizedDate":"2024年4月12日","autoDesc":true}');export{m as comp,g as data};
