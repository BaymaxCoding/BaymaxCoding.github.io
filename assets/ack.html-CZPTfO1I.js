import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o as l,c as i,a,b as t,d as c,e as p}from"./app-D_HUMAmc.js";const r={},o=p(`<h1 id="ack" tabindex="-1"><a class="header-anchor" href="#ack"><span>ack</span></a></h1><p>比grep好用的文本搜索工具</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># ubuntu下要安装ack-grep，因为在debian系中，ack这个名字被其他的软件占用了。</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ack-grep
<span class="token comment"># alpine Linux-apk软件包管理器 安装 ack</span>
apk <span class="token function">install</span> ack
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h2><p>这些参数在linux上的使用频率是相当高的，尤其是你用vim做为IDE的话</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>-c<span class="token punctuation">(</span>统计<span class="token punctuation">)</span>/ -i<span class="token punctuation">(</span>忽略大小<span class="token punctuation">)</span>/ -h<span class="token punctuation">(</span>不显示名称<span class="token punctuation">)</span>/
-l<span class="token punctuation">(</span>只显文件名<span class="token punctuation">)</span>/ -n<span class="token punctuation">(</span>加行号<span class="token punctuation">)</span>/ -v<span class="token punctuation">(</span>显示不匹配<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h2><p>ack官网列出了这工具的5大卖点：</p><ol><li>速度非常快,因为它只搜索有意义的东西。</li><li>更友好的搜索，忽略那些不是你源码的东西。</li><li>为源代码搜索而设计，用更少的击键完成任务。</li><li>非常轻便，移植性好。</li><li>免费且开源</li></ol><h2 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h2><p>在记忆的时候大体上可以分为这几个部分：</p><blockquote><p>Searching 代码搜索<br> Search output 搜索结果处理<br> File presentation 文件展示<br> File finding 文件查找<br> File inclusion/exclusion 文件过滤</p></blockquote><p>grep常用操作</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">grep</span> <span class="token parameter variable">-r</span> <span class="token string">&#39;hello_world&#39;</span> <span class="token comment"># 简单用法</span>
<span class="token function">grep</span> <span class="token string">&#39;^hello_world&#39;</span> <span class="token builtin class-name">.</span> <span class="token comment"># 简单正则</span>
<span class="token function">ls</span> <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">grep</span> .py <span class="token comment"># 管道用法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="searching" tabindex="-1"><a class="header-anchor" href="#searching"><span>Searching</span></a></h3><p>简单的文本搜索，默认是递归的。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>ack-grep hello
ack-grep -i hello
ack-grep -v hello
ack-grep -w hello
ack-grep -Q &#39;hello*&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="search-file" tabindex="-1"><a class="header-anchor" href="#search-file"><span>Search File</span></a></h3><p>对搜索结果进行处理，比如只显示一个文件的一个匹配项，或者xxx</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ack-grep <span class="token parameter variable">--line</span><span class="token operator">=</span><span class="token number">1</span>       <span class="token comment"># 输出所有文件第二行</span>
ack-grep <span class="token parameter variable">-l</span> <span class="token string">&#39;hello&#39;</span>     <span class="token comment"># 包含的文件名</span>
ack-grep <span class="token parameter variable">-L</span> <span class="token string">&#39;print&#39;</span>     <span class="token comment"># 非包含文件名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="file-presentation" tabindex="-1"><a class="header-anchor" href="#file-presentation"><span>File presentation</span></a></h3><p>输出的结果是以什么方式展示呢，这个部分有几个参数可以练习下</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ack-grep hello <span class="token parameter variable">--pager</span><span class="token operator">=</span><span class="token string">&#39;less -R&#39;</span>    <span class="token comment"># 以less形式展示</span>
ack-grep hello <span class="token parameter variable">--noheading</span>      <span class="token comment"># 不在头上显示文件</span>
ack-grep hello <span class="token parameter variable">--nocolor</span>        <span class="token comment"># 不对匹配字符着色</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="file-finding" tabindex="-1"><a class="header-anchor" href="#file-finding"><span>File finding</span></a></h3><p>没错，它可以查找文件，以省去你要不断的结合find和grep的麻烦，虽然在linux的思想是一个工具做好一件事。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ack-grep <span class="token parameter variable">-f</span> hello.py     <span class="token comment"># 查找全匹配文件</span>
ack-grep <span class="token parameter variable">-g</span> hello.py$    <span class="token comment"># 查找正则匹配文件</span>
ack-grep <span class="token parameter variable">-g</span> hello  --sort-files     <span class="token comment"># 查找然后排序</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="file-inclusion-exclusion" tabindex="-1"><a class="header-anchor" href="#file-inclusion-exclusion"><span>File inclusion/exclusion</span></a></h3><p>文件过滤，个人觉得这是一个很不错的功能。如果你曾经在搜索项目源码时不小心命中日志中的某个关键字的话，你会觉得这个有用。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ack-grep <span class="token parameter variable">--python</span> hello       <span class="token comment"># 查找所有python文件</span>
ack-grep <span class="token parameter variable">-G</span> hello.py$ hello   <span class="token comment"># 查找匹配正则的文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,31),d={href:"https://beyondgrep.com/",target:"_blank",rel:"noopener noreferrer"};function h(u,m){const e=s("ExternalLinkIcon");return l(),i("div",null,[o,a("ul",null,[a("li",null,[a("a",d,[t("ack官网"),c(e)])])])])}const v=n(r,[["render",h],["__file","ack.html.vue"]]),b=JSON.parse('{"path":"/command/linux/ack.html","title":"ack","lang":"zh-CN","frontmatter":{"description":"ack 比grep好用的文本搜索工具 安装 参数 这些参数在linux上的使用频率是相当高的，尤其是你用vim做为IDE的话 特点 ack官网列出了这工具的5大卖点： 速度非常快,因为它只搜索有意义的东西。 更友好的搜索，忽略那些不是你源码的东西。 为源代码搜索而设计，用更少的击键完成任务。 非常轻便，移植性好。 免费且开源 实例 在记忆的时候大体上可...","head":[["meta",{"property":"og:url","content":"https://baymaxcoding.github.io/command/linux/ack.html"}],["meta",{"property":"og:site_name","content":"BaymaxCoding"}],["meta",{"property":"og:title","content":"ack"}],["meta",{"property":"og:description","content":"ack 比grep好用的文本搜索工具 安装 参数 这些参数在linux上的使用频率是相当高的，尤其是你用vim做为IDE的话 特点 ack官网列出了这工具的5大卖点： 速度非常快,因为它只搜索有意义的东西。 更友好的搜索，忽略那些不是你源码的东西。 为源代码搜索而设计，用更少的击键完成任务。 非常轻便，移植性好。 免费且开源 实例 在记忆的时候大体上可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T04:24:50.000Z"}],["meta",{"property":"article:author","content":"BaymaxCoding"}],["meta",{"property":"article:modified_time","content":"2024-04-12T04:24:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ack\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T04:24:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BaymaxCoding\\",\\"url\\":\\"https://baymaxcoding.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":2,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":2,"title":"实例","slug":"实例","link":"#实例","children":[{"level":3,"title":"Searching","slug":"searching","link":"#searching","children":[]},{"level":3,"title":"Search File","slug":"search-file","link":"#search-file","children":[]},{"level":3,"title":"File presentation","slug":"file-presentation","link":"#file-presentation","children":[]},{"level":3,"title":"File finding","slug":"file-finding","link":"#file-finding","children":[]},{"level":3,"title":"File inclusion/exclusion","slug":"file-inclusion-exclusion","link":"#file-inclusion-exclusion","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1712895890000,"updatedTime":1712895890000,"contributors":[{"name":"BaymaxCoding","email":"BRemail2324996822@163.com","commits":1}]},"readingTime":{"minutes":2.1,"words":631},"filePathRelative":"command/linux/ack.md","localizedDate":"2024年4月12日","autoDesc":true}');export{v as comp,b as data};
