import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as d,c as l,a as e,d as a,e as n,b as o}from"./app-D3p8wuGf.js";const r={},c=o(`<h1 id="time" tabindex="-1"><a class="header-anchor" href="#time"><span>time</span></a></h1><p>统计给定命令所花费的总时间</p><h2 id="补充说明" tabindex="-1"><a class="header-anchor" href="#补充说明"><span>补充说明</span></a></h2><p><code>time</code> 命令是用来确定一个给定的命令需要运行多长时间。它对于测试你的脚本和命令的性能很有用。</p><p>例如，如果你有两个不同的脚本在做同样的工作，你想知道哪一个表现得更好，你可以用 Linux 的时间命令来确定每个脚本的执行时间。</p><p>该指令是 shell 内指令，也是一个软件包，<strong>对于软件包的说明在这篇文档靠下的部分</strong></p><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">time</span> <span class="token operator">&lt;</span>指令<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h2><p>指令：指定需要运行的额指令及其参数。</p><h2 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h2><p>当测试一个程序或比较不同算法时，执行时间是非常重要的，一个好的算法应该是用时最短的。所有类UNIX系统都包含time命令，使用这个命令可以统计时间消耗。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">time</span> <span class="token function">ls</span>
anaconda-ks.cfg  install.log  install.log.syslog  satools  text

real    0m0.009s
user    0m0.002s
sys     0m0.007s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的输出会因为使用的发行版本不同而导致展示的结果不同，比如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Bash</span>
real 0m33.961s
user 0m0.340s
sys 0m0.940s

<span class="token comment"># Zsh</span>
<span class="token number">0</span>.34s user <span class="token number">0</span>.94s system <span class="token number">4</span>% cpu <span class="token number">33.961</span> total

<span class="token comment"># GNU time (sh)</span>
<span class="token number">0</span>.34user <span class="token number">0</span>.94system <span class="token number">0</span>:33.96elapsed <span class="token number">4</span>%CPU <span class="token punctuation">(</span>0avgtext+0avgdata 6060maxresident<span class="token punctuation">)</span>k
0inputs+201456outputs <span class="token punctuation">(</span>0major+315minor<span class="token punctuation">)</span>pagefaults 0swaps
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>real</code> 或者 <code>total</code> 或者 <code>elapsed</code>（挂钟时间）是指从调用开始到结束的时间。它是指从你按下回车键的那一刻开始，到命令完成的那一刻为止的时间。 user - 在用户模式下花费的CPU时间。 system 或 sys - 在内核模式下花费的CPU时间。</p><h2 id="软件包" tabindex="-1"><a class="header-anchor" href="#软件包"><span>软件包</span></a></h2><p>接下来的部分是关于 <code>time</code> 软件包提供的 <code>/usr/bin/time</code> 二进制可执行程序，而不是 shell 内建的 time 命令。</p><h3 id="软件包的语法" tabindex="-1"><a class="header-anchor" href="#软件包的语法"><span>软件包的语法</span></a></h3><p>一些 shells（例如 <code>bash</code> ）有一个内置的 <code>time</code> 命令，提供类似的关于时间和可能的其他资源的使用信息。</p><p>要访问真正的命令，可能需要指定其路径名（类似于<code>/usr/bin/time</code>）。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">time</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token builtin class-name">command</span> <span class="token punctuation">[</span>arguments<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="软件包指令参数" tabindex="-1"><a class="header-anchor" href="#软件包指令参数"><span>软件包指令参数</span></a></h3><p>-f format, --format=format 指定输出格式，可能覆盖环境变量TIME中指定的格式。 -p, --portability 使用可移植的输出格式。 -o file, --output=file 不将结果发送到stderr，而是覆盖指定的文件。 -a, --append (与-o一起使用。)不覆盖而是附加。 -v, --verbose 对程序知道的所有信息进行非常详细的输出。 -q, --quiet 不报告异常的程序终止（当命令被信号终止时）或非零退出状态。</p><h3 id="软件包实例" tabindex="-1"><a class="header-anchor" href="#软件包实例"><span>软件包实例</span></a></h3><p>使用<code>-o</code>选项将执行时间写入到文件中：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>/usr/bin/time <span class="token parameter variable">-o</span> outfile.txt <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用<code>-a</code>选项追加信息：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>/usr/bin/time <span class="token parameter variable">-a</span> <span class="token parameter variable">-o</span> outfile.txt <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用<code>-f</code>选项格式化时间输出：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>/usr/bin/time <span class="token parameter variable">-f</span> <span class="token string">&quot;time: %U&quot;</span> <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>-f</code>选项后的参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>%E</code></td><td>real时间，显示格式为[小时:]分钟:秒</td></tr><tr><td><code>%U</code></td><td>user时间。</td></tr><tr><td><code>%S</code></td><td>sys时间。</td></tr><tr><td><code>%C</code></td><td>进行计时的命令名称和命令行参数。</td></tr><tr><td><code>%D</code></td><td>进程非共享数据区域，以KB为单位。</td></tr><tr><td><code>%x</code></td><td>命令退出状态。</td></tr><tr><td><code>%k</code></td><td>进程接收到的信号数量。</td></tr><tr><td><code>%w</code></td><td>进程被交换出主存的次数。</td></tr><tr><td><code>%Z</code></td><td>系统的页面大小，这是一个系统常量，不用系统中常量值也不同。</td></tr><tr><td><code>%P</code></td><td>进程所获取的CPU时间百分百，这个值等于 <code>user+system</code> 时间除以总共的运行时间。</td></tr><tr><td><code>%K</code></td><td>进程的平均总内存使用量（data+stack+text），单位是 <code>KB</code>。</td></tr><tr><td><code>%w</code></td><td>进程主动进行上下文切换的次数，例如等待I/O操作完成。</td></tr><tr><td><code>%c</code></td><td>进程被迫进行上下文切换的次数（由于时间片到期）。</td></tr></tbody></table><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,34),p={href:"https://linuxize.com/post/linux-time-command/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://man.archlinux.org/man/time.1",target:"_blank",rel:"noopener noreferrer"},u={href:"https://wiki.archlinux.org/title/time",target:"_blank",rel:"noopener noreferrer"};function h(b,v){const t=i("ExternalLinkIcon");return d(),l("div",null,[c,e("ul",null,[e("li",null,[a("Linux Time Command | Linuxize "),e("a",p,[a("https://linuxize.com/post/linux-time-command/"),n(t)])]),e("li",null,[a("time(1) — Arch manual pages "),e("a",m,[a("https://man.archlinux.org/man/time.1"),n(t)])]),e("li",null,[a("Time - ArchWiki "),e("a",u,[a("https://wiki.archlinux.org/title/time"),n(t)])])])])}const x=s(r,[["render",h],["__file","time.html.vue"]]),f=JSON.parse('{"path":"/command/linux/time.html","title":"time","lang":"zh-CN","frontmatter":{"description":"time 统计给定命令所花费的总时间 补充说明 time 命令是用来确定一个给定的命令需要运行多长时间。它对于测试你的脚本和命令的性能很有用。 例如，如果你有两个不同的脚本在做同样的工作，你想知道哪一个表现得更好，你可以用 Linux 的时间命令来确定每个脚本的执行时间。 该指令是 shell 内指令，也是一个软件包，对于软件包的说明在这篇文档靠下的部...","head":[["meta",{"property":"og:url","content":"https://baymaxcoding.github.io/command/linux/time.html"}],["meta",{"property":"og:site_name","content":"BaymaxCoding"}],["meta",{"property":"og:title","content":"time"}],["meta",{"property":"og:description","content":"time 统计给定命令所花费的总时间 补充说明 time 命令是用来确定一个给定的命令需要运行多长时间。它对于测试你的脚本和命令的性能很有用。 例如，如果你有两个不同的脚本在做同样的工作，你想知道哪一个表现得更好，你可以用 Linux 的时间命令来确定每个脚本的执行时间。 该指令是 shell 内指令，也是一个软件包，对于软件包的说明在这篇文档靠下的部..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T04:24:50.000Z"}],["meta",{"property":"article:author","content":"BaymaxCoding"}],["meta",{"property":"article:modified_time","content":"2024-04-12T04:24:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"time\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T04:24:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BaymaxCoding\\",\\"url\\":\\"https://baymaxcoding.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"补充说明","slug":"补充说明","link":"#补充说明","children":[]},{"level":2,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":2,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":2,"title":"实例","slug":"实例","link":"#实例","children":[]},{"level":2,"title":"软件包","slug":"软件包","link":"#软件包","children":[{"level":3,"title":"软件包的语法","slug":"软件包的语法","link":"#软件包的语法","children":[]},{"level":3,"title":"软件包指令参数","slug":"软件包指令参数","link":"#软件包指令参数","children":[]},{"level":3,"title":"软件包实例","slug":"软件包实例","link":"#软件包实例","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1712895890000,"updatedTime":1712895890000,"contributors":[{"name":"BaymaxCoding","email":"BRemail2324996822@163.com","commits":1}]},"readingTime":{"minutes":3.12,"words":937},"filePathRelative":"command/linux/time.md","localizedDate":"2024年4月12日","autoDesc":true}');export{x as comp,f as data};
