import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,b as e}from"./app-D3p8wuGf.js";const t={},p=e(`<h1 id="break" tabindex="-1"><a class="header-anchor" href="#break"><span>break</span></a></h1><p>结束for，while或until循环。</p><h2 id="概要" tabindex="-1"><a class="header-anchor" href="#概要"><span>概要</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">break</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="主要用途" tabindex="-1"><a class="header-anchor" href="#主要用途"><span>主要用途</span></a></h2><ul><li>结束for，while或until循环，可指定退出几层循环。</li></ul><h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h2><p>n（可选）：大于等于1的整数，用于指定退出几层循环。</p><h2 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值"><span>返回值</span></a></h2><p>返回成功除非n小于1。</p><h2 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># break的可选参数n缺省值为1。</span>
<span class="token comment"># 从外层for循环继续执行。</span>
<span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>
  <span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>j<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>j<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token keyword">if</span><span class="token variable"><span class="token punctuation">((</span>j<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">then</span>
      <span class="token comment"># 换成break 1时结果一样</span>
      <span class="token builtin class-name">break</span>
    <span class="token keyword">fi</span>
  <span class="token builtin class-name">printf</span> <span class="token string">&quot;%s %s<span class="token entity" title="\\n">\\n</span>&quot;</span> <span class="token variable">\${i}</span> <span class="token variable">\${j}</span>
  <span class="token keyword">done</span>
<span class="token keyword">done</span>
<span class="token comment"># 输出结果</span>
<span class="token number">3</span> <span class="token number">3</span>
<span class="token number">2</span> <span class="token number">3</span>
<span class="token number">1</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 当n为2时：</span>
<span class="token comment"># 退出两层循环，结束。</span>
<span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>
  <span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>j<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>j<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token keyword">if</span><span class="token variable"><span class="token punctuation">((</span>j<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">then</span>
      <span class="token builtin class-name">break</span> <span class="token number">2</span>
    <span class="token keyword">fi</span>
  <span class="token builtin class-name">printf</span> <span class="token string">&quot;%s %s<span class="token entity" title="\\n">\\n</span>&quot;</span> <span class="token variable">\${i}</span> <span class="token variable">\${j}</span>
  <span class="token keyword">done</span>
<span class="token keyword">done</span>
<span class="token comment"># 输出结果</span>
<span class="token number">3</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意</span></a></h3><ol><li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li></ol>`,15),l=[p];function o(i,c){return a(),s("div",null,l)}const u=n(t,[["render",o],["__file","break.html.vue"]]),k=JSON.parse('{"path":"/command/linux/break.html","title":"break","lang":"zh-CN","frontmatter":{"description":"break 结束for，while或until循环。 概要 主要用途 结束for，while或until循环，可指定退出几层循环。 参数 n（可选）：大于等于1的整数，用于指定退出几层循环。 返回值 返回成功除非n小于1。 例子 注意 该命令是bash内建命令，相关的帮助信息请查看help命令。","head":[["meta",{"property":"og:url","content":"https://baymaxcoding.github.io/command/linux/break.html"}],["meta",{"property":"og:site_name","content":"BaymaxCoding"}],["meta",{"property":"og:title","content":"break"}],["meta",{"property":"og:description","content":"break 结束for，while或until循环。 概要 主要用途 结束for，while或until循环，可指定退出几层循环。 参数 n（可选）：大于等于1的整数，用于指定退出几层循环。 返回值 返回成功除非n小于1。 例子 注意 该命令是bash内建命令，相关的帮助信息请查看help命令。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T04:24:50.000Z"}],["meta",{"property":"article:author","content":"BaymaxCoding"}],["meta",{"property":"article:modified_time","content":"2024-04-12T04:24:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"break\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T04:24:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BaymaxCoding\\",\\"url\\":\\"https://baymaxcoding.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"概要","slug":"概要","link":"#概要","children":[]},{"level":2,"title":"主要用途","slug":"主要用途","link":"#主要用途","children":[]},{"level":2,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":2,"title":"返回值","slug":"返回值","link":"#返回值","children":[]},{"level":2,"title":"例子","slug":"例子","link":"#例子","children":[{"level":3,"title":"注意","slug":"注意","link":"#注意","children":[]}]}],"git":{"createdTime":1712895890000,"updatedTime":1712895890000,"contributors":[{"name":"BaymaxCoding","email":"BRemail2324996822@163.com","commits":1}]},"readingTime":{"minutes":0.72,"words":217},"filePathRelative":"command/linux/break.md","localizedDate":"2024年4月12日","autoDesc":true}');export{u as comp,k as data};
