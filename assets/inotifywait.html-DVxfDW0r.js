import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e as t}from"./app-D_HUMAmc.js";const i={},e=t(`<h1 id="inotifywait" tabindex="-1"><a class="header-anchor" href="#inotifywait"><span>inotifywait</span></a></h1><p>异步文件系统监控机制</p><h2 id="补充说明" tabindex="-1"><a class="header-anchor" href="#补充说明"><span>补充说明</span></a></h2><p><strong>Inotify</strong> 一种强大的、细粒度的、异步文件系统监控机制，它满足各种各样的文件监控需要，可以监控文件系统的访问属性、读写属性、权限属性、删除创建、移动等操作，也就是可以监控文件发生的一切变化。。</p><p><strong>inotify-tools</strong> 是一个C库和一组命令行的工作提供Linux下inotify的简单接口。inotify-tools安装后会得到<code>inotifywait</code>和<code>inotifywatch</code>这两条命令：</p><ul><li><strong>inotifywait命令</strong> 可以用来收集有关文件访问信息，Linux发行版一般没有包括这个命令，需要安装inotify-tools，这个命令还需要将inotify支持编译入Linux内核，好在大多数Linux发行版都在内核中启用了inotify。</li><li><strong>inotifywatch命令</strong> 用于收集关于被监视的文件系统的统计数据，包括每个 inotify 事件发生多少次。</li></ul><p>开始之前需要检测系统内核是否支持inotify：</p><p>使用<code>uname -r</code>命令检查Linux内核，如果低于2.6.13，就需要重新编译内核加入inotify的支持。</p><p>使用<code>ll /proc/sys/fs/inotify</code>命令，是否有以下三条信息输出，如果没有表示不支持。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ll /proc/sys/fs/inotify
total <span class="token number">0</span>
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Jan  <span class="token number">4</span> <span class="token number">15</span>:41 max_queued_events
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Jan  <span class="token number">4</span> <span class="token number">15</span>:41 max_user_instances
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Jan  <span class="token number">4</span> <span class="token number">15</span>:41 max_user_watches
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装inotify-tools" tabindex="-1"><a class="header-anchor" href="#安装inotify-tools"><span>安装inotify-tools</span></a></h3><ul><li>inotify-tools项目地址：https://github.com/rvoicilas/inotify-tools</li><li>inotify-tools下载地址：http://github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#CentOS release 5.8/64位：</span>
<span class="token function">tar</span> zxvf inotify-tools-3.14.tar.gz
<span class="token builtin class-name">cd</span> inotify-tools-3.14
./configure
<span class="token function">make</span>
<span class="token function">make</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他Linux发行版安装方法可以参见：https://github.com/rvoicilas/inotify-tools/wiki#wiki-getting</p><h3 id="inotify相关参数" tabindex="-1"><a class="header-anchor" href="#inotify相关参数"><span>inotify相关参数</span></a></h3><p>inotify定义了下列的接口参数，可以用来限制inotify消耗kernel memory的大小。由于这些参数都是内存参数，因此，可以根据应用需求，实时的调节其大小：</p><ul><li><code>/proc/sys/fs/inotify/max_queued_evnets</code>表示调用inotify_init时分配给inotify instance中可排队的event的数目的最大值，超出这个值的事件被丢弃，但会触发IN_Q_OVERFLOW事件。</li><li><code>/proc/sys/fs/inotify/max_user_instances</code>表示每一个real user id可创建的inotify instatnces的数量上限。</li><li><code>/proc/sys/fs/inotify/max_user_watches</code>表示每个inotify instatnces可监控的最大目录数量。如果监控的文件数目巨大，需要根据情况，适当增加此值的大小。</li></ul><p>根据以上在32位或者64位系统都可以执行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token number">104857600</span> <span class="token operator">&gt;</span> /proc/sys/fs/inotify/max_user_watches
<span class="token builtin class-name">echo</span> <span class="token string">&#39;echo 104857600 &gt; /proc/sys/fs/inotify/max_user_watches&#39;</span> <span class="token operator">&gt;&gt;</span> /etc/rc.local
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果遇到以下错误：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>inotifywait: error <span class="token keyword">while</span> loading shared libraries: libinotifytools.so.0: cannot <span class="token function">open</span> shared object file: No such <span class="token function">file</span> or directory 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code> **解决方法：** 
<span class="token number">32</span>位系统：ln <span class="token parameter variable">-s</span> /usr/local/lib/libinotifytools.so.0 /usr/lib/libinotifytools.so.0
<span class="token number">64</span>位系统：ln <span class="token parameter variable">-s</span> /usr/local/lib/libinotifytools.so.0 /usr/lib64/libinotifytools.so.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="inotifywait命令使用" tabindex="-1"><a class="header-anchor" href="#inotifywait命令使用"><span>inotifywait命令使用</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment">#filename watchdir.sh</span>
<span class="token assign-left variable">path</span><span class="token operator">=</span><span class="token variable">$1</span>
/usr/local/bin/inotifywait <span class="token parameter variable">-mrq</span> <span class="token parameter variable">--timefmt</span> <span class="token string">&#39;%d/%m/%y/%H:%M&#39;</span> <span class="token parameter variable">--format</span> <span class="token string">&#39;%T %w %f&#39;</span> <span class="token parameter variable">-e</span> modify,delete,create,attrib <span class="token variable">$path</span>

执行输出：
./watchdir.sh /data/wsdata/tools/
04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swp
04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swx
04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swx
04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swp
04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swp
04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swp
04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swp
04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swp
04/01/13/16:35 /data/wsdata/tools/ <span class="token number">4913</span>
04/01/13/16:35 /data/wsdata/tools/ <span class="token number">4913</span>
04/01/13/16:35 /data/wsdata/tools/ <span class="token number">4913</span>
04/01/13/16:35 /data/wsdata/tools/ j.jsp
04/01/13/16:35 /data/wsdata/tools/ j.jsp
04/01/13/16:35 /data/wsdata/tools/ j.jsp
04/01/13/16:35 /data/wsdata/tools/ j.jsp~
04/01/13/16:35 /data/wsdata/tools/ .j.jsp.swp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="inotifywait命令参数" tabindex="-1"><a class="header-anchor" href="#inotifywait命令参数"><span>inotifywait命令参数</span></a></h3><ul><li><code>-m</code>是要持续监视变化。</li><li><code>-r</code>使用递归形式监视目录。</li><li><code>-q</code>减少冗余信息，只打印出需要的信息。</li><li><code>-e</code>指定要监视的事件列表。</li><li><code>--timefmt</code>是指定时间的输出格式。</li><li><code>--format</code>指定文件变化的详细信息。</li></ul><h3 id="可监听的事件" tabindex="-1"><a class="header-anchor" href="#可监听的事件"><span>可监听的事件</span></a></h3><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>access</td><td><strong>访问</strong> ，读取文件。</td></tr><tr><td>modify</td><td><strong>修改</strong> ，文件内容被修改。</td></tr><tr><td>attrib</td><td><strong>属性</strong> ，文件元数据被修改。</td></tr><tr><td>move</td><td><strong>移动</strong> ，对文件进行移动操作。</td></tr><tr><td>create</td><td><strong>创建</strong> ，生成新文件</td></tr><tr><td>open</td><td><strong>打开</strong> ，对文件进行打开操作。</td></tr><tr><td>close</td><td><strong>关闭</strong> ，对文件进行关闭操作。</td></tr><tr><td>delete</td><td><strong>删除</strong> ，文件被删除。</td></tr></tbody></table>`,28),o=[e];function l(d,r){return a(),s("div",null,o)}const m=n(i,[["render",l],["__file","inotifywait.html.vue"]]),u=JSON.parse('{"path":"/command/linux/inotifywait.html","title":"inotifywait","lang":"zh-CN","frontmatter":{"description":"inotifywait 异步文件系统监控机制 补充说明 Inotify 一种强大的、细粒度的、异步文件系统监控机制，它满足各种各样的文件监控需要，可以监控文件系统的访问属性、读写属性、权限属性、删除创建、移动等操作，也就是可以监控文件发生的一切变化。。 inotify-tools 是一个C库和一组命令行的工作提供Linux下inotify的简单接口。i...","head":[["meta",{"property":"og:url","content":"https://baymaxcoding.github.io/command/linux/inotifywait.html"}],["meta",{"property":"og:site_name","content":"BaymaxCoding"}],["meta",{"property":"og:title","content":"inotifywait"}],["meta",{"property":"og:description","content":"inotifywait 异步文件系统监控机制 补充说明 Inotify 一种强大的、细粒度的、异步文件系统监控机制，它满足各种各样的文件监控需要，可以监控文件系统的访问属性、读写属性、权限属性、删除创建、移动等操作，也就是可以监控文件发生的一切变化。。 inotify-tools 是一个C库和一组命令行的工作提供Linux下inotify的简单接口。i..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T04:24:50.000Z"}],["meta",{"property":"article:author","content":"BaymaxCoding"}],["meta",{"property":"article:modified_time","content":"2024-04-12T04:24:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"inotifywait\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T04:24:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BaymaxCoding\\",\\"url\\":\\"https://baymaxcoding.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"补充说明","slug":"补充说明","link":"#补充说明","children":[{"level":3,"title":"安装inotify-tools","slug":"安装inotify-tools","link":"#安装inotify-tools","children":[]},{"level":3,"title":"inotify相关参数","slug":"inotify相关参数","link":"#inotify相关参数","children":[]},{"level":3,"title":"inotifywait命令使用","slug":"inotifywait命令使用","link":"#inotifywait命令使用","children":[]},{"level":3,"title":"inotifywait命令参数","slug":"inotifywait命令参数","link":"#inotifywait命令参数","children":[]},{"level":3,"title":"可监听的事件","slug":"可监听的事件","link":"#可监听的事件","children":[]}]}],"git":{"createdTime":1712895890000,"updatedTime":1712895890000,"contributors":[{"name":"BaymaxCoding","email":"BRemail2324996822@163.com","commits":1}]},"readingTime":{"minutes":3.08,"words":923},"filePathRelative":"command/linux/inotifywait.md","localizedDate":"2024年4月12日","autoDesc":true}');export{m as comp,u as data};
