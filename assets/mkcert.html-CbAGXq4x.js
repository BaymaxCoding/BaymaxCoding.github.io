import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as i,c,a as n,d as e,e as a,b as t}from"./app-CHACLx4z.js";const r={},d=t(`<h1 id="mkcert" tabindex="-1"><a class="header-anchor" href="#mkcert"><span>mkcert</span></a></h1><p>用来生成自签证书的工具</p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><p><code>mkcert</code> 是 GO 编写的，一个简单的<strong>零配置</strong>的用来生成自签证书的工具。</p><p>下面给一个简单的示例，在本地生成自签证书，并使用让 nc 使用生成的证书。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>~ ·········································································································································  <span class="token number">10</span>:46:25
❯ mkcert <span class="token parameter variable">-install</span>
The <span class="token builtin class-name">local</span> CA is already installed <span class="token keyword">in</span> the system trust store<span class="token operator">!</span> 👍The <span class="token builtin class-name">local</span> CA is already installed <span class="token keyword">in</span> the Firefox and/or Chrome/Chromium trust store<span class="token operator">!</span> 👍
~ ·········································································································································  <span class="token number">10</span>:46:34
❯ mkcert example.com <span class="token string">&quot;*.example.com&quot;</span> example.test localhost <span class="token number">127.0</span>.0.1 ::1

Created a new certificate valid <span class="token keyword">for</span> the following names 📜 - <span class="token string">&quot;example.com&quot;</span>
 - <span class="token string">&quot;*.example.com&quot;</span>
 - <span class="token string">&quot;example.test&quot;</span>
 - <span class="token string">&quot;localhost&quot;</span>
 - <span class="token string">&quot;127.0.0.1&quot;</span>
 - <span class="token string">&quot;::1&quot;</span>

Reminder: X.509 wildcards only go one level deep, so this won&#39;t match a.b.example.com ℹ️

The certificate is at <span class="token string">&quot;./example.com+5.pem&quot;</span> and the key at <span class="token string">&quot;./example.com+5-key.pem&quot;</span> ✅
It will expire on <span class="token number">30</span> January <span class="token number">2025</span> 🗓

~ ·········································································································································  <span class="token number">10</span>:47:37
❯ <span class="token function">ls</span>             
公共  视频  文档  音乐  aria          aria2-downloads  Dockerfile             example.com+5.pem  GOPATH  minio-binaries  nowip_hosts.txt  tech_backend.jar
模板  图片  下载  桌面  aria2-config  cv_debug.log     example.com+5-key.pem  go                 math    navicat_reset   src
~ ·········································································································································  <span class="token number">10</span>:47:55
❯ ncat <span class="token parameter variable">-lvp</span> <span class="token number">1589</span> --ssl-key example.com+5-key.pem --ssl-cert example.com+5.pem 
Ncat: Version <span class="token number">7.92</span> <span class="token punctuation">(</span> https://nmap.org/ncat <span class="token punctuation">)</span>
Ncat: Listening on :::1589
Ncat: Listening on <span class="token number">0.0</span>.0.0:1589
Ncat: Connection from <span class="token number">127.0</span>.0.1.
Ncat: Connection from <span class="token number">127.0</span>.0.1:39156.
Ncat: Failed SSL connection from <span class="token number">127.0</span>.0.1: error:00000000:lib<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>:func<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>:reason<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>mkcert</code> 自动生成并安装一个本地 CA 到 root stores，并且生成 locally-trusted 证书。<code>mkcert</code> 不会自动使用证书来配置服务器，不过，这取决于你。</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2><blockquote><p>Warning: <code>mkcert</code> 自动生成的 <code>rootCA-key.pem</code> 文件提供了完整的能力来拦截你机器上的安全请求。请不要分享它。</p></blockquote><h3 id="macos" tabindex="-1"><a class="header-anchor" href="#macos"><span>macOS</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ brew <span class="token function">install</span> mkcert
$ brew <span class="token function">install</span> nss <span class="token comment"># 如果用 Firefox 的话</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="linux" tabindex="-1"><a class="header-anchor" href="#linux"><span>Linux</span></a></h3><p>在 Linux 上，首先要安装 <code>certutil</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libnss3-tools
<span class="token comment">#    -or-</span>
$ <span class="token function">sudo</span> yum <span class="token function">install</span> nss-tools
<span class="token comment">#    -or-</span>
$ <span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> nss
<span class="token comment">#    -or-</span>
$ <span class="token function">sudo</span> <span class="token function">zypper</span> <span class="token function">install</span> mozilla-nss-tools
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),p={href:"https://docs.brew.sh/Homebrew-on-Linux",target:"_blank",rel:"noopener noreferrer"},m=t(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ brew <span class="token function">install</span> mkcert
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者从源码构建（要求 Go 1.13+）</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/FiloSottile/mkcert <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> mkcert
go build <span class="token parameter variable">-ldflags</span> <span class="token string">&quot;-X main.Version=<span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> describe <span class="token parameter variable">--tags</span><span class="token variable">)</span></span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,3),u={href:"https://github.com/FiloSottile/mkcert/releases",target:"_blank",rel:"noopener noreferrer"},h=t(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-JLO</span> <span class="token string">&quot;https://dl.filippo.io/mkcert/latest?for=linux/amd64&quot;</span>
$ <span class="token function">chmod</span> +x mkcert-v*-linux-amd64
$ <span class="token function">sudo</span> <span class="token function">cp</span> mkcert-v*-linux-amd64 /usr/local/bin/mkcert
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),v={href:"https://www.archlinux.org/packages/community/x86_64/mkcert/",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"mkcert",-1),b=t(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> mkcert
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="windows" tabindex="-1"><a class="header-anchor" href="#windows"><span>Windows</span></a></h3>`,2),g={href:"https://chocolatey.org/",target:"_blank",rel:"noopener noreferrer"},f=t(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ choco <span class="token function">install</span> mkcert
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者使用 Scoop</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ scoop bucket <span class="token function">add</span> extras
$ scoop <span class="token function">install</span> mkcert
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,3),x={href:"https://github.com/FiloSottile/mkcert/releases",target:"_blank",rel:"noopener noreferrer"},_=t(`<p>如果遇到权限问题，请使用管理员运行 <code>mkcert</code></p><h2 id="支持的-root-stores" tabindex="-1"><a class="header-anchor" href="#支持的-root-stores"><span>支持的 root stores</span></a></h2><p><code>mkcert</code> 支持以下 root stores：</p><ul><li>macOS system store</li><li>Windows system store</li><li>Linux 发行版提供 <ul><li><code>update-ca-trust</code> （Fedora，RHEL，CentOS）或者</li><li><code>update-ca-certificates</code> （Ubuntu，Debian，OpenSUSE，SLES）或者</li><li><code>trust</code> （Arch）</li></ul></li><li>Firefox （仅 macOS 和 Linux）</li><li>Chrome 和 Chromium</li><li>Java（当 <code>JAVA_HOME</code> 被设置时）</li></ul><p>为了把 local root CA 装到这些 root stores 中，你可以设置 <code>TRUST_STORES</code> 环境变量到一个逗号分隔的 list。有这些选项：&quot;system&quot;,&quot;java&quot; 和 &quot;nss&quot;（包括了 Firefox）。</p><h2 id="高级-topics" tabindex="-1"><a class="header-anchor" href="#高级-topics"><span>高级 topics</span></a></h2><h3 id="高级选项" tabindex="-1"><a class="header-anchor" href="#高级选项"><span>高级选项</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>-cert-file FILE, -key-file FILE, -p12-file FILE
    <span class="token comment"># 自定义输出路径.</span>
<span class="token parameter variable">-client</span> <span class="token comment"># 生成供客户端认证使用的证书.</span>
<span class="token parameter variable">-ecdsa</span>  <span class="token comment"># 生成使用一个 ECDSA （一种椭圆曲线签名算法）key 来生成证书.</span>
<span class="token parameter variable">-pkcs12</span> <span class="token comment"># 生成一个 &quot;.p12&quot; PKCS #12 文件，也可以被识别为 &quot;.pfx&quot; 文件,</span>
        <span class="token comment"># 包含 cert 和 key for legacy applications.</span>
<span class="token parameter variable">-csr</span> CSR <span class="token comment"># 生成一个给予 CSR（证书签名申请） 的证书。</span>
         <span class="token comment"># 与除了 -install 和 -cert-file 以外的其它所以 flag 和参数冲突！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),C={href:"https://cloud.tencent.com/document/product/400/5367",target:"_blank",rel:"noopener noreferrer"},y=t(`<blockquote><p><strong>请注意！</strong> 你必须把这些选项放在域名列表之前。</p></blockquote><h3 id="例如" tabindex="-1"><a class="header-anchor" href="#例如"><span>例如</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mkcert -key-file key.pem -cert-file cert.pem example.com *.example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="s-mime-邮件安全证书" tabindex="-1"><a class="header-anchor" href="#s-mime-邮件安全证书"><span>S/MIME （邮件安全证书）</span></a></h3><p>用下面这种方式 <code>mkcert</code> 会生成一个 S/MIME 证书：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mkcert filippo@example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="移动设备" tabindex="-1"><a class="header-anchor" href="#移动设备"><span>移动设备</span></a></h3><p>对于要让移动设备信任证书的情况，你得安装 root CA。就是 <code>rootCA.pem</code> 这个文件，可以通过 <code>mkcert -CAROOT</code> 打印出这个文件所在的目录。</p>`,8),A={href:"https://github.com/FiloSottile/mkcert/issues/233#issuecomment-690110809",target:"_blank",rel:"noopener noreferrer"},q={href:"https://support.apple.com/en-nz/HT204477",target:"_blank",rel:"noopener noreferrer"},S={href:"https://stackoverflow.com/a/22040887/749014",target:"_blank",rel:"noopener noreferrer"},w=n("h3",{id:"用-node-js-来使用这个-root",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#用-node-js-来使用这个-root"},[n("span",null,"用 Node.js 来使用这个 root")])],-1),O=n("code",null,"mkcert",-1),T={href:"https://nodejs.org/api/cli.html#cli_node_extra_ca_certs_file",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"NODE_EXTRA_CA_CERTS",-1),L=t(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">NODE_EXTRA_CA_CERTS</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span>mkcert <span class="token parameter variable">-CAROOT</span><span class="token variable">)</span></span>/rootCA.pem&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="改变-ca-文件的位置" tabindex="-1"><a class="header-anchor" href="#改变-ca-文件的位置"><span>改变 CA 文件的位置</span></a></h3><p>CA 证书和它的 key 被存储在用户家目录的一个文件夹中。一般来说你不会想去关注它的位置，因为它会被自动装载。但是你可以通过 <code>mkcert -CAROOT</code> 来打印这个目录位置。</p><p>如果你想要管理单独的 CA 们，你可以使用 <code>\\$CAROOT</code> 环境变量来设置 mkcert 放置和寻找 CA files 的路径。</p><h3 id="在其它系统上安装-ca" tabindex="-1"><a class="header-anchor" href="#在其它系统上安装-ca"><span>在其它系统上安装 CA</span></a></h3><p>安装 trust store 不需要 CA key（只要 CA），所以你可以导出 CA，并且使用 <code>mkcert</code> 来安装到其它机器上。</p><ul><li>找到 <code>rootCA.pem</code> 文件，可以用 <code>mkcert -CAROOT</code> 找到对应目录。</li><li>把它 copy 到别的机器上。</li><li>设置 <code>\\$CAROOT</code> 为 <code>rootCA.pem</code> 所在目录。</li><li>运行 <code>mkcert -install</code>(arch linux 可以 <code>sudo trust anchor --store rootCA.pem</code>，其它发行版可以用自带的命令手动添加来信任 CA)</li></ul><p>请千万记住 <code>mkcert</code> 是用于开发目的的，不建议用于生产，所以它不应该被用到用户终端上，并且你不应该导出或者共享 <code>rootCA-key.pem</code> 。</p>`,8);function R(N,$){const s=o("ExternalLinkIcon");return i(),c("div",null,[d,n("p",null,[e("然后可以使用 "),n("a",p,[e("Homebrew on Linux"),a(s)]),e(" 来安装。")]),m,n("p",null,[e("又或者使用 "),n("a",u,[e("预构建的二进制文件"),a(s)]),e("。")]),h,n("p",null,[e("对于 Arch Linux 用户（比如我），"),n("a",v,[k,a(s)]),e(" 在 Arch Linux 官方仓库中可用。")]),b,n("p",null,[e("使用 "),n("a",g,[e("Chocolatey"),a(s)])]),f,n("p",null,[e("或者从源码构建（要求 Go 1.10+） ，或者使用 "),n("a",x,[e("预构建的二进制文件"),a(s)]),e("。")]),_,n("p",null,[n("a",C,[e("SSL 证书 什么是CSR？-常见问题-文档中心-腾讯云"),a(s)])]),y,n("p",null,[e("在 iOS 上，你也可以使用 AirDrop，把 CA 邮件发给你自己，或者通过一个 HTTP server 提供它。在打开它之后，你需要  "),n("a",A,[e("install the profile in Settings > Profile Downloaded"),a(s)]),e(" and then "),n("a",q,[e("enable full trust in it"),a(s)]),e(" 。")]),n("p",null,[e("对于 Android ，你得安装这个 CA 然后在应用程序的开发版本中启用 user roots。可以看一看这个 "),n("a",S,[e("StackOverflow 回答"),a(s)]),e(" 。")]),w,n("p",null,[e("Node 不使用 system root store，所以它不会自动接受 "),O,e(" 证书。相反，你得设置 "),n("a",T,[E,a(s)]),e(" 环境变量。")]),L])}const D=l(r,[["render",R],["__file","mkcert.html.vue"]]),I=JSON.parse('{"path":"/command/linux/mkcert.html","title":"mkcert","lang":"zh-CN","frontmatter":{"description":"mkcert 用来生成自签证书的工具 示例 mkcert 是 GO 编写的，一个简单的零配置的用来生成自签证书的工具。 下面给一个简单的示例，在本地生成自签证书，并使用让 nc 使用生成的证书。 mkcert 自动生成并安装一个本地 CA 到 root stores，并且生成 locally-trusted 证书。mkcert 不会自动使用证书来配置服...","head":[["meta",{"property":"og:url","content":"https://baymaxcoding.github.io/command/linux/mkcert.html"}],["meta",{"property":"og:site_name","content":"BaymaxCoding"}],["meta",{"property":"og:title","content":"mkcert"}],["meta",{"property":"og:description","content":"mkcert 用来生成自签证书的工具 示例 mkcert 是 GO 编写的，一个简单的零配置的用来生成自签证书的工具。 下面给一个简单的示例，在本地生成自签证书，并使用让 nc 使用生成的证书。 mkcert 自动生成并安装一个本地 CA 到 root stores，并且生成 locally-trusted 证书。mkcert 不会自动使用证书来配置服..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T04:24:50.000Z"}],["meta",{"property":"article:author","content":"BaymaxCoding"}],["meta",{"property":"article:modified_time","content":"2024-04-12T04:24:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"mkcert\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T04:24:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BaymaxCoding\\",\\"url\\":\\"https://baymaxcoding.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[{"level":3,"title":"macOS","slug":"macos","link":"#macos","children":[]},{"level":3,"title":"Linux","slug":"linux","link":"#linux","children":[]},{"level":3,"title":"Windows","slug":"windows","link":"#windows","children":[]}]},{"level":2,"title":"支持的 root stores","slug":"支持的-root-stores","link":"#支持的-root-stores","children":[]},{"level":2,"title":"高级 topics","slug":"高级-topics","link":"#高级-topics","children":[{"level":3,"title":"高级选项","slug":"高级选项","link":"#高级选项","children":[]},{"level":3,"title":"例如","slug":"例如","link":"#例如","children":[]},{"level":3,"title":"S/MIME （邮件安全证书）","slug":"s-mime-邮件安全证书","link":"#s-mime-邮件安全证书","children":[]},{"level":3,"title":"移动设备","slug":"移动设备","link":"#移动设备","children":[]},{"level":3,"title":"用 Node.js 来使用这个 root","slug":"用-node-js-来使用这个-root","link":"#用-node-js-来使用这个-root","children":[]},{"level":3,"title":"改变 CA 文件的位置","slug":"改变-ca-文件的位置","link":"#改变-ca-文件的位置","children":[]},{"level":3,"title":"在其它系统上安装 CA","slug":"在其它系统上安装-ca","link":"#在其它系统上安装-ca","children":[]}]}],"git":{"createdTime":1712895890000,"updatedTime":1712895890000,"contributors":[{"name":"BaymaxCoding","email":"BRemail2324996822@163.com","commits":1}]},"readingTime":{"minutes":4.46,"words":1337},"filePathRelative":"command/linux/mkcert.md","localizedDate":"2024年4月12日","autoDesc":true}');export{D as comp,I as data};
