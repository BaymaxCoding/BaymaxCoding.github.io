import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,b as e}from"./app-DOGW-9XX.js";const t={},c=e(`<h1 id="watch" tabindex="-1"><a class="header-anchor" href="#watch"><span>watch</span></a></h1><p>可以将命令的输出结果输出到标准输出设备，多用于周期性执行命令/定时执行命令</p><h2 id="补充说明" tabindex="-1"><a class="header-anchor" href="#补充说明"><span>补充说明</span></a></h2><p><strong>watch命令</strong> 以周期性的方式执行给定的指令，指令输出以全屏方式显示。watch是一个非常实用的命令，基本所有的Linux发行版都带有这个小工具，如同名字一样，watch可以帮你监测一个命令的运行结果，省得你一遍遍的手动运行。</p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>watch<span class="token punctuation">(</span>选项<span class="token punctuation">)</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="选项" tabindex="-1"><a class="header-anchor" href="#选项"><span>选项</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token parameter variable">-n</span> <span class="token comment"># 或--interval  watch缺省每2秒运行一下程序，可以用-n或-interval来指定间隔的时间。</span>
<span class="token parameter variable">-d</span> <span class="token comment"># 或--differences  用-d或--differences 选项watch 会高亮显示变化的区域。 而-d=cumulative选项会把变动过的地方(不管最近的那次有没有变动)都高亮显示出来。</span>
<span class="token parameter variable">-t</span> <span class="token comment"># 或-no-title  会关闭watch命令在顶部的时间间隔,命令，当前时间的输出。</span>
-h, <span class="token parameter variable">--help</span> <span class="token comment"># 查看帮助文档</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h3><p>指令：需要周期性执行的指令。</p><h3 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">watch</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token parameter variable">-d</span> <span class="token function">netstat</span> <span class="token parameter variable">-ant</span>       <span class="token comment"># 命令：每隔一秒高亮显示网络链接数的变化情况</span>
<span class="token function">watch</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;pstree|grep http&#39;</span> <span class="token comment"># 每隔一秒高亮显示http链接数的变化情况。 后面接的命令若带有管道符，需要加&#39;&#39;将命令区域归整。</span>
<span class="token function">watch</span> <span class="token string">&#39;netstat -an | grep:21 | \\ grep&lt;模拟攻击客户机的IP&gt;| wc -l&#39;</span> <span class="token comment"># 实时查看模拟攻击客户机建立起来的连接数</span>
<span class="token function">watch</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;ls -l|grep scf&#39;</span>       <span class="token comment"># 监测当前目录中 scf&#39; 的文件的变化</span>
<span class="token function">watch</span> <span class="token parameter variable">-n</span> <span class="token number">10</span> <span class="token string">&#39;cat /proc/loadavg&#39;</span> <span class="token comment"># 10秒一次输出系统的平均负载</span>
<span class="token function">watch</span> <span class="token function">uptime</span>
<span class="token function">watch</span> <span class="token parameter variable">-t</span> <span class="token function">uptime</span>
<span class="token function">watch</span> <span class="token parameter variable">-d</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token function">netstat</span> <span class="token parameter variable">-ntlp</span>
<span class="token function">watch</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;ls -l | fgrep goface&#39;</span>     <span class="token comment"># 监测goface的文件</span>
<span class="token function">watch</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">-differences</span><span class="token operator">=</span>cumulative <span class="token function">uptime</span>
<span class="token function">watch</span> <span class="token parameter variable">-n</span> <span class="token number">60</span> from            <span class="token comment"># 监控mail</span>
<span class="token function">watch</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token string">&quot;df -i;df&quot;</span>       <span class="token comment"># 监测磁盘inode和block数目变化情况</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FreeBSD和Linux下watch命令的不同，在Linux下，watch是周期性的执行下个程序，并全屏显示执行结果，如：<code>watch -n 1 -d netstat -ant</code>，而在FreeBSD下的watch命令是查看其它用户的正在运行的操作，watch允许你偷看其它terminal正在做什么，该命令只能让超级用户使用。</p>`,13),p=[c];function l(i,o){return n(),s("div",null,p)}const m=a(t,[["render",l],["__file","watch.html.vue"]]),h=JSON.parse('{"path":"/command/linux/watch.html","title":"watch","lang":"zh-CN","frontmatter":{"description":"watch 可以将命令的输出结果输出到标准输出设备，多用于周期性执行命令/定时执行命令 补充说明 watch命令 以周期性的方式执行给定的指令，指令输出以全屏方式显示。watch是一个非常实用的命令，基本所有的Linux发行版都带有这个小工具，如同名字一样，watch可以帮你监测一个命令的运行结果，省得你一遍遍的手动运行。 语法 选项 参数 指令：需要...","head":[["meta",{"property":"og:url","content":"https://baymaxcoding.github.io/command/linux/watch.html"}],["meta",{"property":"og:site_name","content":"BaymaxCoding"}],["meta",{"property":"og:title","content":"watch"}],["meta",{"property":"og:description","content":"watch 可以将命令的输出结果输出到标准输出设备，多用于周期性执行命令/定时执行命令 补充说明 watch命令 以周期性的方式执行给定的指令，指令输出以全屏方式显示。watch是一个非常实用的命令，基本所有的Linux发行版都带有这个小工具，如同名字一样，watch可以帮你监测一个命令的运行结果，省得你一遍遍的手动运行。 语法 选项 参数 指令：需要..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T04:24:50.000Z"}],["meta",{"property":"article:author","content":"BaymaxCoding"}],["meta",{"property":"article:modified_time","content":"2024-04-12T04:24:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"watch\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T04:24:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BaymaxCoding\\",\\"url\\":\\"https://baymaxcoding.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"补充说明","slug":"补充说明","link":"#补充说明","children":[{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"选项","slug":"选项","link":"#选项","children":[]},{"level":3,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":3,"title":"实例","slug":"实例","link":"#实例","children":[]}]}],"git":{"createdTime":1712895890000,"updatedTime":1712895890000,"contributors":[{"name":"BaymaxCoding","email":"BRemail2324996822@163.com","commits":1}]},"readingTime":{"minutes":1.88,"words":564},"filePathRelative":"command/linux/watch.md","localizedDate":"2024年4月12日","autoDesc":true}');export{m as comp,h as data};
