import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c,a as n,b as s,d as l,e as a}from"./app-D_HUMAmc.js";const i={},u=a(`<h1 id="web-apis-第5天笔记" tabindex="-1"><a class="header-anchor" href="#web-apis-第5天笔记"><span>Web APIs - 第5天笔记</span></a></h1><blockquote><p>目标： 能够利用JS操作浏览器,具备利用本地存储实现学生就业表的能力</p></blockquote><ul><li>BOM操作</li><li>综合案例</li></ul><h2 id="js组成" tabindex="-1"><a class="header-anchor" href="#js组成"><span>js组成</span></a></h2><p>JavaScript的组成</p><ul><li><p>ECMAScript:</p><ul><li>规定了js基础语法核心知识。</li><li>比如：变量、分支语句、循环语句、对象等等</li></ul></li><li><p>Web APIs :</p><ul><li>DOM 文档对象模型， 定义了一套操作HTML文档的API</li><li>BOM 浏览器对象模型，定义了一套操作浏览器窗口的API</li></ul></li></ul><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676047389456.png" alt="67604738945" tabindex="0" loading="lazy"><figcaption>67604738945</figcaption></figure><h2 id="window对象" tabindex="-1"><a class="header-anchor" href="#window对象"><span>window对象</span></a></h2><p><strong>BOM</strong> (Browser Object Model ) 是浏览器对象模型</p><ul><li>window对象是一个全局对象，也可以说是JavaScript中的顶级对象</li><li>像document、alert()、console.log()这些都是window的属性，基本BOM的属性和方法都是window的</li><li>所有通过var定义在全局作用域中的变量、函数都会变成window对象的属性和方法</li><li>window对象下的属性和方法调用的时候可以省略window</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676047436362.png" alt="67604743636" tabindex="0" loading="lazy"><figcaption>67604743636</figcaption></figure><h2 id="定时器-延迟函数" tabindex="-1"><a class="header-anchor" href="#定时器-延迟函数"><span>定时器-延迟函数</span></a></h2><p>JavaScript 内置的一个用来让代码延迟执行的函数，叫 setTimeout</p><p><strong>语法：</strong></p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript" data-title="JavaScript"><pre class="language-JavaScript"><code>setTimeout(回调函数, 延迟时间)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>setTimeout 仅仅只执行一次，所以可以理解为就是把一段代码延迟执行, 平时省略window</p><p>间歇函数 setInterval : 每隔一段时间就执行一次， , 平时省略window</p><p>清除延时函数：</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript" data-title="JavaScript"><pre class="language-JavaScript"><code>clearTimeout(timerId)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意点</p><ol><li>延时函数需要等待,所以后面的代码先执行</li><li>返回值是一个正整数，表示定时器的编号</li></ol></blockquote><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 定时器之延迟函数</span>

    <span class="token comment">// 1. 开启延迟函数</span>
    <span class="token keyword">let</span> timerId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我只执行一次&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>

    <span class="token comment">// 1.1 延迟函数返回的还是一个正整数数字，表示延迟函数的编号</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>timerId<span class="token punctuation">)</span>

    <span class="token comment">// 1.2 延迟函数需要等待时间，所以下面的代码优先执行</span>

    <span class="token comment">// 2. 关闭延迟函数</span>
    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timerId<span class="token punctuation">)</span>

  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="location对象" tabindex="-1"><a class="header-anchor" href="#location对象"><span>location对象</span></a></h2><p>location (地址) 它拆分并保存了 URL 地址的各个组成部分， 它是一个对象</p><table><thead><tr><th>属性/方法</th><th>说明</th></tr></thead><tbody><tr><td>href</td><td>属性，获取完整的 URL 地址，赋值时用于地址的跳转</td></tr><tr><td>search</td><td>属性，获取地址中携带的参数，符号 ？后面部分</td></tr><tr><td>hash</td><td>属性，获取地址中的啥希值，符号 # 后面部分</td></tr><tr><td>reload()</td><td>方法，用来刷新当前页面，传入参数 true 时表示强制刷新</td></tr></tbody></table><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>search<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#/music<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>音乐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#/download<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>reload<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>刷新页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// location 对象  </span>
    <span class="token comment">// 1. href属性 （重点） 得到完整地址，赋值则是跳转到新地址</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span>
    <span class="token comment">// location.href = &#39;http://www.itcast.cn&#39;</span>

    <span class="token comment">// 2. search属性  得到 ? 后面的地址 </span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span>  <span class="token comment">// ?search=笔记本</span>

    <span class="token comment">// 3. hash属性  得到 # 后面的地址</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span>

    <span class="token comment">// 4. reload 方法  刷新页面</span>
    <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.reload&#39;</span><span class="token punctuation">)</span>
    btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// location.reload() // 页面刷新</span>
      location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 强制页面刷新 ctrl+f5</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="navigator对象" tabindex="-1"><a class="header-anchor" href="#navigator对象"><span>navigator对象</span></a></h2><p>navigator是对象，该对象下记录了浏览器自身的相关信息</p><p>常用属性和方法：</p><ul><li>通过 userAgent 检测浏览器的版本及平台</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 检测 userAgent（浏览器信息）</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> userAgent <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent
  <span class="token comment">// 验证是否为Android或iPhone</span>
  <span class="token keyword">const</span> android <span class="token operator">=</span> userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(Android);?[\\s\\/]+([\\d.]+)?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> iphone <span class="token operator">=</span> userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(iPhone\\sOS)\\s([\\d_]+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
  <span class="token comment">// 如果是Android或iPhone，则跳转至移动站点</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token parameter">android <span class="token operator">||</span> iphone</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&#39;http://m.itcast.cn&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="histroy对象" tabindex="-1"><a class="header-anchor" href="#histroy对象"><span>histroy对象</span></a></h2><p>history (历史)是对象，主要管理历史记录， 该对象与浏览器地址栏的操作相对应，如前进、后退等</p><p><strong>使用场景</strong></p><p>history对象一般在实际开发中比较少用，但是会在一些OA 办公系统中见到。</p><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676047834796.png" alt="67604783479" tabindex="0" loading="lazy"><figcaption>67604783479</figcaption></figure><p>常见方法：</p><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676047846593.png" alt="67604784659" tabindex="0" loading="lazy"><figcaption>67604784659</figcaption></figure><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>back<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>←后退<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>forward<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>前进→<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// histroy对象</span>

    <span class="token comment">// 1.前进</span>
    <span class="token keyword">const</span> forward <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.forward&#39;</span><span class="token punctuation">)</span>
    forward<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// history.forward() </span>
      history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// 2.后退</span>
    <span class="token keyword">const</span> back <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.back&#39;</span><span class="token punctuation">)</span>
    back<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// history.back()</span>
      history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="本地存储-今日重点" tabindex="-1"><a class="header-anchor" href="#本地存储-今日重点"><span>本地存储（今日重点）</span></a></h2><p>本地存储：将数据存储在本地浏览器中</p><p>常见的使用场景：</p>`,41),r={href:"https://todomvc.com/examples/vanilla-es6/",target:"_blank",rel:"noopener noreferrer"},d=a(`<p>好处：</p><p>1、页面刷新或者关闭不丢失数据，实现数据持久化</p><p>2、容量较大，sessionStorage和 localStorage 约 5M 左右</p><h3 id="localstorage-重点" tabindex="-1"><a class="header-anchor" href="#localstorage-重点"><span>localStorage（重点）</span></a></h3><p><strong>作用:</strong> 数据可以长期保留在本地浏览器中，刷新页面和关闭页面，数据也不会丢失</p><p>**特性：**以键值对的形式存储，并且存储的是字符串， 省略了window</p><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676049635087.png" alt="67604963508" tabindex="0" loading="lazy"><figcaption>67604963508</figcaption></figure><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>本地存储-localstorage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 本地存储 - localstorage 存储的是字符串 </span>
    <span class="token comment">// 1. 存储</span>
    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>

    <span class="token comment">// 2. 获取</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">// 3. 删除</span>
    localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sessionstorage-了解" tabindex="-1"><a class="header-anchor" href="#sessionstorage-了解"><span>sessionStorage（了解）</span></a></h3><p>特性：</p><ul><li>用法跟localStorage基本相同</li><li>区别是：当页面浏览器被关闭时，存储在 sessionStorage 的数据会被清除</li></ul><p>存储：sessionStorage.setItem(key,value)</p><p>获取：sessionStorage.getItem(key)</p><p>删除：sessionStorage.removeItem(key)</p><h3 id="localstorage-存储复杂数据类型" tabindex="-1"><a class="header-anchor" href="#localstorage-存储复杂数据类型"><span>localStorage 存储复杂数据类型</span></a></h3><p>**问题：**本地只能存储字符串,无法存储复杂数据类型.</p><p>**解决：**需要将复杂数据类型转换成 JSON字符串,在存储到本地</p><p>**语法：**JSON.stringify(复杂数据类型)</p><p>JSON字符串：</p><ul><li>首先是1个字符串</li><li>属性名使用双引号引起来，不能单引号</li><li>属性值如果是字符串型也必须双引号</li></ul><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 本地存储复杂数据类型</span>
    <span class="token keyword">const</span> goods <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;小米&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">1999</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// localStorage.setItem(&#39;goods&#39;, goods)</span>
    <span class="token comment">// console.log(localStorage.getItem(&#39;goods&#39;))</span>

    <span class="token comment">// 1. 把对象转换为JSON字符串  JSON.stringify</span>
    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;goods&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// console.log(typeof localStorage.getItem(&#39;goods&#39;))</span>

  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**问题：**因为本地存储里面取出来的是字符串，不是对象，无法直接使用</p><p>**解决： **把取出来的字符串转换为对象</p><p>**语法：**JSON.parse(JSON字符串)</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 本地存储复杂数据类型</span>
    <span class="token keyword">const</span> goods <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;小米&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">1999</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// localStorage.setItem(&#39;goods&#39;, goods)</span>
    <span class="token comment">// console.log(localStorage.getItem(&#39;goods&#39;))</span>

    <span class="token comment">// 1. 把对象转换为JSON字符串  JSON.stringify</span>
    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;goods&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// console.log(typeof localStorage.getItem(&#39;goods&#39;))</span>

    <span class="token comment">// 2. 把JSON字符串转换为对象  JSON.parse</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;goods&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="综合案例" tabindex="-1"><a class="header-anchor" href="#综合案例"><span>综合案例</span></a></h2><h3 id="数组map-方法" tabindex="-1"><a class="header-anchor" href="#数组map-方法"><span>数组map 方法</span></a></h3><p><strong>使用场景：</strong></p><p>map 可以遍历数组处理数据，并且返回新的数组</p><p><strong>语法：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pink&#39;</span><span class="token punctuation">]</span>
  <span class="token comment">// 1. 数组 map方法 处理数据并且 返回一个数组</span>
   <span class="token keyword">const</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ele<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// console.log(ele)  // 数组元素</span>
    <span class="token comment">// console.log(index) // 索引号</span>
    <span class="token keyword">return</span> ele <span class="token operator">+</span> <span class="token string">&#39;颜色&#39;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>map 也称为映射。映射是个术语，指两个元素的集之间元素相互“对应”的关系。</p><p>map重点在于有返回值，forEach没有返回值（undefined）</p></blockquote><h3 id="数组join方法" tabindex="-1"><a class="header-anchor" href="#数组join方法"><span>数组join方法</span></a></h3><p>**作用：**join() 方法用于把数组中的所有元素转换一个字符串</p><p><strong>语法：</strong></p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pink&#39;</span><span class="token punctuation">]</span>

    <span class="token comment">// 1. 数组 map方法 处理数据并且 返回一个数组</span>
    <span class="token keyword">const</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ele<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// console.log(ele)  // 数组元素</span>
      <span class="token comment">// console.log(index) // 索引号</span>
      <span class="token keyword">return</span> ele <span class="token operator">+</span> <span class="token string">&#39;颜色&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span>

    <span class="token comment">// 2. 数组join方法  把数组转换为字符串</span>
    <span class="token comment">// 小括号为空则逗号分割</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// red颜色,blue颜色,pink颜色</span>
    <span class="token comment">// 小括号是空字符串，则元素之间没有分隔符</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//red颜色blue颜色pink颜色</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;|&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//red颜色|blue颜色|pink颜色</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36);function k(m,g){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("a",r,[s("https://todomvc.com/examples/vanilla-es6/"),l(t)]),s(" 页面刷新数据不丢失")]),d])}const h=p(i,[["render",k],["__file","api-05.html.vue"]]),f=JSON.parse('{"path":"/posts/web/javascript/api/api-05.html","title":"JavaScript WebApi（五）浏览器API操作对象如、window、定时器、localStorage等","lang":"zh-CN","frontmatter":{"title":"JavaScript WebApi（五）浏览器API操作对象如、window、定时器、localStorage等","date":"2024-03-28T00:00:00.000Z","category":["前端"],"tag":["JavaScript"],"description":"Web APIs - 第5天笔记 目标： 能够利用JS操作浏览器,具备利用本地存储实现学生就业表的能力 BOM操作 综合案例 js组成 JavaScript的组成 ECMAScript: 规定了js基础语法核心知识。 比如：变量、分支语句、循环语句、对象等等 Web APIs : DOM 文档对象模型， 定义了一套操作HTML文档的API BOM 浏览...","head":[["meta",{"property":"og:url","content":"https://baymaxcoding.github.io/posts/web/javascript/api/api-05.html"}],["meta",{"property":"og:site_name","content":"BaymaxCoding"}],["meta",{"property":"og:title","content":"JavaScript WebApi（五）浏览器API操作对象如、window、定时器、localStorage等"}],["meta",{"property":"og:description","content":"Web APIs - 第5天笔记 目标： 能够利用JS操作浏览器,具备利用本地存储实现学生就业表的能力 BOM操作 综合案例 js组成 JavaScript的组成 ECMAScript: 规定了js基础语法核心知识。 比如：变量、分支语句、循环语句、对象等等 Web APIs : DOM 文档对象模型， 定义了一套操作HTML文档的API BOM 浏览..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676047389456.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T12:11:02.000Z"}],["meta",{"property":"article:author","content":"BaymaxCoding"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:published_time","content":"2024-03-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T12:11:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript WebApi（五）浏览器API操作对象如、window、定时器、localStorage等\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676047389456.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676047436362.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676047834796.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676047846593.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676049635087.png\\"],\\"datePublished\\":\\"2024-03-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-12T12:11:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BaymaxCoding\\",\\"url\\":\\"https://baymaxcoding.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"js组成","slug":"js组成","link":"#js组成","children":[]},{"level":2,"title":"window对象","slug":"window对象","link":"#window对象","children":[]},{"level":2,"title":"定时器-延迟函数","slug":"定时器-延迟函数","link":"#定时器-延迟函数","children":[]},{"level":2,"title":"location对象","slug":"location对象","link":"#location对象","children":[]},{"level":2,"title":"navigator对象","slug":"navigator对象","link":"#navigator对象","children":[]},{"level":2,"title":"histroy对象","slug":"histroy对象","link":"#histroy对象","children":[]},{"level":2,"title":"本地存储（今日重点）","slug":"本地存储-今日重点","link":"#本地存储-今日重点","children":[{"level":3,"title":"localStorage（重点）","slug":"localstorage-重点","link":"#localstorage-重点","children":[]},{"level":3,"title":"sessionStorage（了解）","slug":"sessionstorage-了解","link":"#sessionstorage-了解","children":[]},{"level":3,"title":"localStorage 存储复杂数据类型","slug":"localstorage-存储复杂数据类型","link":"#localstorage-存储复杂数据类型","children":[]}]},{"level":2,"title":"综合案例","slug":"综合案例","link":"#综合案例","children":[{"level":3,"title":"数组map 方法","slug":"数组map-方法","link":"#数组map-方法","children":[]},{"level":3,"title":"数组join方法","slug":"数组join方法","link":"#数组join方法","children":[]}]}],"git":{"createdTime":1712923862000,"updatedTime":1712923862000,"contributors":[{"name":"BaymaxCoding","email":"BRemail2324996822@163.com","commits":1}]},"readingTime":{"minutes":6.17,"words":1851},"filePathRelative":"posts/web/javascript/api/api-05.md","localizedDate":"2024年3月28日","autoDesc":true}');export{h as comp,f as data};
