import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,b as n}from"./app-DOGW-9XX.js";const o={},l=n(`<h1 id="depmod" tabindex="-1"><a class="header-anchor" href="#depmod"><span>depmod</span></a></h1><p>分析可载入模块的相依性</p><h2 id="补充说明" tabindex="-1"><a class="header-anchor" href="#补充说明"><span>补充说明</span></a></h2><p><strong>depmod命令</strong> 可产生模块依赖的映射文件，在构建嵌入式系统时，需要由这个命令来生成相应的文件，由modprobe使用。</p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>depmod<span class="token punctuation">(</span>选项<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="选项" tabindex="-1"><a class="header-anchor" href="#选项"><span>选项</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>-a或--all：分析所有可用的模块；
-d或debug：执行排错模式；
-e：输出无法参照的符号；
-i：不检查符号表的版本；
-m<span class="token operator">&lt;</span>文件<span class="token operator">&gt;</span>或system-map<span class="token operator">&lt;</span>文件<span class="token operator">&gt;</span>：使用指定的符号表文件；
-s或--system-log：在系统记录中记录错误；
-v或--verbose：执行时显示详细的信息；
-V或--version：显示版本信息；
--help：显示帮助。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>depmod <span class="token parameter variable">-b</span> /home/windsome/EMMA3PF-KernelSource-20080626/install_pos <span class="token parameter variable">-e</span> <span class="token parameter variable">-F</span> ./boot/System.map <span class="token parameter variable">-v</span> <span class="token number">2.6</span>.18_pro500-bcm91250-mips2_fp_be <span class="token parameter variable">-A</span> <span class="token parameter variable">-a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>/home/windsome/EMMA3PF-KernelSource-20080626/install_pos</code>是我<code>make mod_install</code>后，所有模块的存放路径。</li><li><code>./boot/System.map</code>是<code>make linux</code>后生成，我拷贝到此目录的。</li><li><code>2.6.18_pro500-bcm91250-mips2_fp_be</code>是我build的linux的版本。</li></ul><p>编译linux过程及执行depmod的例子：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>genkernel.sh <span class="token punctuation">(</span>at linux-2.6.18_pro500<span class="token punctuation">)</span>
<span class="token comment">#######</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">INSTALL_ROOT_EMMA3PF</span><span class="token operator">=</span><span class="token string">&quot;/home/windsome/EMMA3PF-KernelSource-20080626/install_pos&quot;</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">INSTALL_MOD_EMMA3PF</span><span class="token operator">=</span><span class="token string">&quot;/home/windsome/EMMA3PF-KernelSource-20080626/install_pos&quot;</span>
<span class="token function">rm</span> /home/windsome/EMMA3PF-KernelSource-20080626/install_pos/lib <span class="token parameter variable">-rf</span>
<span class="token function">rm</span> /home/windsome/EMMA3PF-KernelSource-20080626/install_pos/boot/* <span class="token parameter variable">-rf</span>
<span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>linux_src_dir<span class="token operator">&gt;</span>
<span class="token function">make</span>
<span class="token function">make</span> modules_install
<span class="token function">cp</span> vmlinux System.map /home/windsome/EMMA3PF-KernelSource-20080626/install_pos/boot/ <span class="token parameter variable">-p</span>
<span class="token builtin class-name">cd</span> /home/windsome/EMMA3PF-KernelSource-20080626/install_pos
depmod <span class="token parameter variable">-b</span> /home/windsome/EMMA3PF-KernelSource-20080626/install_pos <span class="token parameter variable">-e</span> <span class="token parameter variable">-F</span> ./boot/System.map <span class="token parameter variable">-v</span> <span class="token number">2.6</span>.18_pro500-bcm91250-mips2_fp_be <span class="token parameter variable">-A</span> <span class="token parameter variable">-a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他用法：</p><p>在linux桌面系统中，当你编译了新的驱动，为了能够用<code>modprobe ***</code>加载模块, 你需要先将模块拷贝到<code>/lib/modules /2.6.31-20-generic</code>目录下，然后运行<code>sudo depmod -a</code>将模块信息写入modules.dep、modules.dep.bin、modules.alias.bin、modules.alias和modules.pcimap文件中。</p><p>如，我编译了一个新的wifi驱动r8192se_pci.ko，将其拷贝到<code>/lib/modules/2.6.31-20-generic/wireless</code>下，然后到<code>/lib/modules/2.6.31-20-generic</code>运行<code>depmod -a</code>，之后可以在任意目录运行modprobe r8192se_pci。</p>`,16),i=[l];function t(d,p){return a(),s("div",null,i)}const m=e(o,[["render",t],["__file","depmod.html.vue"]]),u=JSON.parse('{"path":"/command/linux/depmod.html","title":"depmod","lang":"zh-CN","frontmatter":{"description":"depmod 分析可载入模块的相依性 补充说明 depmod命令 可产生模块依赖的映射文件，在构建嵌入式系统时，需要由这个命令来生成相应的文件，由modprobe使用。 语法 选项 实例 /home/windsome/EMMA3PF-KernelSource-20080626/install_pos是我make mod_install后，所有模块的存放...","head":[["meta",{"property":"og:url","content":"https://baymaxcoding.github.io/command/linux/depmod.html"}],["meta",{"property":"og:site_name","content":"BaymaxCoding"}],["meta",{"property":"og:title","content":"depmod"}],["meta",{"property":"og:description","content":"depmod 分析可载入模块的相依性 补充说明 depmod命令 可产生模块依赖的映射文件，在构建嵌入式系统时，需要由这个命令来生成相应的文件，由modprobe使用。 语法 选项 实例 /home/windsome/EMMA3PF-KernelSource-20080626/install_pos是我make mod_install后，所有模块的存放..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T04:24:50.000Z"}],["meta",{"property":"article:author","content":"BaymaxCoding"}],["meta",{"property":"article:modified_time","content":"2024-04-12T04:24:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"depmod\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T04:24:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BaymaxCoding\\",\\"url\\":\\"https://baymaxcoding.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"补充说明","slug":"补充说明","link":"#补充说明","children":[{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"选项","slug":"选项","link":"#选项","children":[]},{"level":3,"title":"实例","slug":"实例","link":"#实例","children":[]}]}],"git":{"createdTime":1712895890000,"updatedTime":1712895890000,"contributors":[{"name":"BaymaxCoding","email":"BRemail2324996822@163.com","commits":1}]},"readingTime":{"minutes":1.37,"words":410},"filePathRelative":"command/linux/depmod.md","localizedDate":"2024年4月12日","autoDesc":true}');export{m as comp,u as data};
