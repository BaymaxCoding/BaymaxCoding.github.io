import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,e as s}from"./app-D_HUMAmc.js";const i={},d=s(`<h1 id="dc" tabindex="-1"><a class="header-anchor" href="#dc"><span>dc</span></a></h1><p>任意精度计算器</p><h2 id="说明" tabindex="-1"><a class="header-anchor" href="#说明"><span>说明</span></a></h2><p>dc 是一款逆波兰表达式计算器，支持无限制精度的算术运算。它还允许您定义和调用宏。通常，dc从标准输入读取，也可以通过参数传入文件来求值。</p><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">dc</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>文件<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="选项" tabindex="-1"><a class="header-anchor" href="#选项"><span>选项</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>-e, <span class="token parameter variable">--expression</span><span class="token operator">=</span>EXPR    <span class="token comment"># 评估表达式</span>
-f, <span class="token parameter variable">--file</span><span class="token operator">=</span>FILE          <span class="token comment"># 评估文件内容</span>
-h, <span class="token parameter variable">--help</span>               <span class="token comment"># 显示此帮助并退出</span>
-V, <span class="token parameter variable">--version</span>            <span class="token comment"># 输出版本信息并退出</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>p 打印堆栈顶部的值并以换行符结束语句。
n 打印堆栈顶部的值并以空语句结束行。
f 打印整个堆栈，不做任何更改。
P 从栈顶弹出值。
c 清除堆栈。
d 复制顶部值并将其推入主堆栈。
r 反转堆栈中顶部两个元素的顺序。
Z 从堆栈中弹出值，计算其中的位数并压入该数字。
X 从堆栈中弹出值，计算其中的小数位数并压入该数字。
z 将堆栈长度推入堆栈。
i 从堆栈中弹出值并将其用作输入基数。
o 从堆栈中弹出值并将其用作输出基数。
k 从堆栈中弹出值并使用它来设置精度。
I 将输入基数的值推入堆栈。
O 将输出基数的值压入堆栈
K 将精度值压入堆栈。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><p>下面是 <code>dc</code> 命令在命令行完成的计算 <code>10 * 10</code> 得出结果 <code>100</code>，并推出的过程</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">dc</span>        

<span class="token number">10</span>          <span class="token comment"># 1. 输入数字10</span>
<span class="token number">10</span>          <span class="token comment"># 2. 输入数字10</span>
*           <span class="token comment"># 3. 输入运算类型*表示乘</span>
p           <span class="token comment"># 4. 输入p得到计算结果</span>
<span class="token number">100</span>
q           <span class="token comment"># 5. 输入 q 退出 dc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例显示在命令行结果 <code>509</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">dc</span> <span class="token parameter variable">--expression</span><span class="token operator">=</span><span class="token string">&quot;50 10 * 9 + p&quot;</span>
<span class="token number">509</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="支持的运算" tabindex="-1"><a class="header-anchor" href="#支持的运算"><span>支持的运算</span></a></h2><p><code>+</code> 从堆栈中弹出两个值，将它们相加，然后压栈结果。</p><p><code>-</code> 弹出两个值，从弹出的第二个值中减去弹出的第一个值，并压栈结果。</p><p><code>*</code> 弹出两个值，将它们相乘，然后压栈结果。结果中分数位数取决于当前精度值和两个参数中的分数位数。</p><p><code>/</code> 弹出两个值，将弹出的第二个值与弹出的第一个值相除，然后推送结果。分数位数由精度值指定。</p><p><code>%</code> 弹出两个值，计算/命令将执行的除法的剩余部分，并推送该值。计算的值与序列 <code>Sd dld/Ld*- </code>计算的值相同。</p><p><code>~</code> 弹出两个值，将弹出的第二个值与弹出的第一个值相除。首先推送商，然后推送余数。除法中使用的小数位数由精度值指定。</p><p>（序列 SdSn lnld/lnld% 也可以完成此功能，但错误检查略有不同。）</p><p><code>^</code> 使用弹出的第一个值作为指数，第二个值作为基数，弹出两个值并进行幂运算。忽略指数的分数部分。</p><p><code>|</code> 弹出三个值并计算模幂。 弹出的第一个值用作约简模数； 这个值必须是一个非零数字，并且应该是一个整数。 弹出的第二个用作指数； 该值必须是非负数，并且该指数的任何小数部分都将被忽略。 弹出的第三个值是取幂的基数，它应该是一个整数。 对于小整数，这类似于序列 Sm^Lm%，但与 ^ 不同的是，此命令适用于任意大的指数。</p><p><code>v</code> 弹出一个值，计算其平方根，然后压栈它。精度值的最大值和参数的精度用于确定结果中的小数位数。</p>`,25),c=[d];function t(l,o){return n(),a("div",null,c)}const m=e(i,[["render",t],["__file","dc.html.vue"]]),u=JSON.parse('{"path":"/command/linux/dc.html","title":"dc","lang":"zh-CN","frontmatter":{"description":"dc 任意精度计算器 说明 dc 是一款逆波兰表达式计算器，支持无限制精度的算术运算。它还允许您定义和调用宏。通常，dc从标准输入读取，也可以通过参数传入文件来求值。 语法 选项 示例 下面是 dc 命令在命令行完成的计算 10 * 10 得出结果 100，并推出的过程 示例显示在命令行结果 509 支持的运算 + 从堆栈中弹出两个值，将它们相加，然后...","head":[["meta",{"property":"og:url","content":"https://baymaxcoding.github.io/command/linux/dc.html"}],["meta",{"property":"og:site_name","content":"BaymaxCoding"}],["meta",{"property":"og:title","content":"dc"}],["meta",{"property":"og:description","content":"dc 任意精度计算器 说明 dc 是一款逆波兰表达式计算器，支持无限制精度的算术运算。它还允许您定义和调用宏。通常，dc从标准输入读取，也可以通过参数传入文件来求值。 语法 选项 示例 下面是 dc 命令在命令行完成的计算 10 * 10 得出结果 100，并推出的过程 示例显示在命令行结果 509 支持的运算 + 从堆栈中弹出两个值，将它们相加，然后..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T04:24:50.000Z"}],["meta",{"property":"article:author","content":"BaymaxCoding"}],["meta",{"property":"article:modified_time","content":"2024-04-12T04:24:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"dc\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T04:24:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BaymaxCoding\\",\\"url\\":\\"https://baymaxcoding.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"说明","slug":"说明","link":"#说明","children":[]},{"level":2,"title":"语法","slug":"语法","link":"#语法","children":[{"level":3,"title":"选项","slug":"选项","link":"#选项","children":[]}]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"支持的运算","slug":"支持的运算","link":"#支持的运算","children":[]}],"git":{"createdTime":1712895890000,"updatedTime":1712895890000,"contributors":[{"name":"BaymaxCoding","email":"BRemail2324996822@163.com","commits":1}]},"readingTime":{"minutes":3.01,"words":904},"filePathRelative":"command/linux/dc.md","localizedDate":"2024年4月12日","autoDesc":true}');export{m as comp,u as data};
