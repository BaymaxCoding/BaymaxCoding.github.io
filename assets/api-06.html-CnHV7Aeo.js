import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-D_HUMAmc.js";const p={},e=t(`<h1 id="web-apis-第6天笔记" tabindex="-1"><a class="header-anchor" href="#web-apis-第6天笔记"><span>Web APIs - 第6天笔记</span></a></h1><blockquote><p>目标：能够利用正则表达式完成小兔鲜注册页面的表单验证，具备常见的表单验证能力</p></blockquote><ul><li>正则表达式</li><li>综合案例</li><li>阶段案例</li></ul><h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式"><span>正则表达式</span></a></h2><p><strong>正则表达式</strong>（Regular Expression）是一种字符串匹配的模式（规则）</p><p><strong>使用场景：</strong></p><ul><li>例如验证表单：手机号表单要求用户只能输入11位的数字 (匹配)</li><li>过滤掉页面内容中的一些敏感词(替换)，或从字符串中获取我们想要的特定部分(提取)等</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676079666366.png" alt="67607966636" tabindex="0" loading="lazy"><figcaption>67607966636</figcaption></figure><h3 id="正则基本使用" tabindex="-1"><a class="header-anchor" href="#正则基本使用"><span>正则基本使用</span></a></h3><ol><li><p>定义规则</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript" data-title="JavaScript"><pre class="language-JavaScript"><code>const reg =  /表达式/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>其中<code>/ /</code>是正则表达式字面量</li><li>正则表达式也是<code>对象 </code></li></ul></li><li><p>使用正则</p><ul><li><code>test()方法</code> 用来查看正则表达式与指定的字符串是否匹配</li><li>如果正则表达式与指定的字符串匹配 ，返回<code>true</code>，否则<code>false</code></li></ul></li></ol><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 正则表达式的基本使用</span>
    <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;web前端开发&#39;</span>
    <span class="token comment">// 1. 定义规则</span>
    <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">web</span><span class="token regex-delimiter">/</span></span>

    <span class="token comment">// 2. 使用正则  test()</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true  如果符合规则匹配上则返回true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;java开发&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false  如果不符合规则匹配上则返回 false</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="元字符" tabindex="-1"><a class="header-anchor" href="#元字符"><span>元字符</span></a></h3><ol><li><strong>普通字符:</strong></li></ol><ul><li>大多数的字符仅能够描述它们本身，这些字符称作普通字符，例如所有的字母和数字。</li><li>普通字符只能够匹配字符串中与它们相同的字符。</li><li>比如，规定用户只能输入英文26个英文字母，普通字符的话 /[abcdefghijklmnopqrstuvwxyz]/</li></ul><ol start="2"><li><strong>元字符(特殊字符）</strong></li></ol><ul><li>是一些具有特殊含义的字符，可以极大提高了灵活性和强大的匹配功能。</li><li>比如，规定用户只能输入英文26个英文字母，换成元字符写法： /[a-z]/</li></ul><h4 id="边界符" tabindex="-1"><a class="header-anchor" href="#边界符"><span>边界符</span></a></h4><p>正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符</p><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676080081650.png" alt="67608008165" tabindex="0" loading="lazy"><figcaption>67608008165</figcaption></figure><blockquote><p>如果 ^ 和 $ 在一起，表示必须是精确匹配</p></blockquote><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 元字符之边界符</span>
    <span class="token comment">// 1. 匹配开头的位置 ^</span>
    <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^web</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;web前端&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;前端web&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;前端web学习&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;we&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>

    <span class="token comment">// 2. 匹配结束的位置 $</span>
    <span class="token keyword">const</span> reg1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">web$</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;web前端&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//  false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;前端web&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;前端web学习&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;we&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false  </span>

    <span class="token comment">// 3. 精确匹配 ^ $</span>
    <span class="token keyword">const</span> reg2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^web$</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;web前端&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//  false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;前端web&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;前端web学习&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;we&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false </span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;web&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;webweb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// flase </span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="量词" tabindex="-1"><a class="header-anchor" href="#量词"><span>量词</span></a></h4><p>量词用来设定某个模式重复次数</p><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676080185383.png" alt="67608018538" tabindex="0" loading="lazy"><figcaption>67608018538</figcaption></figure><blockquote><p>注意： 逗号左右两侧千万不要出现空格</p></blockquote><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 元字符之量词</span>
    <span class="token comment">// 1. * 重复次数 &gt;= 0 次</span>
    <span class="token keyword">const</span> reg1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^w*$</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;ww&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-----------------------&#39;</span><span class="token punctuation">)</span>

    <span class="token comment">// 2. + 重复次数 &gt;= 1 次</span>
    <span class="token keyword">const</span> reg2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^w+$</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;ww&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-----------------------&#39;</span><span class="token punctuation">)</span>

    <span class="token comment">// 3. ? 重复次数  0 || 1 </span>
    <span class="token keyword">const</span> reg3 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^w?$</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;ww&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-----------------------&#39;</span><span class="token punctuation">)</span>


    <span class="token comment">// 4. {n} 重复 n 次</span>
    <span class="token keyword">const</span> reg4 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^w{3}$</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// flase</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;ww&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;www&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;wwww&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-----------------------&#39;</span><span class="token punctuation">)</span>

    <span class="token comment">// 5. {n,} 重复次数 &gt;= n </span>
    <span class="token keyword">const</span> reg5 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^w{2,}$</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg5<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg5<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg5<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;ww&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg5<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;www&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-----------------------&#39;</span><span class="token punctuation">)</span>

    <span class="token comment">// 6. {n,m}   n =&lt; 重复次数 &lt;= m</span>
    <span class="token keyword">const</span> reg6 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^w{2,4}$</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg6<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg6<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;ww&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg6<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;www&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg6<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;wwww&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg6<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;wwwww&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>

    <span class="token comment">// 7. 注意事项： 逗号两侧千万不要加空格否则会匹配失败</span>

  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="范围" tabindex="-1"><a class="header-anchor" href="#范围"><span>范围</span></a></h4><p>表示字符的范围，定义的规则限定在某个范围，比如只能是英文字母，或者数字等等，用表示范围</p><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676080296168.png" alt="67608029616" tabindex="0" loading="lazy"><figcaption>67608029616</figcaption></figure><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 元字符之范围  []  </span>
    <span class="token comment">// 1. [abc] 匹配包含的单个字符， 多选1</span>
    <span class="token keyword">const</span> reg1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[abc]$</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;ab&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>

    <span class="token comment">// 2. [a-z] 连字符 单个</span>
    <span class="token keyword">const</span> reg2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-z]$</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    <span class="token comment">// 想要包含小写字母，大写字母 ，数字</span>
    <span class="token keyword">const</span> reg3 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z0-9]$</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// flase</span>

    <span class="token comment">// 用户名可以输入英文字母，数字，可以加下划线，要求 6~16位</span>
    <span class="token keyword">const</span> reg4 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z0-9_]{6,16}$</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;abcd1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false </span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;abcd12&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;ABcd12&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;ABcd12_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>

    <span class="token comment">// 3. [^a-z] 取反符</span>
    <span class="token keyword">const</span> reg5 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[^a-z]$</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg5<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false </span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg5<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg5<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>

  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符类" tabindex="-1"><a class="header-anchor" href="#字符类"><span>字符类</span></a></h4><p>某些常见模式的简写方式，区分字母和数字</p><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676080353637.png" alt="67608035363" tabindex="0" loading="lazy"><figcaption>67608035363</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676080372325.png" alt="67608037232" tabindex="0" loading="lazy"><figcaption>67608037232</figcaption></figure><h2 id="替换和修饰符" tabindex="-1"><a class="header-anchor" href="#替换和修饰符"><span>替换和修饰符</span></a></h2><p>replace 替换方法，可以完成字符的替换</p><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676080437160.png" alt="67608043716" tabindex="0" loading="lazy"><figcaption>67608043716</figcaption></figure><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 替换和修饰符</span>
    <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;欢迎大家学习前端，相信大家一定能学好前端，都成为前端大神&#39;</span>
    <span class="token comment">// 1. 替换  replace  需求：把前端替换为 web</span>
    <span class="token comment">// 1.1 replace 返回值是替换完毕的字符串</span>
    <span class="token comment">// const strEnd = str.replace(/前端/, &#39;web&#39;) 只能替换一个</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修饰符约束正则执行的某些细节行为，如是否区分大小写、是否支持多行匹配等</p><ul><li>i 是单词 ignore 的缩写，正则匹配时字母不区分大小写</li><li>g 是单词 global 的缩写，匹配所有满足正则表达式的结果</li></ul><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 替换和修饰符</span>
    <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;欢迎大家学习前端，相信大家一定能学好前端，都成为前端大神&#39;</span>
    <span class="token comment">// 1. 替换  replace  需求：把前端替换为 web</span>
    <span class="token comment">// 1.1 replace 返回值是替换完毕的字符串</span>
    <span class="token comment">// const strEnd = str.replace(/前端/, &#39;web&#39;) 只能替换一个</span>

    <span class="token comment">// 2. 修饰符 g 全部替换</span>
    <span class="token keyword">const</span> strEnd <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">前端</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;web&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strEnd<span class="token punctuation">)</span> 
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="正则插件" tabindex="-1"><a class="header-anchor" href="#正则插件"><span>正则插件</span></a></h2><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676080548639.png" alt="67608054863" tabindex="0" loading="lazy"><figcaption>67608054863</figcaption></figure><h2 id="change-事件" tabindex="-1"><a class="header-anchor" href="#change-事件"><span>change 事件</span></a></h2><p>给input注册 change 事件，值被修改并且失去焦点后触发</p><h2 id="判断是否有类" tabindex="-1"><a class="header-anchor" href="#判断是否有类"><span>判断是否有类</span></a></h2><figure><img src="https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676080618794.png" alt="67608061879" tabindex="0" loading="lazy"><figcaption>67608061879</figcaption></figure><p>元素.classList.contains() 看看有没有包含某个类，如果有则返回true，么有则返回false</p>`,48),c=[e];function o(l,i){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","api-06.html.vue"]]),d=JSON.parse('{"path":"/posts/web/javascript/api/api-06.html","title":"JavaScript WebApi（六）正则表达式","lang":"zh-CN","frontmatter":{"title":"JavaScript WebApi（六）正则表达式","date":"2024-03-28T00:00:00.000Z","category":["前端"],"tag":["JavaScript"],"description":"Web APIs - 第6天笔记 目标：能够利用正则表达式完成小兔鲜注册页面的表单验证，具备常见的表单验证能力 正则表达式 综合案例 阶段案例 正则表达式 正则表达式（Regular Expression）是一种字符串匹配的模式（规则） 使用场景： 例如验证表单：手机号表单要求用户只能输入11位的数字 (匹配) 过滤掉页面内容中的一些敏感词(替换)，或...","head":[["meta",{"property":"og:url","content":"https://baymaxcoding.github.io/posts/web/javascript/api/api-06.html"}],["meta",{"property":"og:site_name","content":"BaymaxCoding"}],["meta",{"property":"og:title","content":"JavaScript WebApi（六）正则表达式"}],["meta",{"property":"og:description","content":"Web APIs - 第6天笔记 目标：能够利用正则表达式完成小兔鲜注册页面的表单验证，具备常见的表单验证能力 正则表达式 综合案例 阶段案例 正则表达式 正则表达式（Regular Expression）是一种字符串匹配的模式（规则） 使用场景： 例如验证表单：手机号表单要求用户只能输入11位的数字 (匹配) 过滤掉页面内容中的一些敏感词(替换)，或..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676079666366.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T12:11:02.000Z"}],["meta",{"property":"article:author","content":"BaymaxCoding"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:published_time","content":"2024-03-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T12:11:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript WebApi（六）正则表达式\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676079666366.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676080081650.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676080185383.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676080296168.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676080353637.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676080372325.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676080437160.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676080548639.png\\",\\"https://cdn.jsdelivr.net/gh/baymaxcoding/pic_rep/imgs/1676080618794.png\\"],\\"datePublished\\":\\"2024-03-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-12T12:11:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BaymaxCoding\\",\\"url\\":\\"https://baymaxcoding.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"正则表达式","slug":"正则表达式","link":"#正则表达式","children":[{"level":3,"title":"正则基本使用","slug":"正则基本使用","link":"#正则基本使用","children":[]},{"level":3,"title":"元字符","slug":"元字符","link":"#元字符","children":[]}]},{"level":2,"title":"替换和修饰符","slug":"替换和修饰符","link":"#替换和修饰符","children":[]},{"level":2,"title":"正则插件","slug":"正则插件","link":"#正则插件","children":[]},{"level":2,"title":"change 事件","slug":"change-事件","link":"#change-事件","children":[]},{"level":2,"title":"判断是否有类","slug":"判断是否有类","link":"#判断是否有类","children":[]}],"git":{"createdTime":1712923862000,"updatedTime":1712923862000,"contributors":[{"name":"BaymaxCoding","email":"BRemail2324996822@163.com","commits":1}]},"readingTime":{"minutes":5.33,"words":1599},"filePathRelative":"posts/web/javascript/api/api-06.md","localizedDate":"2024年3月28日","autoDesc":true}');export{r as comp,d as data};
