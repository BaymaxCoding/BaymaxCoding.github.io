import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,b as e}from"./app-CHACLx4z.js";const i={},l=e(`<h1 id="sed" tabindex="-1"><a class="header-anchor" href="#sed"><span>sed</span></a></h1><p>功能强大的流式文本编辑器</p><h2 id="补充说明" tabindex="-1"><a class="header-anchor" href="#补充说明"><span>补充说明</span></a></h2><p><strong>sed</strong> 是一种流编辑器，它是文本处理中非常重要的工具，能够完美的配合正则表达式使用，功能不同凡响。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。</p><h2 id="sed的选项、命令、替换标记" tabindex="-1"><a class="header-anchor" href="#sed的选项、命令、替换标记"><span>sed的选项、命令、替换标记</span></a></h2><p><strong>命令格式</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token string">&#39;command&#39;</span> file<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token function">sed</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token parameter variable">-f</span> scriptfile file<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="选项" tabindex="-1"><a class="header-anchor" href="#选项"><span>选项</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>-e<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>或--expression<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>：以选项中的指定的script来处理输入的文本文件；
-f<span class="token operator">&lt;</span>script文件<span class="token operator">&gt;</span>或--file<span class="token operator">=</span><span class="token operator">&lt;</span>script文件<span class="token operator">&gt;</span>：以选项中指定的script文件来处理输入的文本文件；
-h或--help：显示帮助；
-n或--quiet或——silent：仅显示script处理后的结果；
-V或--version：显示版本信息。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h3><p>文件：指定待处理的文本文件列表。</p><h3 id="sed命令" tabindex="-1"><a class="header-anchor" href="#sed命令"><span>sed命令</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>a<span class="token punctuation">\\</span> <span class="token comment"># 在当前行下面插入文本。</span>
i<span class="token punctuation">\\</span> <span class="token comment"># 在当前行上面插入文本。</span>
c<span class="token punctuation">\\</span> <span class="token comment"># 把选定的行改为新的文本。</span>
d <span class="token comment"># 删除，删除选择的行。</span>
D <span class="token comment"># 删除模板块的第一行。</span>
s <span class="token comment"># 替换指定字符</span>
h <span class="token comment"># 拷贝模板块的内容到内存中的缓冲区。</span>
H <span class="token comment"># 追加模板块的内容到内存中的缓冲区。</span>
g <span class="token comment"># 获得内存缓冲区的内容，并替代当前模板块中的文本。</span>
G <span class="token comment"># 获得内存缓冲区的内容，并追加到当前模板块文本的后面。</span>
l <span class="token comment"># 列表不能打印字符的清单。</span>
n <span class="token comment"># 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。</span>
N <span class="token comment"># 追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。</span>
p <span class="token comment"># 打印模板块的行。</span>
P <span class="token comment"># (大写) 打印模板块的第一行。</span>
q <span class="token comment"># 退出Sed。</span>
b lable <span class="token comment"># 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。</span>
r <span class="token function">file</span> <span class="token comment"># 从file中读行。</span>
t label <span class="token comment"># if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。</span>
T label <span class="token comment"># 错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。</span>
w <span class="token function">file</span> <span class="token comment"># 写并追加模板块到file末尾。  </span>
W <span class="token function">file</span> <span class="token comment"># 写并追加模板块的第一行到file末尾。  </span>
<span class="token operator">!</span> <span class="token comment"># 表示后面的命令对所有没有被选定的行发生作用。  </span>
<span class="token operator">=</span> <span class="token comment"># 打印当前行号码。  </span>
<span class="token comment"># # 把注释扩展到下一个换行符以前。  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sed替换标记" tabindex="-1"><a class="header-anchor" href="#sed替换标记"><span>sed替换标记</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>g <span class="token comment"># 表示行内全面替换。  </span>
p <span class="token comment"># 表示打印行。  </span>
w <span class="token comment"># 表示把行写入一个文件。  </span>
x <span class="token comment"># 表示互换模板块中的文本和缓冲区中的文本。  </span>
y <span class="token comment"># 表示把一个字符翻译为另外的字符（但是不用于正则表达式）</span>
<span class="token punctuation">\\</span><span class="token number">1</span> <span class="token comment"># 子串匹配标记</span>
<span class="token operator">&amp;</span> <span class="token comment"># 已匹配字符串标记</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sed元字符集" tabindex="-1"><a class="header-anchor" href="#sed元字符集"><span>sed元字符集</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>^ <span class="token comment"># 匹配行开始，如：/^sed/匹配所有以sed开头的行。</span>
$ <span class="token comment"># 匹配行结束，如：/sed$/匹配所有以sed结尾的行。</span>
<span class="token builtin class-name">.</span> <span class="token comment"># 匹配一个非换行符的任意字符，如：/s.d/匹配s后接一个任意字符，最后是d。</span>
* <span class="token comment"># 匹配0个或多个字符，如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment"># 匹配一个指定范围内的字符，如/[sS]ed/匹配sed和Sed。  </span>
<span class="token punctuation">[</span>^<span class="token punctuation">]</span> <span class="token comment"># 匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。</span>
<span class="token punctuation">\\</span><span class="token punctuation">(</span><span class="token punctuation">..</span><span class="token punctuation">\\</span><span class="token punctuation">)</span> <span class="token comment"># 匹配子串，保存匹配的字符，如s/\\(love\\)able/\\1rs，loveable被替换成lovers。</span>
<span class="token operator">&amp;</span> <span class="token comment"># 保存搜索字符用来替换其他字符，如s/love/ **&amp;** /，love这成 **love** 。</span>
<span class="token punctuation">\\</span><span class="token operator">&lt;</span> <span class="token comment"># 匹配单词的开始，如:/\\&lt;love/匹配包含以love开头的单词的行。</span>
<span class="token punctuation">\\</span><span class="token operator">&gt;</span> <span class="token comment"># 匹配单词的结束，如/love\\&gt;/匹配包含以love结尾的单词的行。</span>
x<span class="token punctuation">\\</span><span class="token punctuation">{</span>m<span class="token punctuation">\\</span><span class="token punctuation">}</span> <span class="token comment"># 重复字符x，m次，如：/0\\{5\\}/匹配包含5个0的行。</span>
x<span class="token punctuation">\\</span><span class="token punctuation">{</span>m,<span class="token punctuation">\\</span><span class="token punctuation">}</span> <span class="token comment"># 重复字符x，至少m次，如：/0\\{5,\\}/匹配至少有5个0的行。</span>
x<span class="token punctuation">\\</span><span class="token punctuation">{</span>m,n<span class="token punctuation">\\</span><span class="token punctuation">}</span> <span class="token comment"># 重复字符x，至少m次，不多于n次，如：/0\\{5,10\\}/匹配5~10个0的行。  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sed用法实例" tabindex="-1"><a class="header-anchor" href="#sed用法实例"><span>sed用法实例</span></a></h2><h3 id="替换操作-s命令" tabindex="-1"><a class="header-anchor" href="#替换操作-s命令"><span>替换操作：s命令</span></a></h3><p>替换文本中的字符串：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;s/book/books/&#39;</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>-n选项</strong> 和 <strong>p命令</strong> 一起使用表示只打印那些发生替换的行：</p><p>sed -n &#39;s/test/TEST/p&#39; file</p><p>直接编辑文件 <strong>选项-i</strong> ，会匹配file文件中每一行的所有book替换为books：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/book/books/g&#39;</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="全面替换标记g" tabindex="-1"><a class="header-anchor" href="#全面替换标记g"><span>全面替换标记g</span></a></h3><p>使用后缀 /g 标记会替换每一行中的所有匹配：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;s/book/books/g&#39;</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当需要从第N处匹配开始替换时，可以使用 /Ng：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> sksksksksksk <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&#39;s/sk/SK/2g&#39;</span>
skSKSKSKSKSK

<span class="token builtin class-name">echo</span> sksksksksksk <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&#39;s/sk/SK/3g&#39;</span>
skskSKSKSKSK

<span class="token builtin class-name">echo</span> sksksksksksk <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&#39;s/sk/SK/4g&#39;</span>
skskskSKSKSK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="定界符" tabindex="-1"><a class="header-anchor" href="#定界符"><span>定界符</span></a></h3><p>以上命令中字符 / 在sed中作为定界符使用，也可以使用任意的定界符：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;s:test:TEXT:g&#39;</span>
<span class="token function">sed</span> <span class="token string">&#39;s|test|TEXT|g&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>定界符出现在样式内部时，需要进行转义：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;s/\\/bin/\\/usr\\/local\\/bin/g&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="删除操作-d命令" tabindex="-1"><a class="header-anchor" href="#删除操作-d命令"><span>删除操作：d命令</span></a></h3><p>删除空白行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;/^$/d&#39;</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除文件的第2行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;2d&#39;</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除文件的第2行到末尾所有行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;2,$d&#39;</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除文件最后一行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;$d&#39;</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除文件中所有开头是test的行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;/^test/&#39;</span>d <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="已匹配字符串标记" tabindex="-1"><a class="header-anchor" href="#已匹配字符串标记"><span>已匹配字符串标记&amp;</span></a></h3><p>正则表达式 \\w+ 匹配每一个单词，使用 [&amp;] 替换它，&amp; 对应于之前所匹配到的单词：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> this is a <span class="token builtin class-name">test</span> line <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&#39;s/\\w\\+/[&amp;]/g&#39;</span>
<span class="token punctuation">[</span>this<span class="token punctuation">]</span> <span class="token punctuation">[</span>is<span class="token punctuation">]</span> <span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token punctuation">[</span>test<span class="token punctuation">]</span> <span class="token punctuation">[</span>line<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>所有以192.168.0.1开头的行都会被替换成它自已加localhost：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;s/^192.168.0.1/&amp;localhost/&#39;</span> <span class="token function">file</span>
<span class="token number">192.168</span>.0.1localhost
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="子串匹配标记-1" tabindex="-1"><a class="header-anchor" href="#子串匹配标记-1"><span>子串匹配标记\\1</span></a></h3><p>匹配给定样式的其中一部分：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> this is digit <span class="token number">7</span> <span class="token keyword">in</span> a number <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&#39;s/digit \\([0-9]\\)/\\1/&#39;</span>
this is <span class="token number">7</span> <span class="token keyword">in</span> a number
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>命令中 digit 7，被替换成了 7。样式匹配到的子串是 7，(..) 用于匹配子串，对于匹配到的第一个子串就标记为 <strong>\\1</strong> ，依此类推匹配到的第二个结果就是 <strong>\\2</strong> ，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> aaa BBB <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&#39;s/\\([a-z]\\+\\) \\([A-Z]\\+\\)/\\2 \\1/&#39;</span>
BBB aaa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>love被标记为1，所有loveable会被替换成lovers，并打印出来：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;s/\\(love\\)able/\\1rs/p&#39;</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过替换获取ip：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ifconfig</span> ens32 <span class="token operator">|</span> <span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;/inet /p&#39;</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&#39;s/inet \\([0-9.]\\+\\).*/\\1/&#39;</span>
<span class="token number">192.168</span>.75.126
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="大小写转换u-l" tabindex="-1"><a class="header-anchor" href="#大小写转换u-l"><span>大小写转换U/L</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">\\</span>u：	首字母转换为大写
<span class="token punctuation">\\</span>U：  全部转换为大写
<span class="token punctuation">\\</span>l：	 首字母转换为小写
<span class="token punctuation">\\</span>L：	 全部转换为小写
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首字母转换为大写：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@node6 ~<span class="token punctuation">]</span><span class="token comment"># sed &#39;s/^[a-z]\\+/\\u&amp;/&#39; passwd </span>
Root:x:0:0:root:/root:/bin/bash
Bin:x:1:1:bin:/bin:/sbin/nologin
Daemon:x:2:2:daemon:/sbin:/sbin/nologin
Adm:x:3:4:adm:/var/adm:/sbin/nologin
Lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
Sync:x:5:0:sync:/sbin:/bin/sync
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>匹配到的字符全部转换为大写：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@node6 ~<span class="token punctuation">]</span><span class="token comment"># sed &#39;s/^[a-z]\\+/\\U&amp;/&#39; passwd </span>
ROOT:x:0:0:root:/root:/bin/bash
BIN:x:1:1:bin:/bin:/sbin/nologin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组合多个表达式" tabindex="-1"><a class="header-anchor" href="#组合多个表达式"><span>组合多个表达式</span></a></h3><ol><li>替换文本中的多个字符串：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/old_string/new_string/g&#39;</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/another_old_string/another_new_string/g&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>删除文本中的多个行：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;1d&#39;</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;/pattern/d&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>在文本中插入多个行：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;1i\\inserted_line1&#39;</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;2i\\inserted_line2&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，-e 表示指定一个表达式，多个表达式之间用 -e 分隔。每个表达式可以是一个 sed 命令，例如 s、d、i 等。</p><h3 id="引用" tabindex="-1"><a class="header-anchor" href="#引用"><span>引用</span></a></h3><p>sed表达式可以使用单引号来引用，但是如果表达式内部包含变量字符串，就需要使用双引号。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">test</span><span class="token operator">=</span>hello
<span class="token builtin class-name">echo</span> hello WORLD <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&quot;s/<span class="token variable">$test</span>/HELLO&quot;</span>
HELLO WORLD
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="选定行的范围-逗号" tabindex="-1"><a class="header-anchor" href="#选定行的范围-逗号"><span>选定行的范围：,（逗号）</span></a></h3><p>所有在模板test和check所确定的范围内的行都被打印：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;/test/,/check/p&#39;</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打印从第5行开始到第一个包含以test开始的行之间的所有行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;5,/^test/p&#39;</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于模板test和west之间的行，每行的末尾用字符串aaa bbb替换：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;/test/,/west/s/$/aaa bbb/&#39;</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="多点编辑-e命令" tabindex="-1"><a class="header-anchor" href="#多点编辑-e命令"><span>多点编辑：e命令</span></a></h3><p>-e选项允许在同一行里执行多条命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;1,5d&#39;</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/test/check/&#39;</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面sed表达式的第一条命令删除1至5行，第二条命令用check替换test。命令的执行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。</p><p>和 -e 等价的命令是 --expression：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">--expression</span><span class="token operator">=</span><span class="token string">&#39;s/test/check/&#39;</span> <span class="token parameter variable">--expression</span><span class="token operator">=</span><span class="token string">&#39;/love/d&#39;</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="从文件读入-r命令" tabindex="-1"><a class="header-anchor" href="#从文件读入-r命令"><span>从文件读入：r命令</span></a></h3><p>file里的内容被读进来，显示在与test匹配的行后面，如果匹配多行，则file的内容将显示在所有匹配行的下面：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;/test/r file&#39;</span> filename
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="写入文件-w命令" tabindex="-1"><a class="header-anchor" href="#写入文件-w命令"><span>写入文件：w命令</span></a></h3><p>在example中所有包含test的行都被写入file里：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;/test/w file&#39;</span> example
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="追加-行下-a-命令" tabindex="-1"><a class="header-anchor" href="#追加-行下-a-命令"><span>追加（行下）：a\\命令</span></a></h3><p>将 this is a test line 追加到 以test 开头的行后面：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;/^test/a\\this is a test line&#39;</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 test.conf 文件第2行之后插入 this is a test line：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;2a\\this is a test line&#39;</span> test.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="插入-行上-i-命令" tabindex="-1"><a class="header-anchor" href="#插入-行上-i-命令"><span>插入（行上）：i\\命令</span></a></h3><p>将 this is a test line 追加到以test开头的行前面：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;/^test/i\\this is a test line&#39;</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在test.conf文件第5行之前插入this is a test line：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;5i\\this is a test line&#39;</span> test.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="替换指定行-c-命令" tabindex="-1"><a class="header-anchor" href="#替换指定行-c-命令"><span>替换指定行：c\\命令</span></a></h3><p>把root开头的行替换新内容：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@node6 ~<span class="token punctuation">]</span><span class="token comment"># sed &#39;/^root/c this is new line!&#39; passwd </span>
this is new line<span class="token operator">!</span>
bin:x:1:1:bin:/bin:/sbin/nologin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是指定范围替换，需要注意，sed不是每行进行替换，而是把整个范围作为整体替换：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@node6 ~<span class="token punctuation">]</span><span class="token comment"># nl passwd | sed &#39;1,5c\\   this is dangerous!&#39;</span>
     this is dangerous<span class="token operator">!</span>
     <span class="token number">6</span>	sync:x:5:0:sync:/sbin:/bin/sync
     <span class="token number">7</span>	shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想实现对第一行到第五行统一替换为相同内容，可以用下面的命令实现：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@node5 ~<span class="token punctuation">]</span><span class="token comment"># sed &#39;1{:a;s/.*/lutxixia/;n;6!ba}&#39; passwd </span>
lutxixia
lutxixia
lutxixia
lutxixia
lutxixia
sync:x:5:0:sync:/sbin:/bin/sync

其中：
:a  	是设置一个循环标签
s/.*/lutixia/	是用lutixia字符替换匹配到的每行内容
n	是读取下一行
<span class="token number">6</span><span class="token operator">!</span>	是读到第六行退出循环，终止操作,如果没有，则继续循环。
ba	是如果没有到第六行就跳转到a继续循环
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="下一个-n命令" tabindex="-1"><a class="header-anchor" href="#下一个-n命令"><span>下一个：n命令</span></a></h3><p>如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行，然后继续：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;/test/{ n; s/aa/bb/; }&#39;</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="变形-y命令" tabindex="-1"><a class="header-anchor" href="#变形-y命令"><span>变形：y命令</span></a></h3><p>把1~10行内所有abcde转变为大写，注意，正则表达式元字符不能使用这个命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;1,10y/abcde/ABCDE/&#39;</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="退出-q命令" tabindex="-1"><a class="header-anchor" href="#退出-q命令"><span>退出：q命令</span></a></h3><p>打印完前10行后，退出sed:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;10q&#39;</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>直到找到第一个匹配项，退出sed：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@node4 ~<span class="token punctuation">]</span><span class="token comment"># sed  &#39;/nginx/q&#39; nginx.yml </span>
---
- hosts: nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="保持和获取-h命令和g命令" tabindex="-1"><a class="header-anchor" href="#保持和获取-h命令和g命令"><span>保持和获取：h命令和G命令</span></a></h3><p>在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将 打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;/test/h&#39;</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;$G&#39;</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将其复制并存入一个称为保持缓存区的特殊缓冲区内。第二条语句的意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它放回模式空间中，且追加到现在已经存在于模式空间中的行的末尾。在这个例子中就是追加到最后一行。简单来说，任何包含test的行都被复制并追加到该文件的末尾。</p><h3 id="保持和互换-h命令和x命令" tabindex="-1"><a class="header-anchor" href="#保持和互换-h命令和x命令"><span>保持和互换：h命令和x命令</span></a></h3><p>互换模式空间和保持缓冲区的内容。也就是把包含test与check的行互换：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;/test/h&#39;</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;/check/x&#39;</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="脚本scriptfile" tabindex="-1"><a class="header-anchor" href="#脚本scriptfile"><span>脚本scriptfile</span></a></h3><p>sed脚本是一个sed的命令清单，启动Sed时以-f选项引导脚本文件名。Sed对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空白或文本，如果在一行中有多个命令，要用分号分隔。以#开头的行为注释行，且不能跨行。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token parameter variable">-f</span> scriptfile file<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="打印奇数行或偶数行" tabindex="-1"><a class="header-anchor" href="#打印奇数行或偶数行"><span>打印奇数行或偶数行</span></a></h3><p>方法1：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;p;n&#39;</span> test.txt  <span class="token comment">#奇数行</span>
<span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;n;p&#39;</span> test.txt  <span class="token comment">#偶数行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>方法2：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;1~2p&#39;</span> test.txt  <span class="token comment">#奇数行</span>
<span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;2~2p&#39;</span> test.txt  <span class="token comment">#偶数行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="打印匹配字符串的下一行" tabindex="-1"><a class="header-anchor" href="#打印匹配字符串的下一行"><span>打印匹配字符串的下一行</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">grep</span> <span class="token parameter variable">-A</span> <span class="token number">1</span> SCC URFILE
<span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;/SCC/{n;p}&#39;</span> URFILE
<span class="token function">awk</span> <span class="token string">&#39;/SCC/{getline; print}&#39;</span> URFILE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,141),t=[l];function d(p,c){return n(),a("div",null,t)}const u=s(i,[["render",d],["__file","sed.html.vue"]]),v=JSON.parse('{"path":"/command/linux/sed.html","title":"sed","lang":"zh-CN","frontmatter":{"description":"sed 功能强大的流式文本编辑器 补充说明 sed 是一种流编辑器，它是文本处理中非常重要的工具，能够完美的配合正则表达式使用，功能不同凡响。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内...","head":[["meta",{"property":"og:url","content":"https://baymaxcoding.github.io/command/linux/sed.html"}],["meta",{"property":"og:site_name","content":"BaymaxCoding"}],["meta",{"property":"og:title","content":"sed"}],["meta",{"property":"og:description","content":"sed 功能强大的流式文本编辑器 补充说明 sed 是一种流编辑器，它是文本处理中非常重要的工具，能够完美的配合正则表达式使用，功能不同凡响。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T04:24:50.000Z"}],["meta",{"property":"article:author","content":"BaymaxCoding"}],["meta",{"property":"article:modified_time","content":"2024-04-12T04:24:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"sed\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T04:24:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BaymaxCoding\\",\\"url\\":\\"https://baymaxcoding.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"补充说明","slug":"补充说明","link":"#补充说明","children":[]},{"level":2,"title":"sed的选项、命令、替换标记","slug":"sed的选项、命令、替换标记","link":"#sed的选项、命令、替换标记","children":[{"level":3,"title":"选项","slug":"选项","link":"#选项","children":[]},{"level":3,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":3,"title":"sed命令","slug":"sed命令","link":"#sed命令","children":[]},{"level":3,"title":"sed替换标记","slug":"sed替换标记","link":"#sed替换标记","children":[]},{"level":3,"title":"sed元字符集","slug":"sed元字符集","link":"#sed元字符集","children":[]}]},{"level":2,"title":"sed用法实例","slug":"sed用法实例","link":"#sed用法实例","children":[{"level":3,"title":"替换操作：s命令","slug":"替换操作-s命令","link":"#替换操作-s命令","children":[]},{"level":3,"title":"全面替换标记g","slug":"全面替换标记g","link":"#全面替换标记g","children":[]},{"level":3,"title":"定界符","slug":"定界符","link":"#定界符","children":[]},{"level":3,"title":"删除操作：d命令","slug":"删除操作-d命令","link":"#删除操作-d命令","children":[]},{"level":3,"title":"已匹配字符串标记&","slug":"已匹配字符串标记","link":"#已匹配字符串标记","children":[]},{"level":3,"title":"子串匹配标记\\\\1","slug":"子串匹配标记-1","link":"#子串匹配标记-1","children":[]},{"level":3,"title":"大小写转换U/L","slug":"大小写转换u-l","link":"#大小写转换u-l","children":[]},{"level":3,"title":"组合多个表达式","slug":"组合多个表达式","link":"#组合多个表达式","children":[]},{"level":3,"title":"引用","slug":"引用","link":"#引用","children":[]},{"level":3,"title":"选定行的范围：,（逗号）","slug":"选定行的范围-逗号","link":"#选定行的范围-逗号","children":[]},{"level":3,"title":"多点编辑：e命令","slug":"多点编辑-e命令","link":"#多点编辑-e命令","children":[]},{"level":3,"title":"从文件读入：r命令","slug":"从文件读入-r命令","link":"#从文件读入-r命令","children":[]},{"level":3,"title":"写入文件：w命令","slug":"写入文件-w命令","link":"#写入文件-w命令","children":[]},{"level":3,"title":"追加（行下）：a\\\\命令","slug":"追加-行下-a-命令","link":"#追加-行下-a-命令","children":[]},{"level":3,"title":"插入（行上）：i\\\\命令","slug":"插入-行上-i-命令","link":"#插入-行上-i-命令","children":[]},{"level":3,"title":"替换指定行：c\\\\命令","slug":"替换指定行-c-命令","link":"#替换指定行-c-命令","children":[]},{"level":3,"title":"下一个：n命令","slug":"下一个-n命令","link":"#下一个-n命令","children":[]},{"level":3,"title":"变形：y命令","slug":"变形-y命令","link":"#变形-y命令","children":[]},{"level":3,"title":"退出：q命令","slug":"退出-q命令","link":"#退出-q命令","children":[]},{"level":3,"title":"保持和获取：h命令和G命令","slug":"保持和获取-h命令和g命令","link":"#保持和获取-h命令和g命令","children":[]},{"level":3,"title":"保持和互换：h命令和x命令","slug":"保持和互换-h命令和x命令","link":"#保持和互换-h命令和x命令","children":[]},{"level":3,"title":"脚本scriptfile","slug":"脚本scriptfile","link":"#脚本scriptfile","children":[]},{"level":3,"title":"打印奇数行或偶数行","slug":"打印奇数行或偶数行","link":"#打印奇数行或偶数行","children":[]},{"level":3,"title":"打印匹配字符串的下一行","slug":"打印匹配字符串的下一行","link":"#打印匹配字符串的下一行","children":[]}]}],"git":{"createdTime":1712895890000,"updatedTime":1712895890000,"contributors":[{"name":"BaymaxCoding","email":"BRemail2324996822@163.com","commits":1}]},"readingTime":{"minutes":10.98,"words":3295},"filePathRelative":"command/linux/sed.md","localizedDate":"2024年4月12日","autoDesc":true}');export{u as comp,v as data};
