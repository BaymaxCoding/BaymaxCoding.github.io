import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as e,b as s}from"./app-DOGW-9XX.js";const t={},i=s(`<h1 id="uniq" tabindex="-1"><a class="header-anchor" href="#uniq"><span>uniq</span></a></h1><p>显示或忽略重复的行。</p><h2 id="概要" tabindex="-1"><a class="header-anchor" href="#概要"><span>概要</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">uniq</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">[</span>INPUT <span class="token punctuation">[</span>OUTPUT<span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="主要用途" tabindex="-1"><a class="header-anchor" href="#主要用途"><span>主要用途</span></a></h2><ul><li>将输入文件（或标准输入）中邻近的重复行写入到输出文件（或标准输出）中。</li><li>当没有选项时，邻近的重复行将合并为一个。</li></ul><h2 id="选项" tabindex="-1"><a class="header-anchor" href="#选项"><span>选项</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>-c, <span class="token parameter variable">--count</span>                在每行开头增加重复次数。
-d, <span class="token parameter variable">--repeated</span>             所有邻近的重复行只被打印一次。
<span class="token parameter variable">-D</span>                         所有邻近的重复行将全部打印。
--all-repeated<span class="token punctuation">[</span><span class="token operator">=</span>METHOD<span class="token punctuation">]</span>    类似于 -D，但允许每组之间以空行分割。METHOD取值范围<span class="token punctuation">{</span>none<span class="token punctuation">(</span>默认<span class="token punctuation">)</span>，prepend，separate<span class="token punctuation">}</span>。
-f, --skip-fields<span class="token operator">=</span>N        跳过对前N个列的比较。
--group<span class="token punctuation">[</span><span class="token operator">=</span>METHOD<span class="token punctuation">]</span>           显示所有行，允许每组之间以空行分割。METHOD取值范围：<span class="token punctuation">{</span>separate<span class="token punctuation">(</span>默认<span class="token punctuation">)</span>，prepend，append，both<span class="token punctuation">}</span>。
-i, --ignore-case          忽略大小写的差异。
-s, --skip-chars<span class="token operator">=</span>N         跳过对前N个字符的比较。
-u, <span class="token parameter variable">--unique</span>               只打印非邻近的重复行。
-z, --zero-terminated      设置行终止符为NUL（空），而不是换行符。
-w, --check-chars<span class="token operator">=</span>N        只对每行前N个字符进行比较。
<span class="token parameter variable">--help</span>                     显示帮助信息并退出。
<span class="token parameter variable">--version</span>                  显示版本信息并退出。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h2><p>INPUT（可选）：输入文件，不提供时为标准输入。</p><p>OUTPUT（可选）：输出文件，不提供时为标准输出。</p><h2 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值"><span>返回值</span></a></h2><p>返回0表示成功，返回非0值表示失败。</p><h2 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子</span></a></h2><p>注意：命令2和命令3结果一样，命令1仅作了相邻行的去重。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">uniq</span> file.txt
<span class="token function">sort</span> file.txt <span class="token operator">|</span> <span class="token function">uniq</span>
<span class="token function">sort</span> <span class="token parameter variable">-u</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只显示单一行，区别在于是否执行排序：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">uniq</span> <span class="token parameter variable">-u</span> file.txt
<span class="token function">sort</span> file.txt <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token parameter variable">-u</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>统计各行在文件中出现的次数：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sort</span> file.txt <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token parameter variable">-c</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在文件中找出重复的行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sort</span> file.txt <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意</span></a></h3><ol><li><p><code>uniq</code>只检测邻近的行是否重复，<code>sort -u</code>将输入文件先排序然后再处理重复行。</p></li><li><p>该命令是<code>GNU coreutils</code>包中的命令，相关的帮助信息请查看<code>man -s 1 uniq</code>，<code>info coreutils &#39;uniq invocation&#39;</code>。</p></li></ol>`,24),l=[i];function p(o,c){return n(),e("div",null,l)}const u=a(t,[["render",p],["__file","uniq.html.vue"]]),h=JSON.parse('{"path":"/command/linux/uniq.html","title":"uniq","lang":"zh-CN","frontmatter":{"description":"uniq 显示或忽略重复的行。 概要 主要用途 将输入文件（或标准输入）中邻近的重复行写入到输出文件（或标准输出）中。 当没有选项时，邻近的重复行将合并为一个。 选项 参数 INPUT（可选）：输入文件，不提供时为标准输入。 OUTPUT（可选）：输出文件，不提供时为标准输出。 返回值 返回0表示成功，返回非0值表示失败。 例子 注意：命令2和命令3结...","head":[["meta",{"property":"og:url","content":"https://baymaxcoding.github.io/command/linux/uniq.html"}],["meta",{"property":"og:site_name","content":"BaymaxCoding"}],["meta",{"property":"og:title","content":"uniq"}],["meta",{"property":"og:description","content":"uniq 显示或忽略重复的行。 概要 主要用途 将输入文件（或标准输入）中邻近的重复行写入到输出文件（或标准输出）中。 当没有选项时，邻近的重复行将合并为一个。 选项 参数 INPUT（可选）：输入文件，不提供时为标准输入。 OUTPUT（可选）：输出文件，不提供时为标准输出。 返回值 返回0表示成功，返回非0值表示失败。 例子 注意：命令2和命令3结..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T04:24:50.000Z"}],["meta",{"property":"article:author","content":"BaymaxCoding"}],["meta",{"property":"article:modified_time","content":"2024-04-12T04:24:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"uniq\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T04:24:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BaymaxCoding\\",\\"url\\":\\"https://baymaxcoding.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"概要","slug":"概要","link":"#概要","children":[]},{"level":2,"title":"主要用途","slug":"主要用途","link":"#主要用途","children":[]},{"level":2,"title":"选项","slug":"选项","link":"#选项","children":[]},{"level":2,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":2,"title":"返回值","slug":"返回值","link":"#返回值","children":[]},{"level":2,"title":"例子","slug":"例子","link":"#例子","children":[{"level":3,"title":"注意","slug":"注意","link":"#注意","children":[]}]}],"git":{"createdTime":1712895890000,"updatedTime":1712895890000,"contributors":[{"name":"BaymaxCoding","email":"BRemail2324996822@163.com","commits":1}]},"readingTime":{"minutes":1.63,"words":490},"filePathRelative":"command/linux/uniq.md","localizedDate":"2024年4月12日","autoDesc":true}');export{u as comp,h as data};
