import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as n,b as e}from"./app-CHACLx4z.js";const t={},i=e(`<h1 id="strings" tabindex="-1"><a class="header-anchor" href="#strings"><span>strings</span></a></h1><p>在对象文件或二进制文件中查找可打印的字符串</p><h2 id="补充说明" tabindex="-1"><a class="header-anchor" href="#补充说明"><span>补充说明</span></a></h2><p><strong>strings命令</strong> 在对象文件或二进制文件中查找可打印的字符串。字符串是4个或更多可打印字符的任意序列，以换行符或空字符结束。 strings命令对识别随机对象文件很有用。</p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>strings <span class="token punctuation">[</span> <span class="token parameter variable">-a</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> - <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-o</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-t</span> Format <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> Number <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-Number</span> <span class="token punctuation">]</span>  <span class="token punctuation">[</span>file <span class="token punctuation">..</span>. <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="选项" tabindex="-1"><a class="header-anchor" href="#选项"><span>选项</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token parameter variable">-a</span> --all：扫描整个文件而不是只扫描目标文件初始化和装载段
<span class="token parameter variable">-f</span> –print-file-name：在显示字符串前先显示文件名
<span class="token parameter variable">-n</span> –bytes<span class="token operator">=</span><span class="token punctuation">[</span>number<span class="token punctuation">]</span>：找到并且输出所有NUL终止符序列
- ：设置显示的最少的字符数，默认是4个字符
<span class="token parameter variable">-t</span> <span class="token parameter variable">--radix</span><span class="token operator">=</span><span class="token punctuation">{</span>o,d,x<span class="token punctuation">}</span> ：输出字符的位置，基于八进制，十进制或者十六进制
<span class="token parameter variable">-o</span> ：类似--radix<span class="token operator">=</span>o
<span class="token parameter variable">-T</span> <span class="token parameter variable">--target</span><span class="token operator">=</span> ：指定二进制文件格式
<span class="token parameter variable">-e</span> <span class="token parameter variable">--encoding</span><span class="token operator">=</span><span class="token punctuation">{</span>s,S,b,l,B,L<span class="token punctuation">}</span> ：选择字符大小和排列顺序:s <span class="token operator">=</span> <span class="token number">7</span>-bit, S <span class="token operator">=</span> <span class="token number">8</span>-bit, <span class="token punctuation">{</span>b,l<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">16</span>-bit, <span class="token punctuation">{</span>B,L<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">32</span>-bit
@ ：读取中选项
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h3><p>列出ls中所有的ASCII文本：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>strings /bin/ls
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>列出ls中所有的ASCII文本：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cat</span> /bin/ls strings
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查找ls中包含libc的字符串，不区分大小写：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>strings /bin/ls <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> libc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,15),p=[i];function l(r,o){return s(),n("div",null,p)}const u=a(t,[["render",l],["__file","strings.html.vue"]]),m=JSON.parse('{"path":"/command/linux/strings.html","title":"strings","lang":"zh-CN","frontmatter":{"description":"strings 在对象文件或二进制文件中查找可打印的字符串 补充说明 strings命令 在对象文件或二进制文件中查找可打印的字符串。字符串是4个或更多可打印字符的任意序列，以换行符或空字符结束。 strings命令对识别随机对象文件很有用。 语法 选项 实例 列出ls中所有的ASCII文本： 列出ls中所有的ASCII文本： 查找ls中包含libc的...","head":[["meta",{"property":"og:url","content":"https://baymaxcoding.github.io/command/linux/strings.html"}],["meta",{"property":"og:site_name","content":"BaymaxCoding"}],["meta",{"property":"og:title","content":"strings"}],["meta",{"property":"og:description","content":"strings 在对象文件或二进制文件中查找可打印的字符串 补充说明 strings命令 在对象文件或二进制文件中查找可打印的字符串。字符串是4个或更多可打印字符的任意序列，以换行符或空字符结束。 strings命令对识别随机对象文件很有用。 语法 选项 实例 列出ls中所有的ASCII文本： 列出ls中所有的ASCII文本： 查找ls中包含libc的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T04:24:50.000Z"}],["meta",{"property":"article:author","content":"BaymaxCoding"}],["meta",{"property":"article:modified_time","content":"2024-04-12T04:24:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"strings\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T04:24:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BaymaxCoding\\",\\"url\\":\\"https://baymaxcoding.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"补充说明","slug":"补充说明","link":"#补充说明","children":[{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"选项","slug":"选项","link":"#选项","children":[]},{"level":3,"title":"实例","slug":"实例","link":"#实例","children":[]}]}],"git":{"createdTime":1712895890000,"updatedTime":1712895890000,"contributors":[{"name":"BaymaxCoding","email":"BRemail2324996822@163.com","commits":1}]},"readingTime":{"minutes":1.07,"words":320},"filePathRelative":"command/linux/strings.md","localizedDate":"2024年4月12日","autoDesc":true}');export{u as comp,m as data};
